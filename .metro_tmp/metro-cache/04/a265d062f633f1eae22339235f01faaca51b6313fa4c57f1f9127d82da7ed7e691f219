{"dependencies":[{"name":"./toDate.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":52},"end":{"line":2,"column":37,"index":89}}],"key":"o2GbHlM0wxsRaLWHEC6986QcehU="}},{"name":"./constructFrom.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"fe1vuD5Al7BWVRtgitxEm0VpSx0="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.setYear = setYear;\n  /**\n   * The {@link setYear} function options.\n   */\n\n  /**\n   * @name setYear\n   * @category Year Helpers\n   * @summary Set the year to the given date.\n   *\n   * @description\n   * Set the year to the given date.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param date - The date to be changed\n   * @param year - The year of the new date\n   * @param options - An object with options.\n   *\n   * @returns The new date with the year set\n   *\n   * @example\n   * // Set year 2013 to 1 September 2014:\n   * const result = setYear(new Date(2014, 8, 1), 2013)\n   * //=> Sun Sep 01 2013 00:00:00\n   */\n  function setYear(date, year, options) {\n    var date_ = (0, _$$_REQUIRE(_dependencyMap[0], \"./toDate.js\").toDate)(date, options == null ? void 0 : options.in);\n\n    // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n    if (isNaN(+date_)) return (0, _$$_REQUIRE(_dependencyMap[1], \"./constructFrom.js\").constructFrom)((options == null ? void 0 : options.in) || date, NaN);\n    date_.setFullYear(year);\n    return date_;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = setYear;\n});","lineCount":44,"map":[[7,2,4,0],[8,0,5,0],[9,0,6,0],[11,2,8,0],[12,0,9,0],[13,0,10,0],[14,0,11,0],[15,0,12,0],[16,0,13,0],[17,0,14,0],[18,0,15,0],[19,0,16,0],[20,0,17,0],[21,0,18,0],[22,0,19,0],[23,0,20,0],[24,0,21,0],[25,0,22,0],[26,0,23,0],[27,0,24,0],[28,0,25,0],[29,0,26,0],[30,0,27,0],[31,0,28,0],[32,0,29,0],[33,2,30,7],[33,11,30,16,"setYear"],[33,18,30,23,"setYear"],[33,19,30,24,"date"],[33,23,30,28],[33,25,30,30,"year"],[33,29,30,34],[33,31,30,36,"options"],[33,38,30,43],[33,40,30,45],[34,4,31,2],[34,8,31,8,"date_"],[34,13,31,13],[34,16,31,16],[34,20,31,16,"toDate"],[34,50,31,16],[34,51,31,16,"toDate"],[34,72,31,22],[34,74,31,23,"date"],[34,78,31,27],[34,80,31,29,"options"],[34,87,31,36],[34,107,31,29,"options"],[34,114,31,36],[34,115,31,38,"in"],[34,117,31,40],[34,118,31,41],[36,4,33,2],[37,4,34,2],[37,8,34,6,"isNaN"],[37,13,34,11],[37,14,34,12],[37,15,34,13,"date_"],[37,20,34,18],[37,21,34,19],[37,23,34,21],[37,30,34,28],[37,34,34,28,"constructFrom"],[37,64,34,28],[37,65,34,28,"constructFrom"],[37,100,34,41],[37,102,34,42],[37,103,34,42,"options"],[37,110,34,49],[37,130,34,42,"options"],[37,137,34,49],[37,138,34,51,"in"],[37,140,34,53],[37,145,34,57,"date"],[37,149,34,61],[37,151,34,63,"NaN"],[37,154,34,66],[37,155,34,67],[38,4,36,2,"date_"],[38,9,36,7],[38,10,36,8,"setFullYear"],[38,21,36,19],[38,22,36,20,"year"],[38,26,36,24],[38,27,36,25],[39,4,37,2],[39,11,37,9,"date_"],[39,16,37,14],[40,2,38,0],[42,2,40,0],[43,2,40,0],[43,6,40,0,"_default"],[43,14,40,0],[43,17,40,0,"exports"],[43,24,40,0],[43,25,40,0,"default"],[43,32,40,0],[43,35,41,15,"setYear"],[43,42,41,22],[44,0,41,22],[44,3]],"functionMap":{"names":["<global>","setYear"],"mappings":"AAA;OC6B;CDQ"}},"type":"js/module"}]}