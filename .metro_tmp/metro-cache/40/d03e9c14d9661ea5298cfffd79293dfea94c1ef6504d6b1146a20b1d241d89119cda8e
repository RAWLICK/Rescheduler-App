{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":60,"column":0,"index":1866}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":60,"column":0,"index":1866}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"qsrciYLlsSqtgV9rGEsSwSoAnCw="}},{"name":"./min.js","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":91},"end":{"line":3,"column":31,"index":122}}],"key":"ACROdDSlLITFn3OBcBCnv5EXQxo="}},{"name":"./max.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":59},"end":{"line":2,"column":31,"index":90}}],"key":"W1vC/Iv8LN2LFy9Y57FRj+L/WjU="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.clamp = clamp;\n  exports.default = void 0;\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  /**\n   * The {@link clamp} function options.\n   */\n\n  /**\n   * The {@link clamp} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the date argument,\n   * then the start interval date, and finally the end interval date. If\n   * a context function is passed, it uses the context function return type.\n   */\n\n  /**\n   * @name clamp\n   * @category Interval Helpers\n   * @summary Return a date bounded by the start and the end of the given interval.\n   *\n   * @description\n   * Clamps a date to the lower bound with the start of the interval and the upper\n   * bound with the end of the interval.\n   *\n   * - When the date is less than the start of the interval, the start is returned.\n   * - When the date is greater than the end of the interval, the end is returned.\n   * - Otherwise the date is returned.\n   *\n   * @typeParam DateType - Date argument type.\n   * @typeParam IntervalType - Interval argument type.\n   * @typeParam Options - Options type.\n   *\n   * @param date - The date to be bounded\n   * @param interval - The interval to bound to\n   * @param options - An object with options\n   *\n   * @returns The date bounded by the start and the end of the interval\n   *\n   * @example\n   * // What is Mar 21, 2021 bounded to an interval starting at Mar 22, 2021 and ending at Apr 01, 2021\n   * const result = clamp(new Date(2021, 2, 21), {\n   *   start: new Date(2021, 2, 22),\n   *   end: new Date(2021, 3, 1),\n   * })\n   * //=> Mon Mar 22 2021 00:00:00\n   */\n  function clamp(date, interval, options) {\n    var _normalizeDates = (0, _$$_REQUIRE(_dependencyMap[2], \"./_lib/normalizeDates.js\").normalizeDates)(options == null ? void 0 : options.in, date, interval.start, interval.end),\n      _normalizeDates2 = (0, _slicedToArray2.default)(_normalizeDates, 3),\n      date_ = _normalizeDates2[0],\n      start = _normalizeDates2[1],\n      end = _normalizeDates2[2];\n    return (0, _$$_REQUIRE(_dependencyMap[3], \"./min.js\").min)([(0, _$$_REQUIRE(_dependencyMap[4], \"./max.js\").max)([date_, start], options), end], options);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = clamp;\n});","lineCount":62,"map":[[9,2,5,0],[10,0,6,0],[11,0,7,0],[13,2,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[20,2,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,0,29,0],[34,0,30,0],[35,0,31,0],[36,0,32,0],[37,0,33,0],[38,0,34,0],[39,0,35,0],[40,0,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,0,40,0],[45,0,41,0],[46,0,42,0],[47,0,43,0],[48,0,44,0],[49,0,45,0],[50,0,46,0],[51,2,47,7],[51,11,47,16,"clamp"],[51,16,47,21,"clamp"],[51,17,47,22,"date"],[51,21,47,26],[51,23,47,28,"interval"],[51,31,47,36],[51,33,47,38,"options"],[51,40,47,45],[51,42,47,47],[52,4,48,2],[52,8,48,2,"_normalizeDates"],[52,23,48,2],[52,26,48,30],[52,30,48,30,"normalizeDates"],[52,60,48,30],[52,61,48,30,"normalizeDates"],[52,103,48,44],[52,105,49,4,"options"],[52,112,49,11],[52,132,49,4,"options"],[52,139,49,11],[52,140,49,13,"in"],[52,142,49,15],[52,144,50,4,"date"],[52,148,50,8],[52,150,51,4,"interval"],[52,158,51,12],[52,159,51,13,"start"],[52,164,51,18],[52,166,52,4,"interval"],[52,174,52,12],[52,175,52,13,"end"],[52,178,53,2],[52,179,53,3],[53,6,53,3,"_normalizeDates2"],[53,22,53,3],[53,29,53,3,"_slicedToArray2"],[53,44,53,3],[53,45,53,3,"default"],[53,52,53,3],[53,54,53,3,"_normalizeDates"],[53,69,53,3],[54,6,48,9,"date_"],[54,11,48,14],[54,14,48,14,"_normalizeDates2"],[54,30,48,14],[55,6,48,16,"start"],[55,11,48,21],[55,14,48,21,"_normalizeDates2"],[55,30,48,21],[56,6,48,23,"end"],[56,9,48,26],[56,12,48,26,"_normalizeDates2"],[56,28,48,26],[57,4,55,2],[57,11,55,9],[57,15,55,9,"min"],[57,45,55,9],[57,46,55,9,"min"],[57,61,55,12],[57,63,55,13],[57,64,55,14],[57,68,55,14,"max"],[57,98,55,14],[57,99,55,14,"max"],[57,114,55,17],[57,116,55,18],[57,117,55,19,"date_"],[57,122,55,24],[57,124,55,26,"start"],[57,129,55,31],[57,130,55,32],[57,132,55,34,"options"],[57,139,55,41],[57,140,55,42],[57,142,55,44,"end"],[57,145,55,47],[57,146,55,48],[57,148,55,50,"options"],[57,155,55,57],[57,156,55,58],[58,2,56,0],[60,2,58,0],[61,2,58,0],[61,6,58,0,"_default"],[61,14,58,0],[61,17,58,0,"exports"],[61,24,58,0],[61,25,58,0,"default"],[61,32,58,0],[61,35,59,15,"clamp"],[61,40,59,20],[62,0,59,20],[62,3]],"functionMap":{"names":["<global>","clamp"],"mappings":"AAA;OC8C;CDS"}},"type":"js/module"}]}