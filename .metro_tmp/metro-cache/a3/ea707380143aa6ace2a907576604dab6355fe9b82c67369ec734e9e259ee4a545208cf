{"dependencies":[],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  module.exports = parse;\n\n  /**\n   * expected argument lengths\n   * @type {Object}\n   */\n\n  var length = {\n    a: 7,\n    c: 6,\n    h: 1,\n    l: 2,\n    m: 2,\n    q: 4,\n    s: 4,\n    t: 2,\n    v: 1,\n    z: 0\n  };\n\n  /**\n   * segment pattern\n   * @type {RegExp}\n   */\n\n  var segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig;\n\n  /**\n   * parse an svg path data string. Generates an Array\n   * of commands where each command is an Array of the\n   * form `[command, arg1, arg2, ...]`\n   *\n   * @param {String} path\n   * @return {Array}\n   */\n\n  function parse(path) {\n    var data = [];\n    path.replace(segment, function (_, command, args) {\n      var type = command.toLowerCase();\n      args = parseValues(args);\n\n      // overloaded moveTo\n      if (type == 'm' && args.length > 2) {\n        data.push([command].concat(args.splice(0, 2)));\n        type = 'l';\n        command = command == 'm' ? 'l' : 'L';\n      }\n      while (true) {\n        if (args.length == length[type]) {\n          args.unshift(command);\n          return data.push(args);\n        }\n        if (args.length < length[type]) throw new Error('malformed path data');\n        data.push([command].concat(args.splice(0, length[type])));\n      }\n    });\n    return data;\n  }\n  var number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig;\n  function parseValues(args) {\n    var numbers = args.match(number);\n    return numbers ? numbers.map(Number) : [];\n  }\n});","lineCount":66,"map":[[2,2,2,0,"module"],[2,8,2,6],[2,9,2,7,"exports"],[2,16,2,14],[2,19,2,17,"parse"],[2,24,2,22],[4,2,4,0],[5,0,5,0],[6,0,6,0],[7,0,7,0],[9,2,9,0],[9,6,9,4,"length"],[9,12,9,10],[9,15,9,13],[10,4,9,14,"a"],[10,5,9,15],[10,7,9,17],[10,8,9,18],[11,4,9,20,"c"],[11,5,9,21],[11,7,9,23],[11,8,9,24],[12,4,9,26,"h"],[12,5,9,27],[12,7,9,29],[12,8,9,30],[13,4,9,32,"l"],[13,5,9,33],[13,7,9,35],[13,8,9,36],[14,4,9,38,"m"],[14,5,9,39],[14,7,9,41],[14,8,9,42],[15,4,9,44,"q"],[15,5,9,45],[15,7,9,47],[15,8,9,48],[16,4,9,50,"s"],[16,5,9,51],[16,7,9,53],[16,8,9,54],[17,4,9,56,"t"],[17,5,9,57],[17,7,9,59],[17,8,9,60],[18,4,9,62,"v"],[18,5,9,63],[18,7,9,65],[18,8,9,66],[19,4,9,68,"z"],[19,5,9,69],[19,7,9,71],[20,2,9,72],[20,3,9,73],[22,2,11,0],[23,0,12,0],[24,0,13,0],[25,0,14,0],[27,2,16,0],[27,6,16,4,"segment"],[27,13,16,11],[27,16,16,14],[27,50,16,48],[29,2,18,0],[30,0,19,0],[31,0,20,0],[32,0,21,0],[33,0,22,0],[34,0,23,0],[35,0,24,0],[36,0,25,0],[38,2,27,0],[38,11,27,9,"parse"],[38,16,27,14,"parse"],[38,17,27,15,"path"],[38,21,27,19],[38,23,27,21],[39,4,28,1],[39,8,28,5,"data"],[39,12,28,9],[39,15,28,12],[39,17,28,14],[40,4,29,1,"path"],[40,8,29,5],[40,9,29,6,"replace"],[40,16,29,13],[40,17,29,14,"segment"],[40,24,29,21],[40,26,29,23],[40,36,29,32,"_"],[40,37,29,33],[40,39,29,35,"command"],[40,46,29,42],[40,48,29,44,"args"],[40,52,29,48],[40,54,29,49],[41,6,30,2],[41,10,30,6,"type"],[41,14,30,10],[41,17,30,13,"command"],[41,24,30,20],[41,25,30,21,"toLowerCase"],[41,36,30,32],[41,37,30,33],[41,38,30,34],[42,6,31,2,"args"],[42,10,31,6],[42,13,31,9,"parseValues"],[42,24,31,20],[42,25,31,21,"args"],[42,29,31,25],[42,30,31,26],[44,6,33,2],[45,6,34,2],[45,10,34,6,"type"],[45,14,34,10],[45,18,34,14],[45,21,34,17],[45,25,34,21,"args"],[45,29,34,25],[45,30,34,26,"length"],[45,36,34,32],[45,39,34,35],[45,40,34,36],[45,42,34,38],[46,8,35,3,"data"],[46,12,35,7],[46,13,35,8,"push"],[46,17,35,12],[46,18,35,13],[46,19,35,14,"command"],[46,26,35,21],[46,27,35,22],[46,28,35,23,"concat"],[46,34,35,29],[46,35,35,30,"args"],[46,39,35,34],[46,40,35,35,"splice"],[46,46,35,41],[46,47,35,42],[46,48,35,43],[46,50,35,45],[46,51,35,46],[46,52,35,47],[46,53,35,48],[46,54,35,49],[47,8,36,3,"type"],[47,12,36,7],[47,15,36,10],[47,18,36,13],[48,8,37,3,"command"],[48,15,37,10],[48,18,37,13,"command"],[48,25,37,20],[48,29,37,24],[48,32,37,27],[48,35,37,30],[48,38,37,33],[48,41,37,36],[48,44,37,39],[49,6,38,2],[50,6,40,2],[50,13,40,9],[50,17,40,13],[50,19,40,15],[51,8,41,3],[51,12,41,7,"args"],[51,16,41,11],[51,17,41,12,"length"],[51,23,41,18],[51,27,41,22,"length"],[51,33,41,28],[51,34,41,29,"type"],[51,38,41,33],[51,39,41,34],[51,41,41,36],[52,10,42,4,"args"],[52,14,42,8],[52,15,42,9,"unshift"],[52,22,42,16],[52,23,42,17,"command"],[52,30,42,24],[52,31,42,25],[53,10,43,4],[53,17,43,11,"data"],[53,21,43,15],[53,22,43,16,"push"],[53,26,43,20],[53,27,43,21,"args"],[53,31,43,25],[53,32,43,26],[54,8,44,3],[55,8,45,3],[55,12,45,7,"args"],[55,16,45,11],[55,17,45,12,"length"],[55,23,45,18],[55,26,45,21,"length"],[55,32,45,27],[55,33,45,28,"type"],[55,37,45,32],[55,38,45,33],[55,40,45,35],[55,46,45,41],[55,50,45,45,"Error"],[55,55,45,50],[55,56,45,51],[55,77,45,72],[55,78,45,73],[56,8,46,3,"data"],[56,12,46,7],[56,13,46,8,"push"],[56,17,46,12],[56,18,46,13],[56,19,46,14,"command"],[56,26,46,21],[56,27,46,22],[56,28,46,23,"concat"],[56,34,46,29],[56,35,46,30,"args"],[56,39,46,34],[56,40,46,35,"splice"],[56,46,46,41],[56,47,46,42],[56,48,46,43],[56,50,46,45,"length"],[56,56,46,51],[56,57,46,52,"type"],[56,61,46,56],[56,62,46,57],[56,63,46,58],[56,64,46,59],[56,65,46,60],[57,6,47,2],[58,4,48,1],[58,5,48,2],[58,6,48,3],[59,4,49,1],[59,11,49,8,"data"],[59,15,49,12],[60,2,50,0],[61,2,52,0],[61,6,52,4,"number"],[61,12,52,10],[61,15,52,13],[61,50,52,48],[62,2,54,0],[62,11,54,9,"parseValues"],[62,22,54,20,"parseValues"],[62,23,54,21,"args"],[62,27,54,25],[62,29,54,27],[63,4,55,1],[63,8,55,5,"numbers"],[63,15,55,12],[63,18,55,15,"args"],[63,22,55,19],[63,23,55,20,"match"],[63,28,55,25],[63,29,55,26,"number"],[63,35,55,32],[63,36,55,33],[64,4,56,1],[64,11,56,8,"numbers"],[64,18,56,15],[64,21,56,18,"numbers"],[64,28,56,25],[64,29,56,26,"map"],[64,32,56,29],[64,33,56,30,"Number"],[64,39,56,36],[64,40,56,37],[64,43,56,40],[64,45,56,42],[65,2,57,0],[66,0,57,1],[66,3]],"functionMap":{"names":["<global>","parse","path.replace$argument_1","parseValues"],"mappings":"AAA;AC0B;uBCE;EDmB;CDE;AGI;CHG"}},"type":"js/module"}]}