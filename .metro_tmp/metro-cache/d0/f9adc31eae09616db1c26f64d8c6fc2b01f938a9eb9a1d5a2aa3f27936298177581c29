{"dependencies":[{"name":"./constants","data":{"asyncType":null,"locs":[{"start":{"line":6,"column":17,"index":96},"end":{"line":6,"column":39,"index":118}}],"key":"+w+ycjOssqrFJ0RRPi082paMSXY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  exports.__esModule = true;\n  exports.default = createPersistoid;\n  // @TODO remove once flow < 0.63 support is no longer required.\n  function createPersistoid(config) {\n    // defaults\n    var blacklist = config.blacklist || null;\n    var whitelist = config.whitelist || null;\n    var transforms = config.transforms || [];\n    var throttle = config.throttle || 0;\n    var storageKey = \"\".concat(config.keyPrefix !== undefined ? config.keyPrefix : _$$_REQUIRE(_dependencyMap[0], \"./constants\").KEY_PREFIX).concat(config.key);\n    var storage = config.storage;\n    var serialize;\n    if (config.serialize === false) {\n      serialize = function serialize(x) {\n        return x;\n      };\n    } else if (typeof config.serialize === 'function') {\n      serialize = config.serialize;\n    } else {\n      serialize = defaultSerialize;\n    }\n    var writeFailHandler = config.writeFailHandler || null; // initialize stateful values\n\n    var lastState = {};\n    var stagedState = {};\n    var keysToProcess = [];\n    var timeIterator = null;\n    var writePromise = null;\n    var update = function update(state) {\n      // add any changed keys to the queue\n      Object.keys(state).forEach(function (key) {\n        if (!passWhitelistBlacklist(key)) return; // is keyspace ignored? noop\n\n        if (lastState[key] === state[key]) return; // value unchanged? noop\n\n        if (keysToProcess.indexOf(key) !== -1) return; // is key already queued? noop\n\n        keysToProcess.push(key); // add key to queue\n      }); //if any key is missing in the new state which was present in the lastState,\n      //add it for processing too\n\n      Object.keys(lastState).forEach(function (key) {\n        if (state[key] === undefined && passWhitelistBlacklist(key) && keysToProcess.indexOf(key) === -1 && lastState[key] !== undefined) {\n          keysToProcess.push(key);\n        }\n      }); // start the time iterator if not running (read: throttle)\n\n      if (timeIterator === null) {\n        timeIterator = setInterval(processNextKey, throttle);\n      }\n      lastState = state;\n    };\n    function processNextKey() {\n      if (keysToProcess.length === 0) {\n        if (timeIterator) clearInterval(timeIterator);\n        timeIterator = null;\n        return;\n      }\n      var key = keysToProcess.shift();\n      var endState = transforms.reduce(function (subState, transformer) {\n        return transformer.in(subState, key, lastState);\n      }, lastState[key]);\n      if (endState !== undefined) {\n        try {\n          stagedState[key] = serialize(endState);\n        } catch (err) {\n          console.error('redux-persist/createPersistoid: error serializing state', err);\n        }\n      } else {\n        //if the endState is undefined, no need to persist the existing serialized content\n        delete stagedState[key];\n      }\n      if (keysToProcess.length === 0) {\n        writeStagedState();\n      }\n    }\n    function writeStagedState() {\n      // cleanup any removed keys just before write.\n      Object.keys(stagedState).forEach(function (key) {\n        if (lastState[key] === undefined) {\n          delete stagedState[key];\n        }\n      });\n      writePromise = storage.setItem(storageKey, serialize(stagedState)).catch(onWriteFail);\n    }\n    function passWhitelistBlacklist(key) {\n      if (whitelist && whitelist.indexOf(key) === -1 && key !== '_persist') return false;\n      if (blacklist && blacklist.indexOf(key) !== -1) return false;\n      return true;\n    }\n    function onWriteFail(err) {\n      // @TODO add fail handlers (typically storage full)\n      if (writeFailHandler) writeFailHandler(err);\n      if (err && process.env.NODE_ENV !== 'production') {\n        console.error('Error storing data', err);\n      }\n    }\n    var flush = function flush() {\n      while (keysToProcess.length !== 0) {\n        processNextKey();\n      }\n      return writePromise || Promise.resolve();\n    }; // return `persistoid`\n\n    return {\n      update: update,\n      flush: flush\n    };\n  } // @NOTE in the future this may be exposed via config\n\n  function defaultSerialize(data) {\n    return JSON.stringify(data);\n  }\n});","lineCount":117,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"exports"],[4,9,3,7],[4,10,3,8,"__esModule"],[4,20,3,18],[4,23,3,21],[4,27,3,25],[5,2,4,0,"exports"],[5,9,4,7],[5,10,4,8,"default"],[5,17,4,15],[5,20,4,18,"createPersistoid"],[5,36,4,34],[6,2,8,0],[7,2,9,0],[7,11,9,9,"createPersistoid"],[7,27,9,25,"createPersistoid"],[7,28,9,26,"config"],[7,34,9,32],[7,36,9,34],[8,4,10,2],[9,4,11,2],[9,8,11,6,"blacklist"],[9,17,11,15],[9,20,11,18,"config"],[9,26,11,24],[9,27,11,25,"blacklist"],[9,36,11,34],[9,40,11,38],[9,44,11,42],[10,4,12,2],[10,8,12,6,"whitelist"],[10,17,12,15],[10,20,12,18,"config"],[10,26,12,24],[10,27,12,25,"whitelist"],[10,36,12,34],[10,40,12,38],[10,44,12,42],[11,4,13,2],[11,8,13,6,"transforms"],[11,18,13,16],[11,21,13,19,"config"],[11,27,13,25],[11,28,13,26,"transforms"],[11,38,13,36],[11,42,13,40],[11,44,13,42],[12,4,14,2],[12,8,14,6,"throttle"],[12,16,14,14],[12,19,14,17,"config"],[12,25,14,23],[12,26,14,24,"throttle"],[12,34,14,32],[12,38,14,36],[12,39,14,37],[13,4,15,2],[13,8,15,6,"storageKey"],[13,18,15,16],[13,21,15,19],[13,23,15,21],[13,24,15,22,"concat"],[13,30,15,28],[13,31,15,29,"config"],[13,37,15,35],[13,38,15,36,"keyPrefix"],[13,47,15,45],[13,52,15,50,"undefined"],[13,61,15,59],[13,64,15,62,"config"],[13,70,15,68],[13,71,15,69,"keyPrefix"],[13,80,15,78],[13,83,15,81,"_$$_REQUIRE"],[13,94,15,81],[13,95,15,81,"_dependencyMap"],[13,109,15,81],[13,129,15,92,"KEY_PREFIX"],[13,139,15,102],[13,140,15,103],[13,141,15,104,"concat"],[13,147,15,110],[13,148,15,111,"config"],[13,154,15,117],[13,155,15,118,"key"],[13,158,15,121],[13,159,15,122],[14,4,16,2],[14,8,16,6,"storage"],[14,15,16,13],[14,18,16,16,"config"],[14,24,16,22],[14,25,16,23,"storage"],[14,32,16,30],[15,4,17,2],[15,8,17,6,"serialize"],[15,17,17,15],[16,4,19,2],[16,8,19,6,"config"],[16,14,19,12],[16,15,19,13,"serialize"],[16,24,19,22],[16,29,19,27],[16,34,19,32],[16,36,19,34],[17,6,20,4,"serialize"],[17,15,20,13],[17,18,20,16],[17,27,20,25,"serialize"],[17,36,20,34,"serialize"],[17,37,20,35,"x"],[17,38,20,36],[17,40,20,38],[18,8,21,6],[18,15,21,13,"x"],[18,16,21,14],[19,6,22,4],[19,7,22,5],[20,4,23,2],[20,5,23,3],[20,11,23,9],[20,15,23,13],[20,22,23,20,"config"],[20,28,23,26],[20,29,23,27,"serialize"],[20,38,23,36],[20,43,23,41],[20,53,23,51],[20,55,23,53],[21,6,24,4,"serialize"],[21,15,24,13],[21,18,24,16,"config"],[21,24,24,22],[21,25,24,23,"serialize"],[21,34,24,32],[22,4,25,2],[22,5,25,3],[22,11,25,9],[23,6,26,4,"serialize"],[23,15,26,13],[23,18,26,16,"defaultSerialize"],[23,34,26,32],[24,4,27,2],[25,4,29,2],[25,8,29,6,"writeFailHandler"],[25,24,29,22],[25,27,29,25,"config"],[25,33,29,31],[25,34,29,32,"writeFailHandler"],[25,50,29,48],[25,54,29,52],[25,58,29,56],[25,59,29,57],[25,60,29,58],[27,4,31,2],[27,8,31,6,"lastState"],[27,17,31,15],[27,20,31,18],[27,21,31,19],[27,22,31,20],[28,4,32,2],[28,8,32,6,"stagedState"],[28,19,32,17],[28,22,32,20],[28,23,32,21],[28,24,32,22],[29,4,33,2],[29,8,33,6,"keysToProcess"],[29,21,33,19],[29,24,33,22],[29,26,33,24],[30,4,34,2],[30,8,34,6,"timeIterator"],[30,20,34,18],[30,23,34,21],[30,27,34,25],[31,4,35,2],[31,8,35,6,"writePromise"],[31,20,35,18],[31,23,35,21],[31,27,35,25],[32,4,37,2],[32,8,37,6,"update"],[32,14,37,12],[32,17,37,15],[32,26,37,24,"update"],[32,32,37,30,"update"],[32,33,37,31,"state"],[32,38,37,36],[32,40,37,38],[33,6,38,4],[34,6,39,4,"Object"],[34,12,39,10],[34,13,39,11,"keys"],[34,17,39,15],[34,18,39,16,"state"],[34,23,39,21],[34,24,39,22],[34,25,39,23,"forEach"],[34,32,39,30],[34,33,39,31],[34,43,39,41,"key"],[34,46,39,44],[34,48,39,46],[35,8,40,6],[35,12,40,10],[35,13,40,11,"passWhitelistBlacklist"],[35,35,40,33],[35,36,40,34,"key"],[35,39,40,37],[35,40,40,38],[35,42,40,40],[35,49,40,47],[35,50,40,48],[37,8,42,6],[37,12,42,10,"lastState"],[37,21,42,19],[37,22,42,20,"key"],[37,25,42,23],[37,26,42,24],[37,31,42,29,"state"],[37,36,42,34],[37,37,42,35,"key"],[37,40,42,38],[37,41,42,39],[37,43,42,41],[37,50,42,48],[37,51,42,49],[39,8,44,6],[39,12,44,10,"keysToProcess"],[39,25,44,23],[39,26,44,24,"indexOf"],[39,33,44,31],[39,34,44,32,"key"],[39,37,44,35],[39,38,44,36],[39,43,44,41],[39,44,44,42],[39,45,44,43],[39,47,44,45],[39,54,44,52],[39,55,44,53],[41,8,46,6,"keysToProcess"],[41,21,46,19],[41,22,46,20,"push"],[41,26,46,24],[41,27,46,25,"key"],[41,30,46,28],[41,31,46,29],[41,32,46,30],[41,33,46,31],[42,6,47,4],[42,7,47,5],[42,8,47,6],[42,9,47,7],[42,10,47,8],[43,6,48,4],[45,6,50,4,"Object"],[45,12,50,10],[45,13,50,11,"keys"],[45,17,50,15],[45,18,50,16,"lastState"],[45,27,50,25],[45,28,50,26],[45,29,50,27,"forEach"],[45,36,50,34],[45,37,50,35],[45,47,50,45,"key"],[45,50,50,48],[45,52,50,50],[46,8,51,6],[46,12,51,10,"state"],[46,17,51,15],[46,18,51,16,"key"],[46,21,51,19],[46,22,51,20],[46,27,51,25,"undefined"],[46,36,51,34],[46,40,51,38,"passWhitelistBlacklist"],[46,62,51,60],[46,63,51,61,"key"],[46,66,51,64],[46,67,51,65],[46,71,51,69,"keysToProcess"],[46,84,51,82],[46,85,51,83,"indexOf"],[46,92,51,90],[46,93,51,91,"key"],[46,96,51,94],[46,97,51,95],[46,102,51,100],[46,103,51,101],[46,104,51,102],[46,108,51,106,"lastState"],[46,117,51,115],[46,118,51,116,"key"],[46,121,51,119],[46,122,51,120],[46,127,51,125,"undefined"],[46,136,51,134],[46,138,51,136],[47,10,52,8,"keysToProcess"],[47,23,52,21],[47,24,52,22,"push"],[47,28,52,26],[47,29,52,27,"key"],[47,32,52,30],[47,33,52,31],[48,8,53,6],[49,6,54,4],[49,7,54,5],[49,8,54,6],[49,9,54,7],[49,10,54,8],[51,6,56,4],[51,10,56,8,"timeIterator"],[51,22,56,20],[51,27,56,25],[51,31,56,29],[51,33,56,31],[52,8,57,6,"timeIterator"],[52,20,57,18],[52,23,57,21,"setInterval"],[52,34,57,32],[52,35,57,33,"processNextKey"],[52,49,57,47],[52,51,57,49,"throttle"],[52,59,57,57],[52,60,57,58],[53,6,58,4],[54,6,60,4,"lastState"],[54,15,60,13],[54,18,60,16,"state"],[54,23,60,21],[55,4,61,2],[55,5,61,3],[56,4,63,2],[56,13,63,11,"processNextKey"],[56,27,63,25,"processNextKey"],[56,28,63,25],[56,30,63,28],[57,6,64,4],[57,10,64,8,"keysToProcess"],[57,23,64,21],[57,24,64,22,"length"],[57,30,64,28],[57,35,64,33],[57,36,64,34],[57,38,64,36],[58,8,65,6],[58,12,65,10,"timeIterator"],[58,24,65,22],[58,26,65,24,"clearInterval"],[58,39,65,37],[58,40,65,38,"timeIterator"],[58,52,65,50],[58,53,65,51],[59,8,66,6,"timeIterator"],[59,20,66,18],[59,23,66,21],[59,27,66,25],[60,8,67,6],[61,6,68,4],[62,6,70,4],[62,10,70,8,"key"],[62,13,70,11],[62,16,70,14,"keysToProcess"],[62,29,70,27],[62,30,70,28,"shift"],[62,35,70,33],[62,36,70,34],[62,37,70,35],[63,6,71,4],[63,10,71,8,"endState"],[63,18,71,16],[63,21,71,19,"transforms"],[63,31,71,29],[63,32,71,30,"reduce"],[63,38,71,36],[63,39,71,37],[63,49,71,47,"subState"],[63,57,71,55],[63,59,71,57,"transformer"],[63,70,71,68],[63,72,71,70],[64,8,72,6],[64,15,72,13,"transformer"],[64,26,72,24],[64,27,72,25,"in"],[64,29,72,27],[64,30,72,28,"subState"],[64,38,72,36],[64,40,72,38,"key"],[64,43,72,41],[64,45,72,43,"lastState"],[64,54,72,52],[64,55,72,53],[65,6,73,4],[65,7,73,5],[65,9,73,7,"lastState"],[65,18,73,16],[65,19,73,17,"key"],[65,22,73,20],[65,23,73,21],[65,24,73,22],[66,6,75,4],[66,10,75,8,"endState"],[66,18,75,16],[66,23,75,21,"undefined"],[66,32,75,30],[66,34,75,32],[67,8,76,6],[67,12,76,10],[68,10,77,8,"stagedState"],[68,21,77,19],[68,22,77,20,"key"],[68,25,77,23],[68,26,77,24],[68,29,77,27,"serialize"],[68,38,77,36],[68,39,77,37,"endState"],[68,47,77,45],[68,48,77,46],[69,8,78,6],[69,9,78,7],[69,10,78,8],[69,17,78,15,"err"],[69,20,78,18],[69,22,78,20],[70,10,79,8,"console"],[70,17,79,15],[70,18,79,16,"error"],[70,23,79,21],[70,24,79,22],[70,81,79,79],[70,83,79,81,"err"],[70,86,79,84],[70,87,79,85],[71,8,80,6],[72,6,81,4],[72,7,81,5],[72,13,81,11],[73,8,82,6],[74,8,83,6],[74,15,83,13,"stagedState"],[74,26,83,24],[74,27,83,25,"key"],[74,30,83,28],[74,31,83,29],[75,6,84,4],[76,6,86,4],[76,10,86,8,"keysToProcess"],[76,23,86,21],[76,24,86,22,"length"],[76,30,86,28],[76,35,86,33],[76,36,86,34],[76,38,86,36],[77,8,87,6,"writeStagedState"],[77,24,87,22],[77,25,87,23],[77,26,87,24],[78,6,88,4],[79,4,89,2],[80,4,91,2],[80,13,91,11,"writeStagedState"],[80,29,91,27,"writeStagedState"],[80,30,91,27],[80,32,91,30],[81,6,92,4],[82,6,93,4,"Object"],[82,12,93,10],[82,13,93,11,"keys"],[82,17,93,15],[82,18,93,16,"stagedState"],[82,29,93,27],[82,30,93,28],[82,31,93,29,"forEach"],[82,38,93,36],[82,39,93,37],[82,49,93,47,"key"],[82,52,93,50],[82,54,93,52],[83,8,94,6],[83,12,94,10,"lastState"],[83,21,94,19],[83,22,94,20,"key"],[83,25,94,23],[83,26,94,24],[83,31,94,29,"undefined"],[83,40,94,38],[83,42,94,40],[84,10,95,8],[84,17,95,15,"stagedState"],[84,28,95,26],[84,29,95,27,"key"],[84,32,95,30],[84,33,95,31],[85,8,96,6],[86,6,97,4],[86,7,97,5],[86,8,97,6],[87,6,98,4,"writePromise"],[87,18,98,16],[87,21,98,19,"storage"],[87,28,98,26],[87,29,98,27,"setItem"],[87,36,98,34],[87,37,98,35,"storageKey"],[87,47,98,45],[87,49,98,47,"serialize"],[87,58,98,56],[87,59,98,57,"stagedState"],[87,70,98,68],[87,71,98,69],[87,72,98,70],[87,73,98,71,"catch"],[87,78,98,76],[87,79,98,77,"onWriteFail"],[87,90,98,88],[87,91,98,89],[88,4,99,2],[89,4,101,2],[89,13,101,11,"passWhitelistBlacklist"],[89,35,101,33,"passWhitelistBlacklist"],[89,36,101,34,"key"],[89,39,101,37],[89,41,101,39],[90,6,102,4],[90,10,102,8,"whitelist"],[90,19,102,17],[90,23,102,21,"whitelist"],[90,32,102,30],[90,33,102,31,"indexOf"],[90,40,102,38],[90,41,102,39,"key"],[90,44,102,42],[90,45,102,43],[90,50,102,48],[90,51,102,49],[90,52,102,50],[90,56,102,54,"key"],[90,59,102,57],[90,64,102,62],[90,74,102,72],[90,76,102,74],[90,83,102,81],[90,88,102,86],[91,6,103,4],[91,10,103,8,"blacklist"],[91,19,103,17],[91,23,103,21,"blacklist"],[91,32,103,30],[91,33,103,31,"indexOf"],[91,40,103,38],[91,41,103,39,"key"],[91,44,103,42],[91,45,103,43],[91,50,103,48],[91,51,103,49],[91,52,103,50],[91,54,103,52],[91,61,103,59],[91,66,103,64],[92,6,104,4],[92,13,104,11],[92,17,104,15],[93,4,105,2],[94,4,107,2],[94,13,107,11,"onWriteFail"],[94,24,107,22,"onWriteFail"],[94,25,107,23,"err"],[94,28,107,26],[94,30,107,28],[95,6,108,4],[96,6,109,4],[96,10,109,8,"writeFailHandler"],[96,26,109,24],[96,28,109,26,"writeFailHandler"],[96,44,109,42],[96,45,109,43,"err"],[96,48,109,46],[96,49,109,47],[97,6,111,4],[97,10,111,8,"err"],[97,13,111,11],[97,17,111,15,"process"],[97,24,111,22],[97,25,111,23,"env"],[97,28,111,26],[97,29,111,27,"NODE_ENV"],[97,37,111,35],[97,42,111,40],[97,54,111,52],[97,56,111,54],[98,8,112,6,"console"],[98,15,112,13],[98,16,112,14,"error"],[98,21,112,19],[98,22,112,20],[98,42,112,40],[98,44,112,42,"err"],[98,47,112,45],[98,48,112,46],[99,6,113,4],[100,4,114,2],[101,4,116,2],[101,8,116,6,"flush"],[101,13,116,11],[101,16,116,14],[101,25,116,23,"flush"],[101,30,116,28,"flush"],[101,31,116,28],[101,33,116,31],[102,6,117,4],[102,13,117,11,"keysToProcess"],[102,26,117,24],[102,27,117,25,"length"],[102,33,117,31],[102,38,117,36],[102,39,117,37],[102,41,117,39],[103,8,118,6,"processNextKey"],[103,22,118,20],[103,23,118,21],[103,24,118,22],[104,6,119,4],[105,6,121,4],[105,13,121,11,"writePromise"],[105,25,121,23],[105,29,121,27,"Promise"],[105,36,121,34],[105,37,121,35,"resolve"],[105,44,121,42],[105,45,121,43],[105,46,121,44],[106,4,122,2],[106,5,122,3],[106,6,122,4],[106,7,122,5],[108,4,125,2],[108,11,125,9],[109,6,126,4,"update"],[109,12,126,10],[109,14,126,12,"update"],[109,20,126,18],[110,6,127,4,"flush"],[110,11,127,9],[110,13,127,11,"flush"],[111,4,128,2],[111,5,128,3],[112,2,129,0],[112,3,129,1],[112,4,129,2],[114,2,132,0],[114,11,132,9,"defaultSerialize"],[114,27,132,25,"defaultSerialize"],[114,28,132,26,"data"],[114,32,132,30],[114,34,132,32],[115,4,133,2],[115,11,133,9,"JSON"],[115,15,133,13],[115,16,133,14,"stringify"],[115,25,133,23],[115,26,133,24,"data"],[115,30,133,28],[115,31,133,29],[116,2,134,0],[117,0,134,1],[117,3]],"functionMap":{"names":["<global>","createPersistoid","serialize","update","Object.keys.forEach$argument_0","processNextKey","transforms.reduce$argument_0","writeStagedState","passWhitelistBlacklist","onWriteFail","flush","defaultSerialize"],"mappings":"AAA;ACQ;gBCW;KDE;eEe;+BCE;KDQ;mCCG;KDI;GFO;EIE;qCCQ;KDE;GJgB;EME;qCHE;KGI;GNE;EOE;GPI;EQE;GRO;cSE;GTM;CDO;AWG"}},"type":"js/module"}]}