{"dependencies":[{"name":"./toDate.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"o2GbHlM0wxsRaLWHEC6986QcehU="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.parseJSON = parseJSON;\n  /**\n   * The {@link parseJSON} function options.\n   */\n\n  /**\n   * Converts a complete ISO date string in UTC time, the typical format for transmitting\n   * a date in JSON, to a JavaScript `Date` instance.\n   *\n   * This is a minimal implementation for converting dates retrieved from a JSON API to\n   * a `Date` instance which can be used with other functions in the `date-fns` library.\n   * The following formats are supported:\n   *\n   * - `2000-03-15T05:20:10.123Z`: The output of `.toISOString()` and `JSON.stringify(new Date())`\n   * - `2000-03-15T05:20:10Z`: Without milliseconds\n   * - `2000-03-15T05:20:10+00:00`: With a zero offset, the default JSON encoded format in some other languages\n   * - `2000-03-15T05:20:10+05:45`: With a positive or negative offset, the default JSON encoded format in some other languages\n   * - `2000-03-15T05:20:10+0000`: With a zero offset without a colon\n   * - `2000-03-15T05:20:10`: Without a trailing 'Z' symbol\n   * - `2000-03-15T05:20:10.1234567`: Up to 7 digits in milliseconds field. Only first 3 are taken into account since JS does not allow fractional milliseconds\n   * - `2000-03-15 05:20:10`: With a space instead of a 'T' separator for APIs returning a SQL date without reformatting\n   *\n   * For convenience and ease of use these other input types are also supported\n   * via [toDate](https://date-fns.org/docs/toDate):\n   *\n   * - A `Date` instance will be cloned\n   * - A `number` will be treated as a timestamp\n   *\n   * Any other input type or invalid date strings will return an `Invalid Date`.\n   *\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param dateStr - A fully formed ISO8601 date string to convert\n   * @param options - An object with options\n   *\n   * @returns The parsed date in the local time zone\n   */\n  function parseJSON(dateStr, options) {\n    var parts = dateStr.match(/(\\d{4})-(\\d{2})-(\\d{2})[T ](\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d{0,7}))?(?:Z|(.)(\\d{2}):?(\\d{2})?)?/);\n    if (!parts) return (0, _$$_REQUIRE(_dependencyMap[0], \"./toDate.js\").toDate)(NaN, options == null ? void 0 : options.in);\n    return (0, _$$_REQUIRE(_dependencyMap[0], \"./toDate.js\").toDate)(Date.UTC(+parts[1], +parts[2] - 1, +parts[3], +parts[4] - (+parts[9] || 0) * (parts[8] == \"-\" ? -1 : 1), +parts[5] - (+parts[10] || 0) * (parts[8] == \"-\" ? -1 : 1), +parts[6], +((parts[7] || \"0\") + \"00\").substring(0, 3)), options == null ? void 0 : options.in);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = parseJSON;\n});","lineCount":51,"map":[[7,2,3,0],[8,0,4,0],[9,0,5,0],[11,2,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,0,29,0],[34,0,30,0],[35,0,31,0],[36,0,32,0],[37,0,33,0],[38,0,34,0],[39,0,35,0],[40,0,36,0],[41,0,37,0],[42,0,38,0],[43,2,39,7],[43,11,39,16,"parseJSON"],[43,20,39,25,"parseJSON"],[43,21,39,26,"dateStr"],[43,28,39,33],[43,30,39,35,"options"],[43,37,39,42],[43,39,39,44],[44,4,40,2],[44,8,40,8,"parts"],[44,13,40,13],[44,16,40,16,"dateStr"],[44,23,40,23],[44,24,40,24,"match"],[44,29,40,29],[44,30,41,4],[44,125,42,2],[44,126,42,3],[45,4,44,2],[45,8,44,6],[45,9,44,7,"parts"],[45,14,44,12],[45,16,44,14],[45,23,44,21],[45,27,44,21,"toDate"],[45,57,44,21],[45,58,44,21,"toDate"],[45,79,44,27],[45,81,44,28,"NaN"],[45,84,44,31],[45,86,44,33,"options"],[45,93,44,40],[45,113,44,33,"options"],[45,120,44,40],[45,121,44,42,"in"],[45,123,44,44],[45,124,44,45],[46,4,46,2],[46,11,46,9],[46,15,46,9,"toDate"],[46,45,46,9],[46,46,46,9,"toDate"],[46,67,46,15],[46,69,47,4,"Date"],[46,73,47,8],[46,74,47,9,"UTC"],[46,77,47,12],[46,78,48,6],[46,79,48,7,"parts"],[46,84,48,12],[46,85,48,13],[46,86,48,14],[46,87,48,15],[46,89,49,6],[46,90,49,7,"parts"],[46,95,49,12],[46,96,49,13],[46,97,49,14],[46,98,49,15],[46,101,49,18],[46,102,49,19],[46,104,50,6],[46,105,50,7,"parts"],[46,110,50,12],[46,111,50,13],[46,112,50,14],[46,113,50,15],[46,115,51,6],[46,116,51,7,"parts"],[46,121,51,12],[46,122,51,13],[46,123,51,14],[46,124,51,15],[46,127,51,18],[46,128,51,19],[46,129,51,20,"parts"],[46,134,51,25],[46,135,51,26],[46,136,51,27],[46,137,51,28],[46,141,51,32],[46,142,51,33],[46,147,51,38,"parts"],[46,152,51,43],[46,153,51,44],[46,154,51,45],[46,155,51,46],[46,159,51,50],[46,162,51,53],[46,165,51,56],[46,166,51,57],[46,167,51,58],[46,170,51,61],[46,171,51,62],[46,172,51,63],[46,174,52,6],[46,175,52,7,"parts"],[46,180,52,12],[46,181,52,13],[46,182,52,14],[46,183,52,15],[46,186,52,18],[46,187,52,19],[46,188,52,20,"parts"],[46,193,52,25],[46,194,52,26],[46,196,52,28],[46,197,52,29],[46,201,52,33],[46,202,52,34],[46,207,52,39,"parts"],[46,212,52,44],[46,213,52,45],[46,214,52,46],[46,215,52,47],[46,219,52,51],[46,222,52,54],[46,225,52,57],[46,226,52,58],[46,227,52,59],[46,230,52,62],[46,231,52,63],[46,232,52,64],[46,234,53,6],[46,235,53,7,"parts"],[46,240,53,12],[46,241,53,13],[46,242,53,14],[46,243,53,15],[46,245,54,6],[46,246,54,7],[46,247,54,8],[46,248,54,9,"parts"],[46,253,54,14],[46,254,54,15],[46,255,54,16],[46,256,54,17],[46,260,54,21],[46,263,54,24],[46,267,54,28],[46,271,54,32],[46,273,54,34,"substring"],[46,282,54,43],[46,283,54,44],[46,284,54,45],[46,286,54,47],[46,287,54,48],[46,288,55,4],[46,289,55,5],[46,291,56,4,"options"],[46,298,56,11],[46,318,56,4,"options"],[46,325,56,11],[46,326,56,13,"in"],[46,328,57,2],[46,329,57,3],[47,2,58,0],[49,2,60,0],[50,2,60,0],[50,6,60,0,"_default"],[50,14,60,0],[50,17,60,0,"exports"],[50,24,60,0],[50,25,60,0,"default"],[50,32,60,0],[50,35,61,15,"parseJSON"],[50,44,61,24],[51,0,61,24],[51,3]],"functionMap":{"names":["<global>","parseJSON"],"mappings":"AAA;OCsC;CDmB"}},"type":"js/module"}]}