{"dependencies":[{"name":"../core/exceptions/CustomError","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":20,"index":97},"end":{"line":3,"column":61,"index":138}}],"key":"Phr7dzL2La4ep1igWUJ4b9hNMSk="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var BinarySearch = /** @class */function () {\n    function BinarySearch() {}\n    BinarySearch.findClosestHigherValueIndex = function (size, targetValue, valueExtractor) {\n      var low = 0;\n      var high = size - 1;\n      var mid = Math.floor((low + high) / 2);\n      var lastValue = 0;\n      var absoluteLastDiff = Math.abs(valueExtractor(mid) - targetValue);\n      var result = mid;\n      var diff = 0;\n      var absoluteDiff = 0;\n      if (absoluteLastDiff === 0) {\n        return result;\n      }\n      if (high < 0) {\n        throw new (_$$_REQUIRE(_dependencyMap[0], \"../core/exceptions/CustomError\").default)({\n          message: \"The collection cannot be empty\",\n          type: \"InvalidStateException\"\n        });\n      }\n      while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        lastValue = valueExtractor(mid);\n        diff = lastValue - targetValue;\n        absoluteDiff = Math.abs(diff);\n        if (diff >= 0 && absoluteDiff < absoluteLastDiff) {\n          absoluteLastDiff = absoluteDiff;\n          result = mid;\n        }\n        if (targetValue < lastValue) {\n          high = mid - 1;\n        } else if (targetValue > lastValue) {\n          low = mid + 1;\n        } else {\n          return mid;\n        }\n      }\n      return result;\n    };\n    BinarySearch.findClosestValueToTarget = function (values, target) {\n      var low = 0;\n      var high = values.length - 1;\n      var mid = Math.floor((low + high) / 2);\n      var midValue = values[mid];\n      var lastMidValue = midValue + 1;\n      while (low <= high && midValue !== lastMidValue) {\n        if (midValue === target) {\n          break;\n        } else if (midValue < target) {\n          low = mid;\n        } else if (midValue > target) {\n          high = mid;\n        }\n        mid = Math.floor((low + high) / 2);\n        lastMidValue = midValue;\n        midValue = values[mid];\n      }\n      return {\n        value: midValue,\n        index: mid\n      };\n    };\n    /**\n     * Largest value from given values that is smaller or equal to the target number.\n     */\n    BinarySearch.findValueSmallerThanTarget = function (values, target) {\n      var low = 0;\n      var high = values.length - 1;\n      if (target >= values[high]) {\n        return {\n          value: values[high],\n          index: high\n        };\n      } else if (target < values[low]) {\n        return undefined;\n      }\n      var midValueAndIndex = this.findClosestValueToTarget(values, target);\n      var midValue = midValueAndIndex.value;\n      var mid = midValueAndIndex.index;\n      if (midValue <= target) {\n        return {\n          value: midValue,\n          index: mid\n        };\n      } else {\n        return {\n          value: values[mid - 1],\n          index: mid - 1\n        };\n      }\n    };\n    /**\n     * Smallest value from given values that is larger or equal to the target number.\n     */\n    BinarySearch.findValueLargerThanTarget = function (values, target) {\n      var low = 0;\n      var high = values.length - 1;\n      if (target < values[low]) {\n        return {\n          value: values[low],\n          index: low\n        };\n      } else if (target > values[high]) {\n        return undefined;\n      }\n      var midValueAndIndex = this.findClosestValueToTarget(values, target);\n      var midValue = midValueAndIndex.value;\n      var mid = midValueAndIndex.index;\n      if (midValue >= target) {\n        return {\n          value: midValue,\n          index: mid\n        };\n      } else {\n        return {\n          value: values[mid + 1],\n          index: mid + 1\n        };\n      }\n    };\n    BinarySearch.findIndexOf = function (array, value) {\n      var j = 0;\n      var length = array.length;\n      var i = 0;\n      while (j < length) {\n        i = length + j - 1 >> 1;\n        if (value > array[i]) {\n          j = i + 1;\n        } else if (value < array[i]) {\n          length = i;\n        } else {\n          return i;\n        }\n      }\n      return -1;\n    };\n    return BinarySearch;\n  }();\n  exports.default = BinarySearch;\n});","lineCount":146,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,4,0],[7,6,4,4,"BinarySearch"],[7,18,4,16],[7,21,4,19],[7,34,4,34],[7,46,4,46],[8,4,5,4],[8,13,5,13,"BinarySearch"],[8,25,5,25,"BinarySearch"],[8,26,5,25],[8,28,5,28],[8,29,6,4],[9,4,7,4,"BinarySearch"],[9,16,7,16],[9,17,7,17,"findClosestHigherValueIndex"],[9,44,7,44],[9,47,7,47],[9,57,7,57,"size"],[9,61,7,61],[9,63,7,63,"targetValue"],[9,74,7,74],[9,76,7,76,"valueExtractor"],[9,90,7,90],[9,92,7,92],[10,6,8,8],[10,10,8,12,"low"],[10,13,8,15],[10,16,8,18],[10,17,8,19],[11,6,9,8],[11,10,9,12,"high"],[11,14,9,16],[11,17,9,19,"size"],[11,21,9,23],[11,24,9,26],[11,25,9,27],[12,6,10,8],[12,10,10,12,"mid"],[12,13,10,15],[12,16,10,18,"Math"],[12,20,10,22],[12,21,10,23,"floor"],[12,26,10,28],[12,27,10,29],[12,28,10,30,"low"],[12,31,10,33],[12,34,10,36,"high"],[12,38,10,40],[12,42,10,44],[12,43,10,45],[12,44,10,46],[13,6,11,8],[13,10,11,12,"lastValue"],[13,19,11,21],[13,22,11,24],[13,23,11,25],[14,6,12,8],[14,10,12,12,"absoluteLastDiff"],[14,26,12,28],[14,29,12,31,"Math"],[14,33,12,35],[14,34,12,36,"abs"],[14,37,12,39],[14,38,12,40,"valueExtractor"],[14,52,12,54],[14,53,12,55,"mid"],[14,56,12,58],[14,57,12,59],[14,60,12,62,"targetValue"],[14,71,12,73],[14,72,12,74],[15,6,13,8],[15,10,13,12,"result"],[15,16,13,18],[15,19,13,21,"mid"],[15,22,13,24],[16,6,14,8],[16,10,14,12,"diff"],[16,14,14,16],[16,17,14,19],[16,18,14,20],[17,6,15,8],[17,10,15,12,"absoluteDiff"],[17,22,15,24],[17,25,15,27],[17,26,15,28],[18,6,16,8],[18,10,16,12,"absoluteLastDiff"],[18,26,16,28],[18,31,16,33],[18,32,16,34],[18,34,16,36],[19,8,17,12],[19,15,17,19,"result"],[19,21,17,25],[20,6,18,8],[21,6,19,8],[21,10,19,12,"high"],[21,14,19,16],[21,17,19,19],[21,18,19,20],[21,20,19,22],[22,8,20,12],[22,14,20,18],[22,19,20,22,"_$$_REQUIRE"],[22,30,20,22],[22,31,20,22,"_dependencyMap"],[22,45,20,22],[22,84,20,36,"default"],[22,91,20,43],[22,93,20,44],[23,10,21,16,"message"],[23,17,21,23],[23,19,21,25],[23,51,21,57],[24,10,22,16,"type"],[24,14,22,20],[24,16,22,22],[25,8,23,12],[25,9,23,13],[25,10,23,14],[26,6,24,8],[27,6,25,8],[27,13,25,15,"low"],[27,16,25,18],[27,20,25,22,"high"],[27,24,25,26],[27,26,25,28],[28,8,26,12,"mid"],[28,11,26,15],[28,14,26,18,"Math"],[28,18,26,22],[28,19,26,23,"floor"],[28,24,26,28],[28,25,26,29],[28,26,26,30,"low"],[28,29,26,33],[28,32,26,36,"high"],[28,36,26,40],[28,40,26,44],[28,41,26,45],[28,42,26,46],[29,8,27,12,"lastValue"],[29,17,27,21],[29,20,27,24,"valueExtractor"],[29,34,27,38],[29,35,27,39,"mid"],[29,38,27,42],[29,39,27,43],[30,8,28,12,"diff"],[30,12,28,16],[30,15,28,19,"lastValue"],[30,24,28,28],[30,27,28,31,"targetValue"],[30,38,28,42],[31,8,29,12,"absoluteDiff"],[31,20,29,24],[31,23,29,27,"Math"],[31,27,29,31],[31,28,29,32,"abs"],[31,31,29,35],[31,32,29,36,"diff"],[31,36,29,40],[31,37,29,41],[32,8,30,12],[32,12,30,16,"diff"],[32,16,30,20],[32,20,30,24],[32,21,30,25],[32,25,30,29,"absoluteDiff"],[32,37,30,41],[32,40,30,44,"absoluteLastDiff"],[32,56,30,60],[32,58,30,62],[33,10,31,16,"absoluteLastDiff"],[33,26,31,32],[33,29,31,35,"absoluteDiff"],[33,41,31,47],[34,10,32,16,"result"],[34,16,32,22],[34,19,32,25,"mid"],[34,22,32,28],[35,8,33,12],[36,8,34,12],[36,12,34,16,"targetValue"],[36,23,34,27],[36,26,34,30,"lastValue"],[36,35,34,39],[36,37,34,41],[37,10,35,16,"high"],[37,14,35,20],[37,17,35,23,"mid"],[37,20,35,26],[37,23,35,29],[37,24,35,30],[38,8,36,12],[38,9,36,13],[38,15,37,17],[38,19,37,21,"targetValue"],[38,30,37,32],[38,33,37,35,"lastValue"],[38,42,37,44],[38,44,37,46],[39,10,38,16,"low"],[39,13,38,19],[39,16,38,22,"mid"],[39,19,38,25],[39,22,38,28],[39,23,38,29],[40,8,39,12],[40,9,39,13],[40,15,40,17],[41,10,41,16],[41,17,41,23,"mid"],[41,20,41,26],[42,8,42,12],[43,6,43,8],[44,6,44,8],[44,13,44,15,"result"],[44,19,44,21],[45,4,45,4],[45,5,45,5],[46,4,46,4,"BinarySearch"],[46,16,46,16],[46,17,46,17,"findClosestValueToTarget"],[46,41,46,41],[46,44,46,44],[46,54,46,54,"values"],[46,60,46,60],[46,62,46,62,"target"],[46,68,46,68],[46,70,46,70],[47,6,47,8],[47,10,47,12,"low"],[47,13,47,15],[47,16,47,18],[47,17,47,19],[48,6,48,8],[48,10,48,12,"high"],[48,14,48,16],[48,17,48,19,"values"],[48,23,48,25],[48,24,48,26,"length"],[48,30,48,32],[48,33,48,35],[48,34,48,36],[49,6,49,8],[49,10,49,12,"mid"],[49,13,49,15],[49,16,49,18,"Math"],[49,20,49,22],[49,21,49,23,"floor"],[49,26,49,28],[49,27,49,29],[49,28,49,30,"low"],[49,31,49,33],[49,34,49,36,"high"],[49,38,49,40],[49,42,49,44],[49,43,49,45],[49,44,49,46],[50,6,50,8],[50,10,50,12,"midValue"],[50,18,50,20],[50,21,50,23,"values"],[50,27,50,29],[50,28,50,30,"mid"],[50,31,50,33],[50,32,50,34],[51,6,51,8],[51,10,51,12,"lastMidValue"],[51,22,51,24],[51,25,51,27,"midValue"],[51,33,51,35],[51,36,51,38],[51,37,51,39],[52,6,52,8],[52,13,52,15,"low"],[52,16,52,18],[52,20,52,22,"high"],[52,24,52,26],[52,28,52,30,"midValue"],[52,36,52,38],[52,41,52,43,"lastMidValue"],[52,53,52,55],[52,55,52,57],[53,8,53,12],[53,12,53,16,"midValue"],[53,20,53,24],[53,25,53,29,"target"],[53,31,53,35],[53,33,53,37],[54,10,54,16],[55,8,55,12],[55,9,55,13],[55,15,56,17],[55,19,56,21,"midValue"],[55,27,56,29],[55,30,56,32,"target"],[55,36,56,38],[55,38,56,40],[56,10,57,16,"low"],[56,13,57,19],[56,16,57,22,"mid"],[56,19,57,25],[57,8,58,12],[57,9,58,13],[57,15,59,17],[57,19,59,21,"midValue"],[57,27,59,29],[57,30,59,32,"target"],[57,36,59,38],[57,38,59,40],[58,10,60,16,"high"],[58,14,60,20],[58,17,60,23,"mid"],[58,20,60,26],[59,8,61,12],[60,8,62,12,"mid"],[60,11,62,15],[60,14,62,18,"Math"],[60,18,62,22],[60,19,62,23,"floor"],[60,24,62,28],[60,25,62,29],[60,26,62,30,"low"],[60,29,62,33],[60,32,62,36,"high"],[60,36,62,40],[60,40,62,44],[60,41,62,45],[60,42,62,46],[61,8,63,12,"lastMidValue"],[61,20,63,24],[61,23,63,27,"midValue"],[61,31,63,35],[62,8,64,12,"midValue"],[62,16,64,20],[62,19,64,23,"values"],[62,25,64,29],[62,26,64,30,"mid"],[62,29,64,33],[62,30,64,34],[63,6,65,8],[64,6,66,8],[64,13,66,15],[65,8,67,12,"value"],[65,13,67,17],[65,15,67,19,"midValue"],[65,23,67,27],[66,8,68,12,"index"],[66,13,68,17],[66,15,68,19,"mid"],[67,6,69,8],[67,7,69,9],[68,4,70,4],[68,5,70,5],[69,4,71,4],[70,0,72,0],[71,0,73,0],[72,4,74,4,"BinarySearch"],[72,16,74,16],[72,17,74,17,"findValueSmallerThanTarget"],[72,43,74,43],[72,46,74,46],[72,56,74,56,"values"],[72,62,74,62],[72,64,74,64,"target"],[72,70,74,70],[72,72,74,72],[73,6,75,8],[73,10,75,12,"low"],[73,13,75,15],[73,16,75,18],[73,17,75,19],[74,6,76,8],[74,10,76,12,"high"],[74,14,76,16],[74,17,76,19,"values"],[74,23,76,25],[74,24,76,26,"length"],[74,30,76,32],[74,33,76,35],[74,34,76,36],[75,6,77,8],[75,10,77,12,"target"],[75,16,77,18],[75,20,77,22,"values"],[75,26,77,28],[75,27,77,29,"high"],[75,31,77,33],[75,32,77,34],[75,34,77,36],[76,8,78,12],[76,15,78,19],[77,10,79,16,"value"],[77,15,79,21],[77,17,79,23,"values"],[77,23,79,29],[77,24,79,30,"high"],[77,28,79,34],[77,29,79,35],[78,10,80,16,"index"],[78,15,80,21],[78,17,80,23,"high"],[79,8,81,12],[79,9,81,13],[80,6,82,8],[80,7,82,9],[80,13,83,13],[80,17,83,17,"target"],[80,23,83,23],[80,26,83,26,"values"],[80,32,83,32],[80,33,83,33,"low"],[80,36,83,36],[80,37,83,37],[80,39,83,39],[81,8,84,12],[81,15,84,19,"undefined"],[81,24,84,28],[82,6,85,8],[83,6,86,8],[83,10,86,12,"midValueAndIndex"],[83,26,86,28],[83,29,86,31],[83,33,86,35],[83,34,86,36,"findClosestValueToTarget"],[83,58,86,60],[83,59,86,61,"values"],[83,65,86,67],[83,67,86,69,"target"],[83,73,86,75],[83,74,86,76],[84,6,87,8],[84,10,87,12,"midValue"],[84,18,87,20],[84,21,87,23,"midValueAndIndex"],[84,37,87,39],[84,38,87,40,"value"],[84,43,87,45],[85,6,88,8],[85,10,88,12,"mid"],[85,13,88,15],[85,16,88,18,"midValueAndIndex"],[85,32,88,34],[85,33,88,35,"index"],[85,38,88,40],[86,6,89,8],[86,10,89,12,"midValue"],[86,18,89,20],[86,22,89,24,"target"],[86,28,89,30],[86,30,89,32],[87,8,90,12],[87,15,90,19],[88,10,91,16,"value"],[88,15,91,21],[88,17,91,23,"midValue"],[88,25,91,31],[89,10,92,16,"index"],[89,15,92,21],[89,17,92,23,"mid"],[90,8,93,12],[90,9,93,13],[91,6,94,8],[91,7,94,9],[91,13,95,13],[92,8,96,12],[92,15,96,19],[93,10,97,16,"value"],[93,15,97,21],[93,17,97,23,"values"],[93,23,97,29],[93,24,97,30,"mid"],[93,27,97,33],[93,30,97,36],[93,31,97,37],[93,32,97,38],[94,10,98,16,"index"],[94,15,98,21],[94,17,98,23,"mid"],[94,20,98,26],[94,23,98,29],[95,8,99,12],[95,9,99,13],[96,6,100,8],[97,4,101,4],[97,5,101,5],[98,4,102,4],[99,0,103,0],[100,0,104,0],[101,4,105,4,"BinarySearch"],[101,16,105,16],[101,17,105,17,"findValueLargerThanTarget"],[101,42,105,42],[101,45,105,45],[101,55,105,55,"values"],[101,61,105,61],[101,63,105,63,"target"],[101,69,105,69],[101,71,105,71],[102,6,106,8],[102,10,106,12,"low"],[102,13,106,15],[102,16,106,18],[102,17,106,19],[103,6,107,8],[103,10,107,12,"high"],[103,14,107,16],[103,17,107,19,"values"],[103,23,107,25],[103,24,107,26,"length"],[103,30,107,32],[103,33,107,35],[103,34,107,36],[104,6,108,8],[104,10,108,12,"target"],[104,16,108,18],[104,19,108,21,"values"],[104,25,108,27],[104,26,108,28,"low"],[104,29,108,31],[104,30,108,32],[104,32,108,34],[105,8,109,12],[105,15,109,19],[106,10,110,16,"value"],[106,15,110,21],[106,17,110,23,"values"],[106,23,110,29],[106,24,110,30,"low"],[106,27,110,33],[106,28,110,34],[107,10,111,16,"index"],[107,15,111,21],[107,17,111,23,"low"],[108,8,112,12],[108,9,112,13],[109,6,113,8],[109,7,113,9],[109,13,114,13],[109,17,114,17,"target"],[109,23,114,23],[109,26,114,26,"values"],[109,32,114,32],[109,33,114,33,"high"],[109,37,114,37],[109,38,114,38],[109,40,114,40],[110,8,115,12],[110,15,115,19,"undefined"],[110,24,115,28],[111,6,116,8],[112,6,117,8],[112,10,117,12,"midValueAndIndex"],[112,26,117,28],[112,29,117,31],[112,33,117,35],[112,34,117,36,"findClosestValueToTarget"],[112,58,117,60],[112,59,117,61,"values"],[112,65,117,67],[112,67,117,69,"target"],[112,73,117,75],[112,74,117,76],[113,6,118,8],[113,10,118,12,"midValue"],[113,18,118,20],[113,21,118,23,"midValueAndIndex"],[113,37,118,39],[113,38,118,40,"value"],[113,43,118,45],[114,6,119,8],[114,10,119,12,"mid"],[114,13,119,15],[114,16,119,18,"midValueAndIndex"],[114,32,119,34],[114,33,119,35,"index"],[114,38,119,40],[115,6,120,8],[115,10,120,12,"midValue"],[115,18,120,20],[115,22,120,24,"target"],[115,28,120,30],[115,30,120,32],[116,8,121,12],[116,15,121,19],[117,10,122,16,"value"],[117,15,122,21],[117,17,122,23,"midValue"],[117,25,122,31],[118,10,123,16,"index"],[118,15,123,21],[118,17,123,23,"mid"],[119,8,124,12],[119,9,124,13],[120,6,125,8],[120,7,125,9],[120,13,126,13],[121,8,127,12],[121,15,127,19],[122,10,128,16,"value"],[122,15,128,21],[122,17,128,23,"values"],[122,23,128,29],[122,24,128,30,"mid"],[122,27,128,33],[122,30,128,36],[122,31,128,37],[122,32,128,38],[123,10,129,16,"index"],[123,15,129,21],[123,17,129,23,"mid"],[123,20,129,26],[123,23,129,29],[124,8,130,12],[124,9,130,13],[125,6,131,8],[126,4,132,4],[126,5,132,5],[127,4,133,4,"BinarySearch"],[127,16,133,16],[127,17,133,17,"findIndexOf"],[127,28,133,28],[127,31,133,31],[127,41,133,41,"array"],[127,46,133,46],[127,48,133,48,"value"],[127,53,133,53],[127,55,133,55],[128,6,134,8],[128,10,134,12,"j"],[128,11,134,13],[128,14,134,16],[128,15,134,17],[129,6,135,8],[129,10,135,12,"length"],[129,16,135,18],[129,19,135,21,"array"],[129,24,135,26],[129,25,135,27,"length"],[129,31,135,33],[130,6,136,8],[130,10,136,12,"i"],[130,11,136,13],[130,14,136,16],[130,15,136,17],[131,6,137,8],[131,13,137,15,"j"],[131,14,137,16],[131,17,137,19,"length"],[131,23,137,25],[131,25,137,27],[132,8,138,12,"i"],[132,9,138,13],[132,12,138,16,"length"],[132,18,138,22],[132,21,138,25,"j"],[132,22,138,26],[132,25,138,29],[132,26,138,30],[132,30,138,34],[132,31,138,35],[133,8,139,12],[133,12,139,16,"value"],[133,17,139,21],[133,20,139,24,"array"],[133,25,139,29],[133,26,139,30,"i"],[133,27,139,31],[133,28,139,32],[133,30,139,34],[134,10,140,16,"j"],[134,11,140,17],[134,14,140,20,"i"],[134,15,140,21],[134,18,140,24],[134,19,140,25],[135,8,141,12],[135,9,141,13],[135,15,142,17],[135,19,142,21,"value"],[135,24,142,26],[135,27,142,29,"array"],[135,32,142,34],[135,33,142,35,"i"],[135,34,142,36],[135,35,142,37],[135,37,142,39],[136,10,143,16,"length"],[136,16,143,22],[136,19,143,25,"i"],[136,20,143,26],[137,8,144,12],[137,9,144,13],[137,15,145,17],[138,10,146,16],[138,17,146,23,"i"],[138,18,146,24],[139,8,147,12],[140,6,148,8],[141,6,149,8],[141,13,149,15],[141,14,149,16],[141,15,149,17],[142,4,150,4],[142,5,150,5],[143,4,151,4],[143,11,151,11,"BinarySearch"],[143,23,151,23],[144,2,152,0],[144,3,152,1],[144,4,152,2],[144,5,152,4],[145,2,153,0,"exports"],[145,9,153,7],[145,10,153,8,"default"],[145,17,153,15],[145,20,153,18,"BinarySearch"],[145,32,153,30],[146,0,153,31],[146,3]],"functionMap":{"names":["<global>","<anonymous>","BinarySearch","findClosestHigherValueIndex","findClosestValueToTarget","findValueSmallerThanTarget","findValueLargerThanTarget","findIndexOf"],"mappings":"AAA;kCCG;ICC;KDC;+CEC;KFsC;4CGC;KHwB;8CII;KJ2B;6CKI;KL2B;+BMC;KNiB;CDE"}},"type":"js/module"}]}