{"dependencies":[{"name":"./constructNow.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":52},"end":{"line":2,"column":49,"index":101}}],"key":"PjWdmoNTAZtCocAmfQ9el0b3J+Q="}},{"name":"./constructFrom.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"fe1vuD5Al7BWVRtgitxEm0VpSx0="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.endOfYesterday = endOfYesterday;\n  /**\n   * The {@link endOfYesterday} function options.\n   */\n\n  /**\n   * @name endOfYesterday\n   * @category Day Helpers\n   * @summary Return the end of yesterday.\n   * @pure false\n   *\n   * @description\n   * Return the end of yesterday.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @returns The end of yesterday\n   *\n   * @example\n   * // If today is 6 October 2014:\n   * const result = endOfYesterday()\n   * //=> Sun Oct 5 2014 23:59:59.999\n   */\n  function endOfYesterday(options) {\n    var now = (0, _$$_REQUIRE(_dependencyMap[0], \"./constructNow.js\").constructNow)(options == null ? void 0 : options.in);\n    var date = (0, _$$_REQUIRE(_dependencyMap[1], \"./constructFrom.js\").constructFrom)(options == null ? void 0 : options.in, 0);\n    date.setFullYear(now.getFullYear(), now.getMonth(), now.getDate() - 1);\n    date.setHours(23, 59, 59, 999);\n    return date;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = endOfYesterday;\n});","lineCount":40,"map":[[7,2,4,0],[8,0,5,0],[9,0,6,0],[11,2,8,0],[12,0,9,0],[13,0,10,0],[14,0,11,0],[15,0,12,0],[16,0,13,0],[17,0,14,0],[18,0,15,0],[19,0,16,0],[20,0,17,0],[21,0,18,0],[22,0,19,0],[23,0,20,0],[24,0,21,0],[25,0,22,0],[26,0,23,0],[27,0,24,0],[28,0,25,0],[29,0,26,0],[30,2,27,7],[30,11,27,16,"endOfYesterday"],[30,25,27,30,"endOfYesterday"],[30,26,27,31,"options"],[30,33,27,38],[30,35,27,40],[31,4,28,2],[31,8,28,8,"now"],[31,11,28,11],[31,14,28,14],[31,18,28,14,"constructNow"],[31,48,28,14],[31,49,28,14,"constructNow"],[31,82,28,26],[31,84,28,27,"options"],[31,91,28,34],[31,111,28,27,"options"],[31,118,28,34],[31,119,28,36,"in"],[31,121,28,38],[31,122,28,39],[32,4,29,2],[32,8,29,8,"date"],[32,12,29,12],[32,15,29,15],[32,19,29,15,"constructFrom"],[32,49,29,15],[32,50,29,15,"constructFrom"],[32,85,29,28],[32,87,29,29,"options"],[32,94,29,36],[32,114,29,29,"options"],[32,121,29,36],[32,122,29,38,"in"],[32,124,29,40],[32,126,29,42],[32,127,29,43],[32,128,29,44],[33,4,30,2,"date"],[33,8,30,6],[33,9,30,7,"setFullYear"],[33,20,30,18],[33,21,30,19,"now"],[33,24,30,22],[33,25,30,23,"getFullYear"],[33,36,30,34],[33,37,30,35],[33,38,30,36],[33,40,30,38,"now"],[33,43,30,41],[33,44,30,42,"getMonth"],[33,52,30,50],[33,53,30,51],[33,54,30,52],[33,56,30,54,"now"],[33,59,30,57],[33,60,30,58,"getDate"],[33,67,30,65],[33,68,30,66],[33,69,30,67],[33,72,30,70],[33,73,30,71],[33,74,30,72],[34,4,31,2,"date"],[34,8,31,6],[34,9,31,7,"setHours"],[34,17,31,15],[34,18,31,16],[34,20,31,18],[34,22,31,20],[34,24,31,22],[34,26,31,24],[34,28,31,26],[34,30,31,28],[34,33,31,31],[34,34,31,32],[35,4,32,2],[35,11,32,9,"date"],[35,15,32,13],[36,2,33,0],[38,2,35,0],[39,2,35,0],[39,6,35,0,"_default"],[39,14,35,0],[39,17,35,0,"exports"],[39,24,35,0],[39,25,35,0,"default"],[39,32,35,0],[39,35,36,15,"endOfYesterday"],[39,49,36,29],[40,0,36,29],[40,3]],"functionMap":{"names":["<global>","endOfYesterday"],"mappings":"AAA;OC0B;CDM"}},"type":"js/module"}]}