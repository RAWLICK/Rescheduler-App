{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":50,"column":0,"index":1658}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":50,"column":0,"index":1658}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"qsrciYLlsSqtgV9rGEsSwSoAnCw="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.interval = interval;\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  /**\n   * The {@link interval} function options.\n   */\n\n  /**\n   * The {@link interval} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the start argument,\n   * then the end interval date. If a context function is passed, it uses the context\n   * function return type.\n   */\n\n  /**\n   * @name interval\n   * @category Interval Helpers\n   * @summary Creates an interval object and validates its values.\n   *\n   * @description\n   * Creates a normalized interval object and validates its values. If the interval is invalid, an exception is thrown.\n   *\n   * @typeParam StartDate - Start date type.\n   * @typeParam EndDate - End date type.\n   * @typeParam Options - Options type.\n   *\n   * @param start - The start of the interval.\n   * @param end - The end of the interval.\n   * @param options - The options object.\n   *\n   * @throws `Start date is invalid` when `start` is invalid.\n   * @throws `End date is invalid` when `end` is invalid.\n   * @throws `End date must be after start date` when end is before `start` and `options.assertPositive` is true.\n   *\n   * @returns The normalized and validated interval object.\n   */\n  function interval(start, end, options) {\n    var _normalizeDates = (0, _$$_REQUIRE(_dependencyMap[2], \"./_lib/normalizeDates.js\").normalizeDates)(options == null ? void 0 : options.in, start, end),\n      _normalizeDates2 = (0, _slicedToArray2.default)(_normalizeDates, 2),\n      _start = _normalizeDates2[0],\n      _end = _normalizeDates2[1];\n    if (isNaN(+_start)) throw new TypeError(\"Start date is invalid\");\n    if (isNaN(+_end)) throw new TypeError(\"End date is invalid\");\n    if (options != null && options.assertPositive && +_start > +_end) throw new TypeError(\"End date must be after start date\");\n    return {\n      start: _start,\n      end: _end\n    };\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = interval;\n});","lineCount":58,"map":[[9,2,3,0],[10,0,4,0],[11,0,5,0],[13,2,7,0],[14,0,8,0],[15,0,9,0],[16,0,10,0],[17,0,11,0],[18,0,12,0],[20,2,14,0],[21,0,15,0],[22,0,16,0],[23,0,17,0],[24,0,18,0],[25,0,19,0],[26,0,20,0],[27,0,21,0],[28,0,22,0],[29,0,23,0],[30,0,24,0],[31,0,25,0],[32,0,26,0],[33,0,27,0],[34,0,28,0],[35,0,29,0],[36,0,30,0],[37,0,31,0],[38,0,32,0],[39,0,33,0],[40,0,34,0],[41,0,35,0],[42,2,36,7],[42,11,36,16,"interval"],[42,19,36,24,"interval"],[42,20,36,25,"start"],[42,25,36,30],[42,27,36,32,"end"],[42,30,36,35],[42,32,36,37,"options"],[42,39,36,44],[42,41,36,46],[43,4,37,2],[43,8,37,2,"_normalizeDates"],[43,23,37,2],[43,26,37,25],[43,30,37,25,"normalizeDates"],[43,60,37,25],[43,61,37,25,"normalizeDates"],[43,103,37,39],[43,105,37,40,"options"],[43,112,37,47],[43,132,37,40,"options"],[43,139,37,47],[43,140,37,49,"in"],[43,142,37,51],[43,144,37,53,"start"],[43,149,37,58],[43,151,37,60,"end"],[43,154,37,63],[43,155,37,64],[44,6,37,64,"_normalizeDates2"],[44,22,37,64],[44,29,37,64,"_slicedToArray2"],[44,44,37,64],[44,45,37,64,"default"],[44,52,37,64],[44,54,37,64,"_normalizeDates"],[44,69,37,64],[45,6,37,9,"_start"],[45,12,37,15],[45,15,37,15,"_normalizeDates2"],[45,31,37,15],[46,6,37,17,"_end"],[46,10,37,21],[46,13,37,21,"_normalizeDates2"],[46,29,37,21],[47,4,39,2],[47,8,39,6,"isNaN"],[47,13,39,11],[47,14,39,12],[47,15,39,13,"_start"],[47,21,39,19],[47,22,39,20],[47,24,39,22],[47,30,39,28],[47,34,39,32,"TypeError"],[47,43,39,41],[47,44,39,42],[47,67,39,65],[47,68,39,66],[48,4,40,2],[48,8,40,6,"isNaN"],[48,13,40,11],[48,14,40,12],[48,15,40,13,"_end"],[48,19,40,17],[48,20,40,18],[48,22,40,20],[48,28,40,26],[48,32,40,30,"TypeError"],[48,41,40,39],[48,42,40,40],[48,63,40,61],[48,64,40,62],[49,4,42,2],[49,8,42,6,"options"],[49,15,42,13],[49,27,42,6,"options"],[49,34,42,13],[49,35,42,15,"assertPositive"],[49,49,42,29],[49,53,42,33],[49,54,42,34,"_start"],[49,60,42,40],[49,63,42,43],[49,64,42,44,"_end"],[49,68,42,48],[49,70,43,4],[49,76,43,10],[49,80,43,14,"TypeError"],[49,89,43,23],[49,90,43,24],[49,125,43,59],[49,126,43,60],[50,4,45,2],[50,11,45,9],[51,6,45,11,"start"],[51,11,45,16],[51,13,45,18,"_start"],[51,19,45,24],[52,6,45,26,"end"],[52,9,45,29],[52,11,45,31,"_end"],[53,4,45,36],[53,5,45,37],[54,2,46,0],[56,2,48,0],[57,2,48,0],[57,6,48,0,"_default"],[57,14,48,0],[57,17,48,0,"exports"],[57,24,48,0],[57,25,48,0,"default"],[57,32,48,0],[57,35,49,15,"interval"],[57,43,49,23],[58,0,49,23],[58,3]],"functionMap":{"names":["<global>","interval"],"mappings":"AAA;OCmC;CDU"}},"type":"js/module"}]}