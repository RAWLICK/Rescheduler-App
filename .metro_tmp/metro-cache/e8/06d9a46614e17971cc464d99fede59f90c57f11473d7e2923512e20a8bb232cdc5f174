{"dependencies":[{"name":"./toDate.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":42},"end":{"line":2,"column":37,"index":79}}],"key":"o2GbHlM0wxsRaLWHEC6986QcehU="}},{"name":"./setMonth.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":41,"index":41}}],"key":"aG2EjQMA1UOBcOVkEnthNFsjhOo="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.setQuarter = setQuarter;\n  /**\n   * The {@link setQuarter} function options.\n   */\n\n  /**\n   * @name setQuarter\n   * @category Quarter Helpers\n   * @summary Set the year quarter to the given date.\n   *\n   * @description\n   * Set the year quarter to the given date.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param date - The date to be changed\n   * @param quarter - The quarter of the new date\n   * @param options - The options\n   *\n   * @returns The new date with the quarter set\n   *\n   * @example\n   * // Set the 2nd quarter to 2 July 2014:\n   * const result = setQuarter(new Date(2014, 6, 2), 2)\n   * //=> Wed Apr 02 2014 00:00:00\n   */\n  function setQuarter(date, quarter, options) {\n    var date_ = (0, _$$_REQUIRE(_dependencyMap[0], \"./toDate.js\").toDate)(date, options == null ? void 0 : options.in);\n    var oldQuarter = Math.trunc(date_.getMonth() / 3) + 1;\n    var diff = quarter - oldQuarter;\n    return (0, _$$_REQUIRE(_dependencyMap[1], \"./setMonth.js\").setMonth)(date_, date_.getMonth() + diff * 3);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = setQuarter;\n});","lineCount":42,"map":[[7,2,4,0],[8,0,5,0],[9,0,6,0],[11,2,8,0],[12,0,9,0],[13,0,10,0],[14,0,11,0],[15,0,12,0],[16,0,13,0],[17,0,14,0],[18,0,15,0],[19,0,16,0],[20,0,17,0],[21,0,18,0],[22,0,19,0],[23,0,20,0],[24,0,21,0],[25,0,22,0],[26,0,23,0],[27,0,24,0],[28,0,25,0],[29,0,26,0],[30,0,27,0],[31,0,28,0],[32,0,29,0],[33,2,30,7],[33,11,30,16,"setQuarter"],[33,21,30,26,"setQuarter"],[33,22,30,27,"date"],[33,26,30,31],[33,28,30,33,"quarter"],[33,35,30,40],[33,37,30,42,"options"],[33,44,30,49],[33,46,30,51],[34,4,31,2],[34,8,31,8,"date_"],[34,13,31,13],[34,16,31,16],[34,20,31,16,"toDate"],[34,50,31,16],[34,51,31,16,"toDate"],[34,72,31,22],[34,74,31,23,"date"],[34,78,31,27],[34,80,31,29,"options"],[34,87,31,36],[34,107,31,29,"options"],[34,114,31,36],[34,115,31,38,"in"],[34,117,31,40],[34,118,31,41],[35,4,32,2],[35,8,32,8,"oldQuarter"],[35,18,32,18],[35,21,32,21,"Math"],[35,25,32,25],[35,26,32,26,"trunc"],[35,31,32,31],[35,32,32,32,"date_"],[35,37,32,37],[35,38,32,38,"getMonth"],[35,46,32,46],[35,47,32,47],[35,48,32,48],[35,51,32,51],[35,52,32,52],[35,53,32,53],[35,56,32,56],[35,57,32,57],[36,4,33,2],[36,8,33,8,"diff"],[36,12,33,12],[36,15,33,15,"quarter"],[36,22,33,22],[36,25,33,25,"oldQuarter"],[36,35,33,35],[37,4,34,2],[37,11,34,9],[37,15,34,9,"setMonth"],[37,45,34,9],[37,46,34,9,"setMonth"],[37,71,34,17],[37,73,34,18,"date_"],[37,78,34,23],[37,80,34,25,"date_"],[37,85,34,30],[37,86,34,31,"getMonth"],[37,94,34,39],[37,95,34,40],[37,96,34,41],[37,99,34,44,"diff"],[37,103,34,48],[37,106,34,51],[37,107,34,52],[37,108,34,53],[38,2,35,0],[40,2,37,0],[41,2,37,0],[41,6,37,0,"_default"],[41,14,37,0],[41,17,37,0,"exports"],[41,24,37,0],[41,25,37,0,"default"],[41,32,37,0],[41,35,38,15,"setQuarter"],[41,45,38,25],[42,0,38,25],[42,3]],"functionMap":{"names":["<global>","setQuarter"],"mappings":"AAA;OC6B;CDK"}},"type":"js/module"}]}