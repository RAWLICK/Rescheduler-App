{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":159,"column":0,"index":4579}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":159,"column":0,"index":4579}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":159,"column":0,"index":4579}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"./BlobManager","data":{"asyncType":null,"locs":[{"start":{"line":61,"column":24,"index":1686},"end":{"line":61,"column":48,"index":1710}},{"start":{"line":85,"column":24,"index":2391},"end":{"line":85,"column":48,"index":2415}},{"start":{"line":135,"column":24,"index":4054},"end":{"line":135,"column":48,"index":4078}}],"key":"gSjSnvxPMAlq4OnrEQF+EjqTVsQ="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   * @format\n   */\n\n  'use strict';\n\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  /**\n   * Opaque JS representation of some binary data in native.\n   *\n   * The API is modeled after the W3C Blob API, with one caveat\n   * regarding explicit deallocation. Refer to the `close()`\n   * method for further details.\n   *\n   * Example usage in a React component:\n   *\n   *   class WebSocketImage extends React.Component {\n   *      state = {blob: null};\n   *      componentDidMount() {\n   *        let ws = this.ws = new WebSocket(...);\n   *        ws.binaryType = 'blob';\n   *        ws.onmessage = (event) => {\n   *          if (this.state.blob) {\n   *            this.state.blob.close();\n   *          }\n   *          this.setState({blob: event.data});\n   *        };\n   *      }\n   *      componentUnmount() {\n   *        if (this.state.blob) {\n   *          this.state.blob.close();\n   *        }\n   *        this.ws.close();\n   *      }\n   *      render() {\n   *        if (!this.state.blob) {\n   *          return <View />;\n   *        }\n   *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;\n   *      }\n   *   }\n   *\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n   */\n  var Blob = /*#__PURE__*/function () {\n    /**\n     * Constructor for JS consumers.\n     * Currently we only support creating Blobs from other Blobs.\n     * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob\n     */\n    function Blob() {\n      var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var options = arguments.length > 1 ? arguments[1] : undefined;\n      (0, _classCallCheck2.default)(this, Blob);\n      var BlobManager = _$$_REQUIRE(_dependencyMap[3], \"./BlobManager\");\n      this.data = BlobManager.createFromParts(parts, options).data;\n    }\n\n    /*\n     * This method is used to create a new Blob object containing\n     * the data in the specified range of bytes of the source Blob.\n     * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice\n     */\n    // $FlowFixMe[unsafe-getters-setters]\n    return (0, _createClass2.default)(Blob, [{\n      key: \"data\",\n      get:\n      // $FlowFixMe[unsafe-getters-setters]\n      function get() {\n        if (!this._data) {\n          throw new Error('Blob has been closed and is no longer available');\n        }\n        return this._data;\n      },\n      set: function set(data) {\n        this._data = data;\n      }\n    }, {\n      key: \"slice\",\n      value: function slice(start, end) {\n        var contentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n        var BlobManager = _$$_REQUIRE(_dependencyMap[3], \"./BlobManager\");\n        var _this$data = this.data,\n          offset = _this$data.offset,\n          size = _this$data.size;\n        if (typeof start === 'number') {\n          if (start > size) {\n            // $FlowFixMe[reassign-const]\n            start = size;\n          }\n          offset += start;\n          size -= start;\n          if (typeof end === 'number') {\n            if (end < 0) {\n              // $FlowFixMe[reassign-const]\n              end = this.size + end;\n            }\n            if (end > this.size) {\n              // $FlowFixMe[reassign-const]\n              end = this.size;\n            }\n            size = end - start;\n          }\n        }\n        return BlobManager.createFromOptions({\n          blobId: this.data.blobId,\n          offset: offset,\n          size: size,\n          type: contentType,\n          /* Since `blob.slice()` creates a new view onto the same binary\n           * data as the original blob, we should re-use the same collector\n           * object so that the underlying resource gets deallocated when\n           * the last view into the data is released, not the first.\n           */\n          __collector: this.data.__collector\n        });\n      }\n\n      /**\n       * This method is in the standard, but not actually implemented by\n       * any browsers at this point. It's important for how Blobs work in\n       * React Native, however, since we cannot de-allocate resources automatically,\n       * so consumers need to explicitly de-allocate them.\n       *\n       * Note that the semantics around Blobs created via `blob.slice()`\n       * and `new Blob([blob])` are different. `blob.slice()` creates a\n       * new *view* onto the same binary data, so calling `close()` on any\n       * of those views is enough to deallocate the data, whereas\n       * `new Blob([blob, ...])` actually copies the data in memory.\n       */\n    }, {\n      key: \"close\",\n      value: function close() {\n        var BlobManager = _$$_REQUIRE(_dependencyMap[3], \"./BlobManager\");\n        BlobManager.release(this.data.blobId);\n        this.data = null;\n      }\n\n      /**\n       * Size of the data contained in the Blob object, in bytes.\n       */\n      // $FlowFixMe[unsafe-getters-setters]\n    }, {\n      key: \"size\",\n      get: function get() {\n        return this.data.size;\n      }\n\n      /*\n       * String indicating the MIME type of the data contained in the Blob.\n       * If the type is unknown, this string is empty.\n       */\n      // $FlowFixMe[unsafe-getters-setters]\n    }, {\n      key: \"type\",\n      get: function get() {\n        return this.data.type || '';\n      }\n    }]);\n  }();\n  module.exports = Blob;\n});","lineCount":171,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,11,13],[14,6,11,13,"_interopRequireDefault"],[14,28,11,13],[14,31,11,13,"_$$_REQUIRE"],[14,42,11,13],[14,43,11,13,"_dependencyMap"],[14,57,11,13],[15,2,11,13],[15,6,11,13,"_classCallCheck2"],[15,22,11,13],[15,25,11,13,"_interopRequireDefault"],[15,47,11,13],[15,48,11,13,"_$$_REQUIRE"],[15,59,11,13],[15,60,11,13,"_dependencyMap"],[15,74,11,13],[16,2,11,13],[16,6,11,13,"_createClass2"],[16,19,11,13],[16,22,11,13,"_interopRequireDefault"],[16,44,11,13],[16,45,11,13,"_$$_REQUIRE"],[16,56,11,13],[16,57,11,13,"_dependencyMap"],[16,71,11,13],[17,2,15,0],[18,0,16,0],[19,0,17,0],[20,0,18,0],[21,0,19,0],[22,0,20,0],[23,0,21,0],[24,0,22,0],[25,0,23,0],[26,0,24,0],[27,0,25,0],[28,0,26,0],[29,0,27,0],[30,0,28,0],[31,0,29,0],[32,0,30,0],[33,0,31,0],[34,0,32,0],[35,0,33,0],[36,0,34,0],[37,0,35,0],[38,0,36,0],[39,0,37,0],[40,0,38,0],[41,0,39,0],[42,0,40,0],[43,0,41,0],[44,0,42,0],[45,0,43,0],[46,0,44,0],[47,0,45,0],[48,0,46,0],[49,0,47,0],[50,0,48,0],[51,0,49,0],[52,0,50,0],[53,0,51,0],[54,2,15,0],[54,6,52,6,"Blob"],[54,10,52,10],[55,4,55,2],[56,0,56,0],[57,0,57,0],[58,0,58,0],[59,0,59,0],[60,4,60,2],[60,13,60,2,"Blob"],[60,18,60,2],[60,20,60,71],[61,6,60,71],[61,10,60,14,"parts"],[61,15,60,41],[61,18,60,41,"arguments"],[61,27,60,41],[61,28,60,41,"length"],[61,34,60,41],[61,42,60,41,"arguments"],[61,51,60,41],[61,59,60,41,"undefined"],[61,68,60,41],[61,71,60,41,"arguments"],[61,80,60,41],[61,86,60,44],[61,88,60,46],[62,6,60,46],[62,10,60,48,"options"],[62,17,60,69],[62,20,60,69,"arguments"],[62,29,60,69],[62,30,60,69,"length"],[62,36,60,69],[62,43,60,69,"arguments"],[62,52,60,69],[62,58,60,69,"undefined"],[62,67,60,69],[63,6,60,69],[63,10,60,69,"_classCallCheck2"],[63,26,60,69],[63,27,60,69,"default"],[63,34,60,69],[63,42,60,69,"Blob"],[63,46,60,69],[64,6,61,4],[64,10,61,10,"BlobManager"],[64,21,61,21],[64,24,61,24,"require"],[64,35,61,31],[64,36,61,31,"_dependencyMap"],[64,50,61,31],[64,70,61,47],[64,71,61,48],[65,6,62,4],[65,10,62,8],[65,11,62,9,"data"],[65,15,62,13],[65,18,62,16,"BlobManager"],[65,29,62,27],[65,30,62,28,"createFromParts"],[65,45,62,43],[65,46,62,44,"parts"],[65,51,62,49],[65,53,62,51,"options"],[65,60,62,58],[65,61,62,59],[65,62,62,60,"data"],[65,66,62,64],[66,4,63,2],[68,4,65,2],[69,0,66,0],[70,0,67,0],[71,0,68,0],[72,0,69,0],[73,4,70,2],[74,4,70,2],[74,15,70,2,"_createClass2"],[74,28,70,2],[74,29,70,2,"default"],[74,36,70,2],[74,38,70,2,"Blob"],[74,42,70,2],[75,6,70,2,"key"],[75,9,70,2],[76,6,70,2,"get"],[76,9,70,2],[77,6,75,2],[78,6,76,2],[78,15,76,2,"get"],[78,19,76,2],[78,21,76,23],[79,8,77,4],[79,12,77,8],[79,13,77,9],[79,17,77,13],[79,18,77,14,"_data"],[79,23,77,19],[79,25,77,21],[80,10,78,6],[80,16,78,12],[80,20,78,16,"Error"],[80,25,78,21],[80,26,78,22],[80,75,78,71],[80,76,78,72],[81,8,79,4],[82,8,81,4],[82,15,81,11],[82,19,81,15],[82,20,81,16,"_data"],[82,25,81,21],[83,6,82,2],[83,7,82,3],[84,6,82,3,"set"],[84,9,82,3],[84,11,71,2],[84,20,71,2,"set"],[84,24,71,11,"data"],[84,28,71,26],[84,30,71,28],[85,8,72,4],[85,12,72,8],[85,13,72,9,"_data"],[85,18,72,14],[85,21,72,17,"data"],[85,25,72,21],[86,6,73,2],[87,4,73,3],[88,6,73,3,"key"],[88,9,73,3],[89,6,73,3,"value"],[89,11,73,3],[89,13,84,2],[89,22,84,2,"slice"],[89,27,84,7,"slice"],[89,28,84,8,"start"],[89,33,84,22],[89,35,84,24,"end"],[89,38,84,36],[89,40,84,70],[90,8,84,70],[90,12,84,38,"contentType"],[90,23,84,57],[90,26,84,57,"arguments"],[90,35,84,57],[90,36,84,57,"length"],[90,42,84,57],[90,50,84,57,"arguments"],[90,59,84,57],[90,67,84,57,"undefined"],[90,76,84,57],[90,79,84,57,"arguments"],[90,88,84,57],[90,94,84,60],[90,96,84,62],[91,8,85,4],[91,12,85,10,"BlobManager"],[91,23,85,21],[91,26,85,24,"require"],[91,37,85,31],[91,38,85,31,"_dependencyMap"],[91,52,85,31],[91,72,85,47],[91,73,85,48],[92,8,86,4],[92,12,86,4,"_this$data"],[92,22,86,4],[92,25,86,25],[92,29,86,29],[92,30,86,30,"data"],[92,34,86,34],[93,10,86,9,"offset"],[93,16,86,15],[93,19,86,15,"_this$data"],[93,29,86,15],[93,30,86,9,"offset"],[93,36,86,15],[94,10,86,17,"size"],[94,14,86,21],[94,17,86,21,"_this$data"],[94,27,86,21],[94,28,86,17,"size"],[94,32,86,21],[95,8,88,4],[95,12,88,8],[95,19,88,15,"start"],[95,24,88,20],[95,29,88,25],[95,37,88,33],[95,39,88,35],[96,10,89,6],[96,14,89,10,"start"],[96,19,89,15],[96,22,89,18,"size"],[96,26,89,22],[96,28,89,24],[97,12,90,8],[98,12,91,8,"start"],[98,17,91,13],[98,20,91,16,"size"],[98,24,91,20],[99,10,92,6],[100,10,93,6,"offset"],[100,16,93,12],[100,20,93,16,"start"],[100,25,93,21],[101,10,94,6,"size"],[101,14,94,10],[101,18,94,14,"start"],[101,23,94,19],[102,10,96,6],[102,14,96,10],[102,21,96,17,"end"],[102,24,96,20],[102,29,96,25],[102,37,96,33],[102,39,96,35],[103,12,97,8],[103,16,97,12,"end"],[103,19,97,15],[103,22,97,18],[103,23,97,19],[103,25,97,21],[104,14,98,10],[105,14,99,10,"end"],[105,17,99,13],[105,20,99,16],[105,24,99,20],[105,25,99,21,"size"],[105,29,99,25],[105,32,99,28,"end"],[105,35,99,31],[106,12,100,8],[107,12,101,8],[107,16,101,12,"end"],[107,19,101,15],[107,22,101,18],[107,26,101,22],[107,27,101,23,"size"],[107,31,101,27],[107,33,101,29],[108,14,102,10],[109,14,103,10,"end"],[109,17,103,13],[109,20,103,16],[109,24,103,20],[109,25,103,21,"size"],[109,29,103,25],[110,12,104,8],[111,12,105,8,"size"],[111,16,105,12],[111,19,105,15,"end"],[111,22,105,18],[111,25,105,21,"start"],[111,30,105,26],[112,10,106,6],[113,8,107,4],[114,8,108,4],[114,15,108,11,"BlobManager"],[114,26,108,22],[114,27,108,23,"createFromOptions"],[114,44,108,40],[114,45,108,41],[115,10,109,6,"blobId"],[115,16,109,12],[115,18,109,14],[115,22,109,18],[115,23,109,19,"data"],[115,27,109,23],[115,28,109,24,"blobId"],[115,34,109,30],[116,10,110,6,"offset"],[116,16,110,12],[116,18,110,6,"offset"],[116,24,110,12],[117,10,111,6,"size"],[117,14,111,10],[117,16,111,6,"size"],[117,20,111,10],[118,10,112,6,"type"],[118,14,112,10],[118,16,112,12,"contentType"],[118,27,112,23],[119,10,113,6],[120,0,114,0],[121,0,115,0],[122,0,116,0],[123,0,117,0],[124,10,118,6,"__collector"],[124,21,118,17],[124,23,118,19],[124,27,118,23],[124,28,118,24,"data"],[124,32,118,28],[124,33,118,29,"__collector"],[125,8,119,4],[125,9,119,5],[125,10,119,6],[126,6,120,2],[128,6,122,2],[129,0,123,0],[130,0,124,0],[131,0,125,0],[132,0,126,0],[133,0,127,0],[134,0,128,0],[135,0,129,0],[136,0,130,0],[137,0,131,0],[138,0,132,0],[139,0,133,0],[140,4,122,2],[141,6,122,2,"key"],[141,9,122,2],[142,6,122,2,"value"],[142,11,122,2],[142,13,134,2],[142,22,134,2,"close"],[142,27,134,7,"close"],[142,28,134,7],[142,30,134,10],[143,8,135,4],[143,12,135,10,"BlobManager"],[143,23,135,21],[143,26,135,24,"require"],[143,37,135,31],[143,38,135,31,"_dependencyMap"],[143,52,135,31],[143,72,135,47],[143,73,135,48],[144,8,136,4,"BlobManager"],[144,19,136,15],[144,20,136,16,"release"],[144,27,136,23],[144,28,136,24],[144,32,136,28],[144,33,136,29,"data"],[144,37,136,33],[144,38,136,34,"blobId"],[144,44,136,40],[144,45,136,41],[145,8,137,4],[145,12,137,8],[145,13,137,9,"data"],[145,17,137,13],[145,20,137,16],[145,24,137,20],[146,6,138,2],[148,6,140,2],[149,0,141,0],[150,0,142,0],[151,6,143,2],[152,4,143,2],[153,6,143,2,"key"],[153,9,143,2],[154,6,143,2,"get"],[154,9,143,2],[154,11,144,2],[154,20,144,2,"get"],[154,24,144,2],[154,26,144,21],[155,8,145,4],[155,15,145,11],[155,19,145,15],[155,20,145,16,"data"],[155,24,145,20],[155,25,145,21,"size"],[155,29,145,25],[156,6,146,2],[158,6,148,2],[159,0,149,0],[160,0,150,0],[161,0,151,0],[162,6,152,2],[163,4,152,2],[164,6,152,2,"key"],[164,9,152,2],[165,6,152,2,"get"],[165,9,152,2],[165,11,153,2],[165,20,153,2,"get"],[165,24,153,2],[165,26,153,21],[166,8,154,4],[166,15,154,11],[166,19,154,15],[166,20,154,16,"data"],[166,24,154,20],[166,25,154,21,"type"],[166,29,154,25],[166,33,154,29],[166,35,154,31],[167,6,155,2],[168,4,155,3],[169,2,155,3],[170,2,158,0,"module"],[170,8,158,6],[170,9,158,7,"exports"],[170,16,158,14],[170,19,158,17,"Blob"],[170,23,158,21],[171,0,158,22],[171,3]],"functionMap":{"names":["<global>","Blob","constructor","set__data","get__data","slice","close","get__size","get__type"],"mappings":"AAA;ACmD;ECQ;GDG;EEQ;GFE;EGG;GHM;EIE;GJoC;EKc;GLI;EMM;GNE;EOO;GPE;CDC"}},"type":"js/module"}]}