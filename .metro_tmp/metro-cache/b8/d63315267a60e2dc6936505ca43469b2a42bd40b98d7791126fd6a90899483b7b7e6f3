{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":338,"column":0,"index":10436}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":338,"column":0,"index":10436}}],"key":"XnmB3YjhLQUu4Gtg+kalDAx6bCo="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":338,"column":0,"index":10436}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":338,"column":0,"index":10436}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":338,"column":0,"index":10436}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"../../../../Libraries/Utilities/warnOnce","data":{"asyncType":null,"locs":[{"start":{"line":13,"column":0,"index":303},"end":{"line":13,"column":64,"index":367}}],"key":"Ghh5qlfuZKYys9QXlkSDlK8AUjk="}},{"name":"./NativePerformanceObserver","data":{"asyncType":null,"locs":[{"start":{"line":14,"column":0,"index":368},"end":{"line":14,"column":68,"index":436}}],"key":"+npX2Ui+iNVclanReXTyyCh0Pkw="}},{"name":"./PerformanceEventTiming","data":{"asyncType":null,"locs":[{"start":{"line":16,"column":0,"index":490},"end":{"line":16,"column":62,"index":552}}],"key":"JgH87HqTtba/7D9cnIh1vqbgoIs="}},{"name":"./RawPerformanceEntry","data":{"asyncType":null,"locs":[{"start":{"line":17,"column":0,"index":553},"end":{"line":21,"column":31,"index":676}},{"start":{"line":17,"column":0,"index":553},"end":{"line":21,"column":31,"index":676}},{"start":{"line":17,"column":0,"index":553},"end":{"line":21,"column":31,"index":676}},{"start":{"line":17,"column":0,"index":553},"end":{"line":21,"column":31,"index":676}},{"start":{"line":17,"column":0,"index":553},"end":{"line":21,"column":31,"index":676}}],"key":"zrkCAbiGCMzHpBgnI/Ykq8YEer4="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"PerformanceEventTiming\", {\n    enumerable: true,\n    get: function get() {\n      return _PerformanceEventTiming.default;\n    }\n  });\n  exports.default = exports.PerformanceObserverEntryList = void 0;\n  exports.warnNoNativePerformanceObserver = warnNoNativePerformanceObserver;\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/slicedToArray\"));\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"@babel/runtime/helpers/createClass\"));\n  var _warnOnce = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"../../../../Libraries/Utilities/warnOnce\"));\n  var _NativePerformanceObserver = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[6], \"./NativePerformanceObserver\"));\n  var _PerformanceEventTiming = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[7], \"./PerformanceEventTiming\"));\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n  var PerformanceObserverEntryList = exports.PerformanceObserverEntryList = /*#__PURE__*/function () {\n    function PerformanceObserverEntryList(entries) {\n      (0, _classCallCheck2.default)(this, PerformanceObserverEntryList);\n      this._entries = entries;\n    }\n    return (0, _createClass2.default)(PerformanceObserverEntryList, [{\n      key: \"getEntries\",\n      value: function getEntries() {\n        return this._entries;\n      }\n    }, {\n      key: \"getEntriesByType\",\n      value: function getEntriesByType(type) {\n        return this._entries.filter(function (entry) {\n          return entry.entryType === type;\n        });\n      }\n    }, {\n      key: \"getEntriesByName\",\n      value: function getEntriesByName(name, type) {\n        if (type === undefined) {\n          return this._entries.filter(function (entry) {\n            return entry.name === name;\n          });\n        } else {\n          return this._entries.filter(function (entry) {\n            return entry.name === name && entry.entryType === type;\n          });\n        }\n      }\n    }]);\n  }();\n  var observerCountPerEntryType = new Map();\n  var registeredObservers = new Map();\n  var isOnPerformanceEntryCallbackSet = false;\n\n  // This is a callback that gets scheduled and periodically called from the native side\n  var onPerformanceEntry = function onPerformanceEntry() {\n    var _entryResult$entries;\n    if (!_NativePerformanceObserver.default) {\n      return;\n    }\n    var entryResult = _NativePerformanceObserver.default.popPendingEntries();\n    var rawEntries = (_entryResult$entries = entryResult == null ? void 0 : entryResult.entries) != null ? _entryResult$entries : [];\n    var droppedEntriesCount = entryResult == null ? void 0 : entryResult.droppedEntriesCount;\n    if (rawEntries.length === 0) {\n      return;\n    }\n    var entries = rawEntries.map(_$$_REQUIRE(_dependencyMap[8], \"./RawPerformanceEntry\").rawToPerformanceEntry);\n    var _loop = function _loop(observerConfig) {\n      var entriesForObserver = entries.filter(function (entry) {\n        if (!observerConfig.entryTypes.has(entry.entryType)) {\n          return false;\n        }\n        var durationThreshold = observerConfig.entryTypes.get(entry.entryType);\n        return entry.duration >= (durationThreshold != null ? durationThreshold : 0);\n      });\n      observerConfig.callback(new PerformanceObserverEntryList(entriesForObserver), _observer, droppedEntriesCount);\n    };\n    for (var _ref of registeredObservers.entries()) {\n      var _ref2 = (0, _slicedToArray2.default)(_ref, 2);\n      var _observer = _ref2[0];\n      var observerConfig = _ref2[1];\n      _loop(observerConfig);\n    }\n  };\n  function warnNoNativePerformanceObserver() {\n    (0, _warnOnce.default)('missing-native-performance-observer', 'Missing native implementation of PerformanceObserver');\n  }\n  function applyDurationThresholds() {\n    var durationThresholds = Array.from(registeredObservers.values()).map(function (config) {\n      return config.entryTypes;\n    }).reduce(function (accumulator, currentValue) {\n      return union(accumulator, currentValue);\n    }, new Map());\n    for (var _ref3 of durationThresholds) {\n      var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);\n      var entryType = _ref4[0];\n      var durationThreshold = _ref4[1];\n      _NativePerformanceObserver.default == null ? void 0 : _NativePerformanceObserver.default.setDurationThreshold((0, _$$_REQUIRE(_dependencyMap[8], \"./RawPerformanceEntry\").performanceEntryTypeToRaw)(entryType), durationThreshold != null ? durationThreshold : 0);\n    }\n  }\n  function getSupportedPerformanceEntryTypes() {\n    if (!_NativePerformanceObserver.default) {\n      return Object.freeze([]);\n    }\n    if (!_NativePerformanceObserver.default.getSupportedPerformanceEntryTypes) {\n      // fallback if getSupportedPerformanceEntryTypes is not defined on native side\n      return Object.freeze(['mark', 'measure', 'event']);\n    }\n    return Object.freeze(_NativePerformanceObserver.default.getSupportedPerformanceEntryTypes().map(_$$_REQUIRE(_dependencyMap[8], \"./RawPerformanceEntry\").rawToPerformanceEntryType));\n  }\n\n  /**\n   * Implementation of the PerformanceObserver interface for RN,\n   * corresponding to the standard in https://www.w3.org/TR/performance-timeline/\n   *\n   * @example\n   * const observer = new PerformanceObserver((list, _observer) => {\n   *   const entries = list.getEntries();\n   *   entries.forEach(entry => {\n   *     reportEvent({\n   *       eventName: entry.name,\n   *       startTime: entry.startTime,\n   *       endTime: entry.startTime + entry.duration,\n   *       processingStart: entry.processingStart,\n   *       processingEnd: entry.processingEnd,\n   *       interactionId: entry.interactionId,\n   *     });\n   *   });\n   * });\n   * observer.observe({ type: \"event\" });\n   */\n  var PerformanceObserver = exports.default = /*#__PURE__*/function () {\n    function PerformanceObserver(callback) {\n      (0, _classCallCheck2.default)(this, PerformanceObserver);\n      this._callback = callback;\n    }\n    return (0, _createClass2.default)(PerformanceObserver, [{\n      key: \"observe\",\n      value: function observe(options) {\n        var _registeredObservers$;\n        if (!_NativePerformanceObserver.default) {\n          warnNoNativePerformanceObserver();\n          return;\n        }\n        this._validateObserveOptions(options);\n        var requestedEntryTypes;\n        if (options.entryTypes) {\n          this._type = 'multiple';\n          requestedEntryTypes = new Map(options.entryTypes.map(function (t) {\n            return [t, undefined];\n          }));\n        } else {\n          this._type = 'single';\n          requestedEntryTypes = new Map([[options.type, options.durationThreshold]]);\n        }\n\n        // The same observer may receive multiple calls to \"observe\", so we need\n        // to check what is new on this call vs. previous ones.\n        var currentEntryTypes = (_registeredObservers$ = registeredObservers.get(this)) == null ? void 0 : _registeredObservers$.entryTypes;\n        var nextEntryTypes = currentEntryTypes ? union(requestedEntryTypes, currentEntryTypes) : requestedEntryTypes;\n\n        // This `observe` call is a no-op because there are no new things to observe.\n        if (currentEntryTypes && currentEntryTypes.size === nextEntryTypes.size) {\n          return;\n        }\n        registeredObservers.set(this, {\n          callback: this._callback,\n          entryTypes: nextEntryTypes\n        });\n        if (!isOnPerformanceEntryCallbackSet) {\n          _NativePerformanceObserver.default.setOnPerformanceEntryCallback(onPerformanceEntry);\n          isOnPerformanceEntryCallbackSet = true;\n        }\n\n        // We only need to start listenening to new entry types being observed in\n        // this observer.\n        var newEntryTypes = currentEntryTypes ? difference(new Set(requestedEntryTypes.keys()), new Set(currentEntryTypes.keys())) : new Set(requestedEntryTypes.keys());\n        for (var type of newEntryTypes) {\n          var _observerCountPerEntr;\n          if (!observerCountPerEntryType.has(type)) {\n            var rawType = (0, _$$_REQUIRE(_dependencyMap[8], \"./RawPerformanceEntry\").performanceEntryTypeToRaw)(type);\n            _NativePerformanceObserver.default.startReporting(rawType);\n          }\n          observerCountPerEntryType.set(type, ((_observerCountPerEntr = observerCountPerEntryType.get(type)) != null ? _observerCountPerEntr : 0) + 1);\n        }\n        applyDurationThresholds();\n      }\n    }, {\n      key: \"disconnect\",\n      value: function disconnect() {\n        if (!_NativePerformanceObserver.default) {\n          warnNoNativePerformanceObserver();\n          return;\n        }\n        var observerConfig = registeredObservers.get(this);\n        if (!observerConfig) {\n          return;\n        }\n\n        // Disconnect this observer\n        for (var type of observerConfig.entryTypes.keys()) {\n          var _observerCountPerEntr2;\n          var numberOfObserversForThisType = (_observerCountPerEntr2 = observerCountPerEntryType.get(type)) != null ? _observerCountPerEntr2 : 0;\n          if (numberOfObserversForThisType === 1) {\n            observerCountPerEntryType.delete(type);\n            _NativePerformanceObserver.default.stopReporting((0, _$$_REQUIRE(_dependencyMap[8], \"./RawPerformanceEntry\").performanceEntryTypeToRaw)(type));\n          } else if (numberOfObserversForThisType !== 0) {\n            observerCountPerEntryType.set(type, numberOfObserversForThisType - 1);\n          }\n        }\n\n        // Disconnect all observers if this was the last one\n        registeredObservers.delete(this);\n        if (registeredObservers.size === 0) {\n          _NativePerformanceObserver.default.setOnPerformanceEntryCallback(undefined);\n          isOnPerformanceEntryCallbackSet = false;\n        }\n        applyDurationThresholds();\n      }\n    }, {\n      key: \"_validateObserveOptions\",\n      value: function _validateObserveOptions(options) {\n        var type = options.type,\n          entryTypes = options.entryTypes,\n          durationThreshold = options.durationThreshold;\n        if (!type && !entryTypes) {\n          throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and type arguments.\");\n        }\n        if (entryTypes && type) {\n          throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must include either entryTypes or type arguments.\");\n        }\n        if (this._type === 'multiple' && type) {\n          throw new Error(\"Failed to execute 'observe' on 'PerformanceObserver': This observer has performed observe({entryTypes:...}, therefore it cannot perform observe({type:...})\");\n        }\n        if (this._type === 'single' && entryTypes) {\n          throw new Error(\"Failed to execute 'observe' on 'PerformanceObserver': This PerformanceObserver has performed observe({type:...}, therefore it cannot perform observe({entryTypes:...})\");\n        }\n        if (entryTypes && durationThreshold !== undefined) {\n          throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and durationThreshold arguments.\");\n        }\n      }\n    }]);\n  }(); // As a Set union, except if value exists in both, we take minimum\n  PerformanceObserver.supportedEntryTypes = getSupportedPerformanceEntryTypes();\n  function union(a, b) {\n    var res = new Map();\n    for (var _ref5 of a) {\n      var _ref6 = (0, _slicedToArray2.default)(_ref5, 2);\n      var k = _ref6[0];\n      var v = _ref6[1];\n      if (!b.has(k)) {\n        res.set(k, v);\n      } else {\n        var _b$get;\n        res.set(k, Math.min(v != null ? v : 0, (_b$get = b.get(k)) != null ? _b$get : 0));\n      }\n    }\n    return res;\n  }\n  function difference(a, b) {\n    return new Set((0, _toConsumableArray2.default)(a).filter(function (x) {\n      return !b.has(x);\n    }));\n  }\n});","lineCount":276,"map":[[18,2,13,0],[18,6,13,0,"_warnOnce"],[18,15,13,0],[18,18,13,0,"_interopRequireDefault"],[18,40,13,0],[18,41,13,0,"_$$_REQUIRE"],[18,52,13,0],[18,53,13,0,"_dependencyMap"],[18,67,13,0],[19,2,14,0],[19,6,14,0,"_NativePerformanceObserver"],[19,32,14,0],[19,35,14,0,"_interopRequireDefault"],[19,57,14,0],[19,58,14,0,"_$$_REQUIRE"],[19,69,14,0],[19,70,14,0,"_dependencyMap"],[19,84,14,0],[20,2,16,0],[20,6,16,0,"_PerformanceEventTiming"],[20,29,16,0],[20,32,16,0,"_interopRequireDefault"],[20,54,16,0],[20,55,16,0,"_$$_REQUIRE"],[20,66,16,0],[20,67,16,0,"_dependencyMap"],[20,81,16,0],[21,2,1,0],[22,0,2,0],[23,0,3,0],[24,0,4,0],[25,0,5,0],[26,0,6,0],[27,0,7,0],[28,0,8,0],[29,0,9,0],[30,2,1,0],[30,6,25,13,"PerformanceObserverEntryList"],[30,34,25,41],[30,37,25,41,"exports"],[30,44,25,41],[30,45,25,41,"PerformanceObserverEntryList"],[30,73,25,41],[31,4,28,2],[31,13,28,2,"PerformanceObserverEntryList"],[31,42,28,14,"entries"],[31,49,28,43],[31,51,28,45],[32,6,28,45],[32,10,28,45,"_classCallCheck2"],[32,26,28,45],[32,27,28,45,"default"],[32,34,28,45],[32,42,28,45,"PerformanceObserverEntryList"],[32,70,28,45],[33,6,29,4],[33,10,29,8],[33,11,29,9,"_entries"],[33,19,29,17],[33,22,29,20,"entries"],[33,29,29,27],[34,4,30,2],[35,4,30,3],[35,15,30,3,"_createClass2"],[35,28,30,3],[35,29,30,3,"default"],[35,36,30,3],[35,38,30,3,"PerformanceObserverEntryList"],[35,66,30,3],[36,6,30,3,"key"],[36,9,30,3],[37,6,30,3,"value"],[37,11,30,3],[37,13,32,2],[37,22,32,2,"getEntries"],[37,32,32,12,"getEntries"],[37,33,32,12],[37,35,32,37],[38,8,33,4],[38,15,33,11],[38,19,33,15],[38,20,33,16,"_entries"],[38,28,33,24],[39,6,34,2],[40,4,34,3],[41,6,34,3,"key"],[41,9,34,3],[42,6,34,3,"value"],[42,11,34,3],[42,13,36,2],[42,22,36,2,"getEntriesByType"],[42,38,36,18,"getEntriesByType"],[42,39,36,19,"type"],[42,43,36,45],[42,45,36,69],[43,8,37,4],[43,15,37,11],[43,19,37,15],[43,20,37,16,"_entries"],[43,28,37,24],[43,29,37,25,"filter"],[43,35,37,31],[43,36,37,32],[43,46,37,32,"entry"],[43,51,37,37],[44,10,37,37],[44,17,37,41,"entry"],[44,22,37,46],[44,23,37,47,"entryType"],[44,32,37,56],[44,37,37,61,"type"],[44,41,37,65],[45,8,37,65],[45,10,37,66],[46,6,38,2],[47,4,38,3],[48,6,38,3,"key"],[48,9,38,3],[49,6,38,3,"value"],[49,11,38,3],[49,13,40,2],[49,22,40,2,"getEntriesByName"],[49,38,40,18,"getEntriesByName"],[49,39,41,4,"name"],[49,43,41,16],[49,45,42,4,"type"],[49,49,42,31],[49,51,43,26],[50,8,44,4],[50,12,44,8,"type"],[50,16,44,12],[50,21,44,17,"undefined"],[50,30,44,26],[50,32,44,28],[51,10,45,6],[51,17,45,13],[51,21,45,17],[51,22,45,18,"_entries"],[51,30,45,26],[51,31,45,27,"filter"],[51,37,45,33],[51,38,45,34],[51,48,45,34,"entry"],[51,53,45,39],[52,12,45,39],[52,19,45,43,"entry"],[52,24,45,48],[52,25,45,49,"name"],[52,29,45,53],[52,34,45,58,"name"],[52,38,45,62],[53,10,45,62],[53,12,45,63],[54,8,46,4],[54,9,46,5],[54,15,46,11],[55,10,47,6],[55,17,47,13],[55,21,47,17],[55,22,47,18,"_entries"],[55,30,47,26],[55,31,47,27,"filter"],[55,37,47,33],[55,38,48,8],[55,48,48,8,"entry"],[55,53,48,13],[56,12,48,13],[56,19,48,17,"entry"],[56,24,48,22],[56,25,48,23,"name"],[56,29,48,27],[56,34,48,32,"name"],[56,38,48,36],[56,42,48,40,"entry"],[56,47,48,45],[56,48,48,46,"entryType"],[56,57,48,55],[56,62,48,60,"type"],[56,66,48,64],[57,10,48,64],[57,11,49,6],[57,12,49,7],[58,8,50,4],[59,6,51,2],[60,4,51,3],[61,2,51,3],[62,2,76,0],[62,6,76,6,"observerCountPerEntryType"],[62,31,76,66],[62,34,76,69],[62,38,76,73,"Map"],[62,41,76,76],[62,42,76,77],[62,43,76,78],[63,2,77,0],[63,6,77,6,"registeredObservers"],[63,25,77,78],[63,28,78,2],[63,32,78,6,"Map"],[63,35,78,9],[63,36,78,10],[63,37,78,11],[64,2,79,0],[64,6,79,4,"isOnPerformanceEntryCallbackSet"],[64,37,79,44],[64,40,79,47],[64,45,79,52],[66,2,81,0],[67,2,82,0],[67,6,82,6,"onPerformanceEntry"],[67,24,82,24],[67,27,82,27],[67,36,82,6,"onPerformanceEntry"],[67,54,82,24,"onPerformanceEntry"],[67,55,82,24],[67,57,82,33],[68,4,82,33],[68,8,82,33,"_entryResult$entries"],[68,28,82,33],[69,4,83,2],[69,8,83,6],[69,9,83,7,"NativePerformanceObserver"],[69,43,83,32],[69,45,83,34],[70,6,84,4],[71,4,85,2],[72,4,86,2],[72,8,86,8,"entryResult"],[72,19,86,19],[72,22,86,22,"NativePerformanceObserver"],[72,56,86,47],[72,57,86,48,"popPendingEntries"],[72,74,86,65],[72,75,86,66],[72,76,86,67],[73,4,87,2],[73,8,87,8,"rawEntries"],[73,18,87,18],[73,22,87,18,"_entryResult$entries"],[73,42,87,18],[73,45,87,21,"entryResult"],[73,56,87,32],[73,76,87,21,"entryResult"],[73,87,87,32],[73,88,87,34,"entries"],[73,95,87,41],[73,107,87,41,"_entryResult$entries"],[73,127,87,41],[73,130,87,45],[73,132,87,47],[74,4,88,2],[74,8,88,8,"droppedEntriesCount"],[74,27,88,27],[74,30,88,30,"entryResult"],[74,41,88,41],[74,61,88,30,"entryResult"],[74,72,88,41],[74,73,88,43,"droppedEntriesCount"],[74,92,88,62],[75,4,89,2],[75,8,89,6,"rawEntries"],[75,18,89,16],[75,19,89,17,"length"],[75,25,89,23],[75,30,89,28],[75,31,89,29],[75,33,89,31],[76,6,90,4],[77,4,91,2],[78,4,92,2],[78,8,92,8,"entries"],[78,15,92,15],[78,18,92,18,"rawEntries"],[78,28,92,28],[78,29,92,29,"map"],[78,32,92,32],[78,33,92,33,"rawToPerformanceEntry"],[78,63,92,33],[78,64,92,33,"rawToPerformanceEntry"],[78,110,92,54],[78,111,92,55],[79,4,92,56],[79,8,92,56,"_loop"],[79,13,92,56],[79,25,92,56,"_loop"],[79,31,92,56,"observerConfig"],[79,45,92,56],[79,47,93,74],[80,6,94,4],[80,10,94,10,"entriesForObserver"],[80,28,94,50],[80,31,94,53,"entries"],[80,38,94,60],[80,39,94,61,"filter"],[80,45,94,67],[80,46,94,68],[80,56,94,68,"entry"],[80,61,94,73],[80,63,94,77],[81,8,95,6],[81,12,95,10],[81,13,95,11,"observerConfig"],[81,27,95,25],[81,28,95,26,"entryTypes"],[81,38,95,36],[81,39,95,37,"has"],[81,42,95,40],[81,43,95,41,"entry"],[81,48,95,46],[81,49,95,47,"entryType"],[81,58,95,56],[81,59,95,57],[81,61,95,59],[82,10,96,8],[82,17,96,15],[82,22,96,20],[83,8,97,6],[84,8,98,6],[84,12,98,12,"durationThreshold"],[84,29,98,29],[84,32,98,32,"observerConfig"],[84,46,98,46],[84,47,98,47,"entryTypes"],[84,57,98,57],[84,58,98,58,"get"],[84,61,98,61],[84,62,98,62,"entry"],[84,67,98,67],[84,68,98,68,"entryType"],[84,77,98,77],[84,78,98,78],[85,8,99,6],[85,15,99,13,"entry"],[85,20,99,18],[85,21,99,19,"duration"],[85,29,99,27],[85,34,99,32,"durationThreshold"],[85,51,99,49],[85,62,99,32,"durationThreshold"],[85,79,99,49],[85,82,99,53],[85,83,99,54],[85,84,99,55],[86,6,100,4],[86,7,100,5],[86,8,100,6],[87,6,101,4,"observerConfig"],[87,20,101,18],[87,21,101,19,"callback"],[87,29,101,27],[87,30,102,6],[87,34,102,10,"PerformanceObserverEntryList"],[87,62,102,38],[87,63,102,39,"entriesForObserver"],[87,81,102,57],[87,82,102,58],[87,84,103,6,"observer"],[87,93,103,14],[87,95,104,6,"droppedEntriesCount"],[87,114,105,4],[87,115,105,5],[88,4,106,2],[88,5,106,3],[89,4,93,2],[89,13,93,2,"_ref"],[89,17,93,2],[89,21,93,43,"registeredObservers"],[89,40,93,62],[89,41,93,63,"entries"],[89,48,93,70],[89,49,93,71],[89,50,93,72],[90,6,93,72],[90,10,93,72,"_ref2"],[90,15,93,72],[90,22,93,72,"_slicedToArray2"],[90,37,93,72],[90,38,93,72,"default"],[90,45,93,72],[90,47,93,72,"_ref"],[90,51,93,72],[91,6,93,72],[91,10,93,14,"observer"],[91,19,93,22],[91,22,93,22,"_ref2"],[91,27,93,22],[92,6,93,22],[92,10,93,24,"observerConfig"],[92,24,93,38],[92,27,93,38,"_ref2"],[92,32,93,38],[93,6,93,38,"_loop"],[93,11,93,38],[93,12,93,38,"observerConfig"],[93,26,93,38],[94,4,93,38],[95,2,107,0],[95,3,107,1],[96,2,109,7],[96,11,109,16,"warnNoNativePerformanceObserver"],[96,42,109,47,"warnNoNativePerformanceObserver"],[96,43,109,47],[96,45,109,50],[97,4,110,2],[97,8,110,2,"warnOnce"],[97,25,110,10],[97,27,111,4],[97,64,111,41],[97,66,112,4],[97,120,113,2],[97,121,113,3],[98,2,114,0],[99,2,116,0],[99,11,116,9,"applyDurationThresholds"],[99,34,116,32,"applyDurationThresholds"],[99,35,116,32],[99,37,116,35],[100,4,117,2],[100,8,117,8,"durationThresholds"],[100,26,117,62],[100,29,117,65,"Array"],[100,34,117,70],[100,35,117,71,"from"],[100,39,117,75],[100,40,118,4,"registeredObservers"],[100,59,118,23],[100,60,118,24,"values"],[100,66,118,30],[100,67,118,31],[100,68,119,2],[100,69,119,3],[100,70,120,5,"map"],[100,73,120,8],[100,74,120,9],[100,84,120,9,"config"],[100,90,120,15],[101,6,120,15],[101,13,120,19,"config"],[101,19,120,25],[101,20,120,26,"entryTypes"],[101,30,120,36],[102,4,120,36],[102,6,120,37],[102,7,121,5,"reduce"],[102,13,121,11],[102,14,122,6],[102,24,122,7,"accumulator"],[102,35,122,18],[102,37,122,20,"currentValue"],[102,49,122,32],[103,6,122,32],[103,13,122,37,"union"],[103,18,122,42],[103,19,122,43,"accumulator"],[103,30,122,54],[103,32,122,56,"currentValue"],[103,44,122,68],[103,45,122,69],[104,4,122,69],[104,7,123,6],[104,11,123,10,"Map"],[104,14,123,13],[104,15,123,14],[104,16,124,4],[104,17,124,5],[105,4,126,2],[105,13,126,2,"_ref3"],[105,18,126,2],[105,22,126,47,"durationThresholds"],[105,40,126,65],[105,42,126,67],[106,6,126,67],[106,10,126,67,"_ref4"],[106,15,126,67],[106,22,126,67,"_slicedToArray2"],[106,37,126,67],[106,38,126,67,"default"],[106,45,126,67],[106,47,126,67,"_ref3"],[106,52,126,67],[107,6,126,67],[107,10,126,14,"entryType"],[107,19,126,23],[107,22,126,23,"_ref4"],[107,27,126,23],[108,6,126,23],[108,10,126,25,"durationThreshold"],[108,27,126,42],[108,30,126,42,"_ref4"],[108,35,126,42],[109,6,127,4,"NativePerformanceObserver"],[109,40,127,29],[109,60,127,4,"NativePerformanceObserver"],[109,94,127,29],[109,95,127,31,"setDurationThreshold"],[109,115,127,51],[109,116,128,6],[109,120,128,6,"performanceEntryTypeToRaw"],[109,150,128,6],[109,151,128,6,"performanceEntryTypeToRaw"],[109,201,128,31],[109,203,128,32,"entryType"],[109,212,128,41],[109,213,128,42],[109,215,129,6,"durationThreshold"],[109,232,129,23],[109,243,129,6,"durationThreshold"],[109,260,129,23],[109,263,129,27],[109,264,130,4],[109,265,130,5],[110,4,131,2],[111,2,132,0],[112,2,134,0],[112,11,134,9,"getSupportedPerformanceEntryTypes"],[112,44,134,42,"getSupportedPerformanceEntryTypes"],[112,45,134,42],[112,47,134,83],[113,4,135,2],[113,8,135,6],[113,9,135,7,"NativePerformanceObserver"],[113,43,135,32],[113,45,135,34],[114,6,136,4],[114,13,136,11,"Object"],[114,19,136,17],[114,20,136,18,"freeze"],[114,26,136,24],[114,27,136,25],[114,29,136,27],[114,30,136,28],[115,4,137,2],[116,4,138,2],[116,8,138,6],[116,9,138,7,"NativePerformanceObserver"],[116,43,138,32],[116,44,138,33,"getSupportedPerformanceEntryTypes"],[116,77,138,66],[116,79,138,68],[117,6,139,4],[118,6,140,4],[118,13,140,11,"Object"],[118,19,140,17],[118,20,140,18,"freeze"],[118,26,140,24],[118,27,140,25],[118,28,140,26],[118,34,140,32],[118,36,140,34],[118,45,140,43],[118,47,140,45],[118,54,140,52],[118,55,140,53],[118,56,140,54],[119,4,141,2],[120,4,142,2],[120,11,142,9,"Object"],[120,17,142,15],[120,18,142,16,"freeze"],[120,24,142,22],[120,25,143,4,"NativePerformanceObserver"],[120,59,143,29],[120,60,143,30,"getSupportedPerformanceEntryTypes"],[120,93,143,63],[120,94,143,64],[120,95,143,65],[120,96,143,66,"map"],[120,99,143,69],[120,100,144,6,"rawToPerformanceEntryType"],[120,130,144,6],[120,131,144,6,"rawToPerformanceEntryType"],[120,181,145,4],[120,182,146,2],[120,183,146,3],[121,2,147,0],[123,2,149,0],[124,0,150,0],[125,0,151,0],[126,0,152,0],[127,0,153,0],[128,0,154,0],[129,0,155,0],[130,0,156,0],[131,0,157,0],[132,0,158,0],[133,0,159,0],[134,0,160,0],[135,0,161,0],[136,0,162,0],[137,0,163,0],[138,0,164,0],[139,0,165,0],[140,0,166,0],[141,0,167,0],[142,0,168,0],[143,2,149,0],[143,6,169,21,"PerformanceObserver"],[143,25,169,40],[143,28,169,40,"exports"],[143,35,169,40],[143,36,169,40,"default"],[143,43,169,40],[144,4,173,2],[144,13,173,2,"PerformanceObserver"],[144,33,173,14,"callback"],[144,41,173,51],[144,43,173,53],[145,6,173,53],[145,10,173,53,"_classCallCheck2"],[145,26,173,53],[145,27,173,53,"default"],[145,34,173,53],[145,42,173,53,"PerformanceObserver"],[145,61,173,53],[146,6,174,4],[146,10,174,8],[146,11,174,9,"_callback"],[146,20,174,18],[146,23,174,21,"callback"],[146,31,174,29],[147,4,175,2],[148,4,175,3],[148,15,175,3,"_createClass2"],[148,28,175,3],[148,29,175,3,"default"],[148,36,175,3],[148,38,175,3,"PerformanceObserver"],[148,57,175,3],[149,6,175,3,"key"],[149,9,175,3],[150,6,175,3,"value"],[150,11,175,3],[150,13,177,2],[150,22,177,2,"observe"],[150,29,177,9,"observe"],[150,30,177,10,"options"],[150,37,177,42],[150,39,177,50],[151,8,177,50],[151,12,177,50,"_registeredObservers$"],[151,33,177,50],[152,8,178,4],[152,12,178,8],[152,13,178,9,"NativePerformanceObserver"],[152,47,178,34],[152,49,178,36],[153,10,179,6,"warnNoNativePerformanceObserver"],[153,41,179,37],[153,42,179,38],[153,43,179,39],[154,10,180,6],[155,8,181,4],[156,8,183,4],[156,12,183,8],[156,13,183,9,"_validateObserveOptions"],[156,36,183,32],[156,37,183,33,"options"],[156,44,183,40],[156,45,183,41],[157,8,185,4],[157,12,185,8,"requestedEntryTypes"],[157,31,185,27],[158,8,187,4],[158,12,187,8,"options"],[158,19,187,15],[158,20,187,16,"entryTypes"],[158,30,187,26],[158,32,187,28],[159,10,188,6],[159,14,188,10],[159,15,188,11,"_type"],[159,20,188,16],[159,23,188,19],[159,33,188,29],[160,10,189,6,"requestedEntryTypes"],[160,29,189,25],[160,32,189,28],[160,36,189,32,"Map"],[160,39,189,35],[160,40,190,8,"options"],[160,47,190,15],[160,48,190,16,"entryTypes"],[160,58,190,26],[160,59,190,27,"map"],[160,62,190,30],[160,63,190,31],[160,73,190,31,"t"],[160,74,190,32],[161,12,190,32],[161,19,190,36],[161,20,190,37,"t"],[161,21,190,38],[161,23,190,40,"undefined"],[161,32,190,49],[161,33,190,50],[162,10,190,50],[162,12,191,6],[162,13,191,7],[163,8,192,4],[163,9,192,5],[163,15,192,11],[164,10,193,6],[164,14,193,10],[164,15,193,11,"_type"],[164,20,193,16],[164,23,193,19],[164,31,193,27],[165,10,194,6,"requestedEntryTypes"],[165,29,194,25],[165,32,194,28],[165,36,194,32,"Map"],[165,39,194,35],[165,40,194,36],[165,41,195,8],[165,42,195,9,"options"],[165,49,195,16],[165,50,195,17,"type"],[165,54,195,21],[165,56,195,23,"options"],[165,63,195,30],[165,64,195,31,"durationThreshold"],[165,81,195,48],[165,82,195,49],[165,83,196,7],[165,84,196,8],[166,8,197,4],[168,8,199,4],[169,8,200,4],[170,8,201,4],[170,12,201,10,"currentEntryTypes"],[170,29,201,27],[170,33,201,27,"_registeredObservers$"],[170,54,201,27],[170,57,201,30,"registeredObservers"],[170,76,201,49],[170,77,201,50,"get"],[170,80,201,53],[170,81,201,54],[170,85,201,58],[170,86,201,59],[170,107,201,30,"_registeredObservers$"],[170,128,201,30],[170,129,201,61,"entryTypes"],[170,139,201,71],[171,8,202,4],[171,12,202,10,"nextEntryTypes"],[171,26,202,24],[171,29,202,27,"currentEntryTypes"],[171,46,202,44],[171,49,203,8,"union"],[171,54,203,13],[171,55,203,14,"requestedEntryTypes"],[171,74,203,33],[171,76,203,35,"currentEntryTypes"],[171,93,203,52],[171,94,203,53],[171,97,204,8,"requestedEntryTypes"],[171,116,204,27],[173,8,206,4],[174,8,207,4],[174,12,207,8,"currentEntryTypes"],[174,29,207,25],[174,33,207,29,"currentEntryTypes"],[174,50,207,46],[174,51,207,47,"size"],[174,55,207,51],[174,60,207,56,"nextEntryTypes"],[174,74,207,70],[174,75,207,71,"size"],[174,79,207,75],[174,81,207,77],[175,10,208,6],[176,8,209,4],[177,8,211,4,"registeredObservers"],[177,27,211,23],[177,28,211,24,"set"],[177,31,211,27],[177,32,211,28],[177,36,211,32],[177,38,211,34],[178,10,212,6,"callback"],[178,18,212,14],[178,20,212,16],[178,24,212,20],[178,25,212,21,"_callback"],[178,34,212,30],[179,10,213,6,"entryTypes"],[179,20,213,16],[179,22,213,18,"nextEntryTypes"],[180,8,214,4],[180,9,214,5],[180,10,214,6],[181,8,216,4],[181,12,216,8],[181,13,216,9,"isOnPerformanceEntryCallbackSet"],[181,44,216,40],[181,46,216,42],[182,10,217,6,"NativePerformanceObserver"],[182,44,217,31],[182,45,217,32,"setOnPerformanceEntryCallback"],[182,74,217,61],[182,75,218,8,"onPerformanceEntry"],[182,93,219,6],[182,94,219,7],[183,10,220,6,"isOnPerformanceEntryCallbackSet"],[183,41,220,37],[183,44,220,40],[183,48,220,44],[184,8,221,4],[186,8,223,4],[187,8,224,4],[188,8,225,4],[188,12,225,10,"newEntryTypes"],[188,25,225,23],[188,28,225,26,"currentEntryTypes"],[188,45,225,43],[188,48,226,8,"difference"],[188,58,226,18],[188,59,227,10],[188,63,227,14,"Set"],[188,66,227,17],[188,67,227,18,"requestedEntryTypes"],[188,86,227,37],[188,87,227,38,"keys"],[188,91,227,42],[188,92,227,43],[188,93,227,44],[188,94,227,45],[188,96,228,10],[188,100,228,14,"Set"],[188,103,228,17],[188,104,228,18,"currentEntryTypes"],[188,121,228,35],[188,122,228,36,"keys"],[188,126,228,40],[188,127,228,41],[188,128,228,42],[188,129,229,8],[188,130,229,9],[188,133,230,8],[188,137,230,12,"Set"],[188,140,230,15],[188,141,230,16,"requestedEntryTypes"],[188,160,230,35],[188,161,230,36,"keys"],[188,165,230,40],[188,166,230,41],[188,167,230,42],[188,168,230,43],[189,8,231,4],[189,13,231,9],[189,17,231,15,"type"],[189,21,231,19],[189,25,231,23,"newEntryTypes"],[189,38,231,36],[189,40,231,38],[190,10,231,38],[190,14,231,38,"_observerCountPerEntr"],[190,35,231,38],[191,10,232,6],[191,14,232,10],[191,15,232,11,"observerCountPerEntryType"],[191,40,232,36],[191,41,232,37,"has"],[191,44,232,40],[191,45,232,41,"type"],[191,49,232,45],[191,50,232,46],[191,52,232,48],[192,12,233,8],[192,16,233,14,"rawType"],[192,23,233,21],[192,26,233,24],[192,30,233,24,"performanceEntryTypeToRaw"],[192,60,233,24],[192,61,233,24,"performanceEntryTypeToRaw"],[192,111,233,49],[192,113,233,50,"type"],[192,117,233,54],[192,118,233,55],[193,12,234,8,"NativePerformanceObserver"],[193,46,234,33],[193,47,234,34,"startReporting"],[193,61,234,48],[193,62,234,49,"rawType"],[193,69,234,56],[193,70,234,57],[194,10,235,6],[195,10,236,6,"observerCountPerEntryType"],[195,35,236,31],[195,36,236,32,"set"],[195,39,236,35],[195,40,237,8,"type"],[195,44,237,12],[195,46,238,8],[195,48,238,8,"_observerCountPerEntr"],[195,69,238,8],[195,72,238,9,"observerCountPerEntryType"],[195,97,238,34],[195,98,238,35,"get"],[195,101,238,38],[195,102,238,39,"type"],[195,106,238,43],[195,107,238,44],[195,119,238,44,"_observerCountPerEntr"],[195,140,238,44],[195,143,238,48],[195,144,238,49],[195,148,238,53],[195,149,239,6],[195,150,239,7],[196,8,240,4],[197,8,241,4,"applyDurationThresholds"],[197,31,241,27],[197,32,241,28],[197,33,241,29],[198,6,242,2],[199,4,242,3],[200,6,242,3,"key"],[200,9,242,3],[201,6,242,3,"value"],[201,11,242,3],[201,13,244,2],[201,22,244,2,"disconnect"],[201,32,244,12,"disconnect"],[201,33,244,12],[201,35,244,21],[202,8,245,4],[202,12,245,8],[202,13,245,9,"NativePerformanceObserver"],[202,47,245,34],[202,49,245,36],[203,10,246,6,"warnNoNativePerformanceObserver"],[203,41,246,37],[203,42,246,38],[203,43,246,39],[204,10,247,6],[205,8,248,4],[206,8,250,4],[206,12,250,10,"observerConfig"],[206,26,250,24],[206,29,250,27,"registeredObservers"],[206,48,250,46],[206,49,250,47,"get"],[206,52,250,50],[206,53,250,51],[206,57,250,55],[206,58,250,56],[207,8,251,4],[207,12,251,8],[207,13,251,9,"observerConfig"],[207,27,251,23],[207,29,251,25],[208,10,252,6],[209,8,253,4],[211,8,255,4],[212,8,256,4],[212,13,256,9],[212,17,256,15,"type"],[212,21,256,19],[212,25,256,23,"observerConfig"],[212,39,256,37],[212,40,256,38,"entryTypes"],[212,50,256,48],[212,51,256,49,"keys"],[212,55,256,53],[212,56,256,54],[212,57,256,55],[212,59,256,57],[213,10,256,57],[213,14,256,57,"_observerCountPerEntr2"],[213,36,256,57],[214,10,257,6],[214,14,257,12,"numberOfObserversForThisType"],[214,42,257,40],[214,46,257,40,"_observerCountPerEntr2"],[214,68,257,40],[214,71,258,8,"observerCountPerEntryType"],[214,96,258,33],[214,97,258,34,"get"],[214,100,258,37],[214,101,258,38,"type"],[214,105,258,42],[214,106,258,43],[214,118,258,43,"_observerCountPerEntr2"],[214,140,258,43],[214,143,258,47],[214,144,258,48],[215,10,259,6],[215,14,259,10,"numberOfObserversForThisType"],[215,42,259,38],[215,47,259,43],[215,48,259,44],[215,50,259,46],[216,12,260,8,"observerCountPerEntryType"],[216,37,260,33],[216,38,260,34,"delete"],[216,44,260,40],[216,45,260,41,"type"],[216,49,260,45],[216,50,260,46],[217,12,261,8,"NativePerformanceObserver"],[217,46,261,33],[217,47,261,34,"stopReporting"],[217,60,261,47],[217,61,262,10],[217,65,262,10,"performanceEntryTypeToRaw"],[217,95,262,10],[217,96,262,10,"performanceEntryTypeToRaw"],[217,146,262,35],[217,148,262,36,"type"],[217,152,262,40],[217,153,263,8],[217,154,263,9],[218,10,264,6],[218,11,264,7],[218,17,264,13],[218,21,264,17,"numberOfObserversForThisType"],[218,49,264,45],[218,54,264,50],[218,55,264,51],[218,57,264,53],[219,12,265,8,"observerCountPerEntryType"],[219,37,265,33],[219,38,265,34,"set"],[219,41,265,37],[219,42,265,38,"type"],[219,46,265,42],[219,48,265,44,"numberOfObserversForThisType"],[219,76,265,72],[219,79,265,75],[219,80,265,76],[219,81,265,77],[220,10,266,6],[221,8,267,4],[223,8,269,4],[224,8,270,4,"registeredObservers"],[224,27,270,23],[224,28,270,24,"delete"],[224,34,270,30],[224,35,270,31],[224,39,270,35],[224,40,270,36],[225,8,271,4],[225,12,271,8,"registeredObservers"],[225,31,271,27],[225,32,271,28,"size"],[225,36,271,32],[225,41,271,37],[225,42,271,38],[225,44,271,40],[226,10,272,6,"NativePerformanceObserver"],[226,44,272,31],[226,45,272,32,"setOnPerformanceEntryCallback"],[226,74,272,61],[226,75,272,62,"undefined"],[226,84,272,71],[226,85,272,72],[227,10,273,6,"isOnPerformanceEntryCallbackSet"],[227,41,273,37],[227,44,273,40],[227,49,273,45],[228,8,274,4],[229,8,276,4,"applyDurationThresholds"],[229,31,276,27],[229,32,276,28],[229,33,276,29],[230,6,277,2],[231,4,277,3],[232,6,277,3,"key"],[232,9,277,3],[233,6,277,3,"value"],[233,11,277,3],[233,13,279,2],[233,22,279,2,"_validateObserveOptions"],[233,45,279,25,"_validateObserveOptions"],[233,46,279,26,"options"],[233,53,279,58],[233,55,279,66],[234,8,280,4],[234,12,280,11,"type"],[234,16,280,15],[234,19,280,50,"options"],[234,26,280,57],[234,27,280,11,"type"],[234,31,280,15],[235,10,280,17,"entryTypes"],[235,20,280,27],[235,23,280,50,"options"],[235,30,280,57],[235,31,280,17,"entryTypes"],[235,41,280,27],[236,10,280,29,"durationThreshold"],[236,27,280,46],[236,30,280,50,"options"],[236,37,280,57],[236,38,280,29,"durationThreshold"],[236,55,280,46],[237,8,282,4],[237,12,282,8],[237,13,282,9,"type"],[237,17,282,13],[237,21,282,17],[237,22,282,18,"entryTypes"],[237,32,282,28],[237,34,282,30],[238,10,283,6],[238,16,283,12],[238,20,283,16,"TypeError"],[238,29,283,25],[238,30,284,8],[238,156,285,6],[238,157,285,7],[239,8,286,4],[240,8,288,4],[240,12,288,8,"entryTypes"],[240,22,288,18],[240,26,288,22,"type"],[240,30,288,26],[240,32,288,28],[241,10,289,6],[241,16,289,12],[241,20,289,16,"TypeError"],[241,29,289,25],[241,30,290,8],[241,153,291,6],[241,154,291,7],[242,8,292,4],[243,8,294,4],[243,12,294,8],[243,16,294,12],[243,17,294,13,"_type"],[243,22,294,18],[243,27,294,23],[243,37,294,33],[243,41,294,37,"type"],[243,45,294,41],[243,47,294,43],[244,10,295,6],[244,16,295,12],[244,20,295,16,"Error"],[244,25,295,21],[244,26,296,8],[244,183,297,6],[244,184,297,7],[245,8,298,4],[246,8,300,4],[246,12,300,8],[246,16,300,12],[246,17,300,13,"_type"],[246,22,300,18],[246,27,300,23],[246,35,300,31],[246,39,300,35,"entryTypes"],[246,49,300,45],[246,51,300,47],[247,10,301,6],[247,16,301,12],[247,20,301,16,"Error"],[247,25,301,21],[247,26,302,8],[247,194,303,6],[247,195,303,7],[248,8,304,4],[249,8,306,4],[249,12,306,8,"entryTypes"],[249,22,306,18],[249,26,306,22,"durationThreshold"],[249,43,306,39],[249,48,306,44,"undefined"],[249,57,306,53],[249,59,306,55],[250,10,307,6],[250,16,307,12],[250,20,307,16,"TypeError"],[250,29,307,25],[250,30,308,8],[250,169,309,6],[250,170,309,7],[251,8,310,4],[252,6,311,2],[253,4,311,3],[254,2,311,3],[254,7,317,0],[255,2,169,21,"PerformanceObserver"],[255,21,169,40],[255,22,313,9,"supportedEntryTypes"],[255,41,313,28],[255,44,314,4,"getSupportedPerformanceEntryTypes"],[255,77,314,37],[255,78,314,38],[255,79,314,39],[256,2,318,0],[256,11,318,9,"union"],[256,16,318,14,"union"],[256,17,319,2,"a"],[256,18,319,29],[256,20,320,2,"b"],[256,21,320,29],[256,23,321,19],[257,4,322,2],[257,8,322,8,"res"],[257,11,322,11],[257,14,322,14],[257,18,322,18,"Map"],[257,21,322,21],[257,22,322,34],[257,23,322,35],[258,4,323,2],[258,13,323,2,"_ref5"],[258,18,323,2],[258,22,323,23,"a"],[258,23,323,24],[258,25,323,26],[259,6,323,26],[259,10,323,26,"_ref6"],[259,15,323,26],[259,22,323,26,"_slicedToArray2"],[259,37,323,26],[259,38,323,26,"default"],[259,45,323,26],[259,47,323,26,"_ref5"],[259,52,323,26],[260,6,323,26],[260,10,323,14,"k"],[260,11,323,15],[260,14,323,15,"_ref6"],[260,19,323,15],[261,6,323,15],[261,10,323,17,"v"],[261,11,323,18],[261,14,323,18,"_ref6"],[261,19,323,18],[262,6,324,4],[262,10,324,8],[262,11,324,9,"b"],[262,12,324,10],[262,13,324,11,"has"],[262,16,324,14],[262,17,324,15,"k"],[262,18,324,16],[262,19,324,17],[262,21,324,19],[263,8,325,6,"res"],[263,11,325,9],[263,12,325,10,"set"],[263,15,325,13],[263,16,325,14,"k"],[263,17,325,15],[263,19,325,17,"v"],[263,20,325,18],[263,21,325,19],[264,6,326,4],[264,7,326,5],[264,13,326,11],[265,8,326,11],[265,12,326,11,"_b$get"],[265,18,326,11],[266,8,327,6,"res"],[266,11,327,9],[266,12,327,10,"set"],[266,15,327,13],[266,16,327,14,"k"],[266,17,327,15],[266,19,327,17,"Math"],[266,23,327,21],[266,24,327,22,"min"],[266,27,327,25],[266,28,327,26,"v"],[266,29,327,27],[266,40,327,26,"v"],[266,41,327,27],[266,44,327,31],[266,45,327,32],[266,48,327,32,"_b$get"],[266,54,327,32],[266,57,327,34,"b"],[266,58,327,35],[266,59,327,36,"get"],[266,62,327,39],[266,63,327,40,"k"],[266,64,327,41],[266,65,327,42],[266,77,327,42,"_b$get"],[266,83,327,42],[266,86,327,46],[266,87,327,47],[266,88,327,48],[266,89,327,49],[267,6,328,4],[268,4,329,2],[269,4,330,2],[269,11,330,9,"res"],[269,14,330,12],[270,2,331,0],[271,2,333,0],[271,11,333,9,"difference"],[271,21,333,19,"difference"],[271,22,333,23,"a"],[271,23,333,41],[271,25,333,43,"b"],[271,26,333,61],[271,28,333,71],[272,4,334,2],[272,11,334,9],[272,15,334,13,"Set"],[272,18,334,16],[272,19,334,17],[272,23,334,17,"_toConsumableArray2"],[272,42,334,17],[272,43,334,17,"default"],[272,50,334,17],[272,52,334,21,"a"],[272,53,334,22],[272,55,334,24,"filter"],[272,61,334,30],[272,62,334,31],[272,72,334,31,"x"],[272,73,334,32],[273,6,334,32],[273,13,334,36],[273,14,334,37,"b"],[273,15,334,38],[273,16,334,39,"has"],[273,19,334,42],[273,20,334,43,"x"],[273,21,334,44],[273,22,334,45],[274,4,334,45],[274,6,334,46],[274,7,334,47],[275,2,335,0],[276,0,335,1],[276,3]],"functionMap":{"names":["<global>","PerformanceObserverEntryList","PerformanceObserverEntryList#constructor","PerformanceObserverEntryList#getEntries","PerformanceObserverEntryList#getEntriesByType","_entries.filter$argument_0","PerformanceObserverEntryList#getEntriesByName","onPerformanceEntry","entries.filter$argument_0","warnNoNativePerformanceObserver","applyDurationThresholds","Array.from.map$argument_0","Array.from.map.reduce$argument_0","getSupportedPerformanceEntryTypes","PerformanceObserver","constructor","observe","options.entryTypes.map$argument_0","disconnect","_validateObserveOptions","union","difference","filter$argument_0"],"mappings":"AAA;OCwB;ECG;GDE;EEE;GFE;EGE;gCCC,iCD;GHC;EKE;kCDK,4BC;QDG,wDC;GLG;CDC;2BO8B;oECY;KDM;CPO;OSE;CTK;AUE;SCI,2BD;MEE,+DF;CVU;AaE;Cba;ecsB;ECI;GDE;EEE;+BCa,mBD;GFoD;EIE;GJiC;EKE;GLgC;CdI;AoBG;CpBa;AqBE;+BCC,cD;CrBC"}},"type":"js/module"}]}