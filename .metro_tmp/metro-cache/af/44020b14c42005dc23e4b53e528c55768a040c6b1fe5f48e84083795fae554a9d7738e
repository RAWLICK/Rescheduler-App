{"dependencies":[{"name":"./toDate.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":55},"end":{"line":2,"column":37,"index":92}}],"key":"o2GbHlM0wxsRaLWHEC6986QcehU="}},{"name":"./constants.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":54,"index":54}}],"key":"0CDp4OIxpxzHKYXO2c/E0Fm3H6U="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.addMinutes = addMinutes;\n  exports.default = void 0;\n  /**\n   * The {@link addMinutes} function options.\n   */\n\n  /**\n   * @name addMinutes\n   * @category Minute Helpers\n   * @summary Add the specified number of minutes to the given date.\n   *\n   * @description\n   * Add the specified number of minutes to the given date.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param date - The date to be changed\n   * @param amount - The amount of minutes to be added.\n   * @param options - An object with options\n   *\n   * @returns The new date with the minutes added\n   *\n   * @example\n   * // Add 30 minutes to 10 July 2014 12:00:00:\n   * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n   * //=> Thu Jul 10 2014 12:30:00\n   */\n  function addMinutes(date, amount, options) {\n    var _date = (0, _$$_REQUIRE(_dependencyMap[0], \"./toDate.js\").toDate)(date, options == null ? void 0 : options.in);\n    _date.setTime(_date.getTime() + amount * _$$_REQUIRE(_dependencyMap[1], \"./constants.js\").millisecondsInMinute);\n    return _date;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = addMinutes;\n});","lineCount":41,"map":[[7,2,4,0],[8,0,5,0],[9,0,6,0],[11,2,8,0],[12,0,9,0],[13,0,10,0],[14,0,11,0],[15,0,12,0],[16,0,13,0],[17,0,14,0],[18,0,15,0],[19,0,16,0],[20,0,17,0],[21,0,18,0],[22,0,19,0],[23,0,20,0],[24,0,21,0],[25,0,22,0],[26,0,23,0],[27,0,24,0],[28,0,25,0],[29,0,26,0],[30,0,27,0],[31,0,28,0],[32,0,29,0],[33,2,30,7],[33,11,30,16,"addMinutes"],[33,21,30,26,"addMinutes"],[33,22,30,27,"date"],[33,26,30,31],[33,28,30,33,"amount"],[33,34,30,39],[33,36,30,41,"options"],[33,43,30,48],[33,45,30,50],[34,4,31,2],[34,8,31,8,"_date"],[34,13,31,13],[34,16,31,16],[34,20,31,16,"toDate"],[34,50,31,16],[34,51,31,16,"toDate"],[34,72,31,22],[34,74,31,23,"date"],[34,78,31,27],[34,80,31,29,"options"],[34,87,31,36],[34,107,31,29,"options"],[34,114,31,36],[34,115,31,38,"in"],[34,117,31,40],[34,118,31,41],[35,4,32,2,"_date"],[35,9,32,7],[35,10,32,8,"setTime"],[35,17,32,15],[35,18,32,16,"_date"],[35,23,32,21],[35,24,32,22,"getTime"],[35,31,32,29],[35,32,32,30],[35,33,32,31],[35,36,32,34,"amount"],[35,42,32,40],[35,45,32,43,"millisecondsInMinute"],[35,75,32,43],[35,76,32,43,"millisecondsInMinute"],[35,114,32,63],[35,115,32,64],[36,4,33,2],[36,11,33,9,"_date"],[36,16,33,14],[37,2,34,0],[39,2,36,0],[40,2,36,0],[40,6,36,0,"_default"],[40,14,36,0],[40,17,36,0,"exports"],[40,24,36,0],[40,25,36,0,"default"],[40,32,36,0],[40,35,37,15,"addMinutes"],[40,45,37,25],[41,0,37,25],[41,3]],"functionMap":{"names":["<global>","addMinutes"],"mappings":"AAA;OC6B;CDI"}},"type":"js/module"}]}