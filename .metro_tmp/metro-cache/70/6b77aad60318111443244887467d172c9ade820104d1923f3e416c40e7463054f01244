{"dependencies":[{"name":"./toDate.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":40},"end":{"line":2,"column":37,"index":77}},{"start":{"line":2,"column":0,"index":40},"end":{"line":2,"column":37,"index":77}}],"key":"o2GbHlM0wxsRaLWHEC6986QcehU="}},{"name":"./getWeek.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":39,"index":39}}],"key":"qiRORsgzlc+9mQCe/diw8yoDpL4="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.setWeek = setWeek;\n  /**\n   * The {@link setWeek} function options.\n   */\n\n  /**\n   * @name setWeek\n   * @category Week Helpers\n   * @summary Set the local week to the given date.\n   *\n   * @description\n   * Set the local week to the given date, saving the weekday number.\n   * The exact calculation depends on the values of\n   * `options.weekStartsOn` (which is the index of the first day of the week)\n   * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n   * the first week of the week-numbering year)\n   *\n   * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param date - The date to be changed\n   * @param week - The week of the new date\n   * @param options - An object with options\n   *\n   * @returns The new date with the local week set\n   *\n   * @example\n   * // Set the 1st week to 2 January 2005 with default options:\n   * const result = setWeek(new Date(2005, 0, 2), 1)\n   * //=> Sun Dec 26 2004 00:00:00\n   *\n   * @example\n   * // Set the 1st week to 2 January 2005,\n   * // if Monday is the first day of the week,\n   * // and the first week of the year always contains 4 January:\n   * const result = setWeek(new Date(2005, 0, 2), 1, {\n   *   weekStartsOn: 1,\n   *   firstWeekContainsDate: 4\n   * })\n   * //=> Sun Jan 4 2004 00:00:00\n   */\n  function setWeek(date, week, options) {\n    var date_ = (0, _$$_REQUIRE(_dependencyMap[0], \"./toDate.js\").toDate)(date, options == null ? void 0 : options.in);\n    var diff = (0, _$$_REQUIRE(_dependencyMap[1], \"./getWeek.js\").getWeek)(date_, options) - week;\n    date_.setDate(date_.getDate() - diff * 7);\n    return (0, _$$_REQUIRE(_dependencyMap[0], \"./toDate.js\").toDate)(date_, options == null ? void 0 : options.in);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = setWeek;\n});","lineCount":58,"map":[[7,2,4,0],[8,0,5,0],[9,0,6,0],[11,2,8,0],[12,0,9,0],[13,0,10,0],[14,0,11,0],[15,0,12,0],[16,0,13,0],[17,0,14,0],[18,0,15,0],[19,0,16,0],[20,0,17,0],[21,0,18,0],[22,0,19,0],[23,0,20,0],[24,0,21,0],[25,0,22,0],[26,0,23,0],[27,0,24,0],[28,0,25,0],[29,0,26,0],[30,0,27,0],[31,0,28,0],[32,0,29,0],[33,0,30,0],[34,0,31,0],[35,0,32,0],[36,0,33,0],[37,0,34,0],[38,0,35,0],[39,0,36,0],[40,0,37,0],[41,0,38,0],[42,0,39,0],[43,0,40,0],[44,0,41,0],[45,0,42,0],[46,0,43,0],[47,0,44,0],[48,0,45,0],[49,2,46,7],[49,11,46,16,"setWeek"],[49,18,46,23,"setWeek"],[49,19,46,24,"date"],[49,23,46,28],[49,25,46,30,"week"],[49,29,46,34],[49,31,46,36,"options"],[49,38,46,43],[49,40,46,45],[50,4,47,2],[50,8,47,8,"date_"],[50,13,47,13],[50,16,47,16],[50,20,47,16,"toDate"],[50,50,47,16],[50,51,47,16,"toDate"],[50,72,47,22],[50,74,47,23,"date"],[50,78,47,27],[50,80,47,29,"options"],[50,87,47,36],[50,107,47,29,"options"],[50,114,47,36],[50,115,47,38,"in"],[50,117,47,40],[50,118,47,41],[51,4,48,2],[51,8,48,8,"diff"],[51,12,48,12],[51,15,48,15],[51,19,48,15,"getWeek"],[51,49,48,15],[51,50,48,15,"getWeek"],[51,73,48,22],[51,75,48,23,"date_"],[51,80,48,28],[51,82,48,30,"options"],[51,89,48,37],[51,90,48,38],[51,93,48,41,"week"],[51,97,48,45],[52,4,49,2,"date_"],[52,9,49,7],[52,10,49,8,"setDate"],[52,17,49,15],[52,18,49,16,"date_"],[52,23,49,21],[52,24,49,22,"getDate"],[52,31,49,29],[52,32,49,30],[52,33,49,31],[52,36,49,34,"diff"],[52,40,49,38],[52,43,49,41],[52,44,49,42],[52,45,49,43],[53,4,50,2],[53,11,50,9],[53,15,50,9,"toDate"],[53,45,50,9],[53,46,50,9,"toDate"],[53,67,50,15],[53,69,50,16,"date_"],[53,74,50,21],[53,76,50,23,"options"],[53,83,50,30],[53,103,50,23,"options"],[53,110,50,30],[53,111,50,32,"in"],[53,113,50,34],[53,114,50,35],[54,2,51,0],[56,2,53,0],[57,2,53,0],[57,6,53,0,"_default"],[57,14,53,0],[57,17,53,0,"exports"],[57,24,53,0],[57,25,53,0,"default"],[57,32,53,0],[57,35,54,15,"setWeek"],[57,42,54,22],[58,0,54,22],[58,3]],"functionMap":{"names":["<global>","setWeek"],"mappings":"AAA;OC6C;CDK"}},"type":"js/module"}]}