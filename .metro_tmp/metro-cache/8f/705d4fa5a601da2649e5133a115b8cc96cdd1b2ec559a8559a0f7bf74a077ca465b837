{"dependencies":[{"name":"./toDate.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":61},"end":{"line":2,"column":37,"index":98}}],"key":"o2GbHlM0wxsRaLWHEC6986QcehU="}},{"name":"./_lib/addLeadingZeros.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":60,"index":60}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":60,"index":60}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":60,"index":60}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":60,"index":60}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":60,"index":60}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":60,"index":60}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":60,"index":60}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":60,"index":60}}],"key":"ykk6BHqmQXUUeOCslVXCzU0Zo2w="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.formatISO = formatISO;\n  /**\n   * The {@link formatISO} function options.\n   */\n\n  /**\n   * @name formatISO\n   * @category Common Helpers\n   * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n   *\n   * @description\n   * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n   *\n   * @param date - The original date\n   * @param options - An object with options.\n   *\n   * @returns The formatted date string (in local time zone)\n   *\n   * @throws `date` must not be Invalid Date\n   *\n   * @example\n   * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n   * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n   * //=> '2019-09-18T19:00:52Z'\n   *\n   * @example\n   * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n   * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n   * //=> '20190918T190052'\n   *\n   * @example\n   * // Represent 18 September 2019 in ISO 8601 format, date only:\n   * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n   * //=> '2019-09-18'\n   *\n   * @example\n   * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n   * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n   * //=> '19:00:52Z'\n   */\n  function formatISO(date, options) {\n    var _options$format, _options$representati;\n    var date_ = (0, _$$_REQUIRE(_dependencyMap[0], \"./toDate.js\").toDate)(date, options == null ? void 0 : options.in);\n    if (isNaN(+date_)) {\n      throw new RangeError(\"Invalid time value\");\n    }\n    var format = (_options$format = options == null ? void 0 : options.format) != null ? _options$format : \"extended\";\n    var representation = (_options$representati = options == null ? void 0 : options.representation) != null ? _options$representati : \"complete\";\n    var result = \"\";\n    var tzOffset = \"\";\n    var dateDelimiter = format === \"extended\" ? \"-\" : \"\";\n    var timeDelimiter = format === \"extended\" ? \":\" : \"\";\n\n    // Representation is either 'date' or 'complete'\n    if (representation !== \"time\") {\n      var day = (0, _$$_REQUIRE(_dependencyMap[1], \"./_lib/addLeadingZeros.js\").addLeadingZeros)(date_.getDate(), 2);\n      var month = (0, _$$_REQUIRE(_dependencyMap[1], \"./_lib/addLeadingZeros.js\").addLeadingZeros)(date_.getMonth() + 1, 2);\n      var year = (0, _$$_REQUIRE(_dependencyMap[1], \"./_lib/addLeadingZeros.js\").addLeadingZeros)(date_.getFullYear(), 4);\n\n      // yyyyMMdd or yyyy-MM-dd.\n      result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;\n    }\n\n    // Representation is either 'time' or 'complete'\n    if (representation !== \"date\") {\n      // Add the timezone.\n      var offset = date_.getTimezoneOffset();\n      if (offset !== 0) {\n        var absoluteOffset = Math.abs(offset);\n        var hourOffset = (0, _$$_REQUIRE(_dependencyMap[1], \"./_lib/addLeadingZeros.js\").addLeadingZeros)(Math.trunc(absoluteOffset / 60), 2);\n        var minuteOffset = (0, _$$_REQUIRE(_dependencyMap[1], \"./_lib/addLeadingZeros.js\").addLeadingZeros)(absoluteOffset % 60, 2);\n        // If less than 0, the sign is +, because it is ahead of time.\n        var sign = offset < 0 ? \"+\" : \"-\";\n        tzOffset = `${sign}${hourOffset}:${minuteOffset}`;\n      } else {\n        tzOffset = \"Z\";\n      }\n      var hour = (0, _$$_REQUIRE(_dependencyMap[1], \"./_lib/addLeadingZeros.js\").addLeadingZeros)(date_.getHours(), 2);\n      var minute = (0, _$$_REQUIRE(_dependencyMap[1], \"./_lib/addLeadingZeros.js\").addLeadingZeros)(date_.getMinutes(), 2);\n      var second = (0, _$$_REQUIRE(_dependencyMap[1], \"./_lib/addLeadingZeros.js\").addLeadingZeros)(date_.getSeconds(), 2);\n\n      // If there's also date, separate it with time with 'T'\n      var separator = result === \"\" ? \"\" : \"T\";\n\n      // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n      var time = [hour, minute, second].join(timeDelimiter);\n\n      // HHmmss or HH:mm:ss.\n      result = `${result}${separator}${time}${tzOffset}`;\n    }\n    return result;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = formatISO;\n});","lineCount":101,"map":[[7,2,4,0],[8,0,5,0],[9,0,6,0],[11,2,8,0],[12,0,9,0],[13,0,10,0],[14,0,11,0],[15,0,12,0],[16,0,13,0],[17,0,14,0],[18,0,15,0],[19,0,16,0],[20,0,17,0],[21,0,18,0],[22,0,19,0],[23,0,20,0],[24,0,21,0],[25,0,22,0],[26,0,23,0],[27,0,24,0],[28,0,25,0],[29,0,26,0],[30,0,27,0],[31,0,28,0],[32,0,29,0],[33,0,30,0],[34,0,31,0],[35,0,32,0],[36,0,33,0],[37,0,34,0],[38,0,35,0],[39,0,36,0],[40,0,37,0],[41,0,38,0],[42,0,39,0],[43,0,40,0],[44,0,41,0],[45,0,42,0],[46,2,43,7],[46,11,43,16,"formatISO"],[46,20,43,25,"formatISO"],[46,21,43,26,"date"],[46,25,43,30],[46,27,43,32,"options"],[46,34,43,39],[46,36,43,41],[47,4,43,41],[47,8,43,41,"_options$format"],[47,23,43,41],[47,25,43,41,"_options$representati"],[47,46,43,41],[48,4,44,2],[48,8,44,8,"date_"],[48,13,44,13],[48,16,44,16],[48,20,44,16,"toDate"],[48,50,44,16],[48,51,44,16,"toDate"],[48,72,44,22],[48,74,44,23,"date"],[48,78,44,27],[48,80,44,29,"options"],[48,87,44,36],[48,107,44,29,"options"],[48,114,44,36],[48,115,44,38,"in"],[48,117,44,40],[48,118,44,41],[49,4,46,2],[49,8,46,6,"isNaN"],[49,13,46,11],[49,14,46,12],[49,15,46,13,"date_"],[49,20,46,18],[49,21,46,19],[49,23,46,21],[50,6,47,4],[50,12,47,10],[50,16,47,14,"RangeError"],[50,26,47,24],[50,27,47,25],[50,47,47,45],[50,48,47,46],[51,4,48,2],[52,4,50,2],[52,8,50,8,"format"],[52,14,50,14],[52,18,50,14,"_options$format"],[52,33,50,14],[52,36,50,17,"options"],[52,43,50,24],[52,63,50,17,"options"],[52,70,50,24],[52,71,50,26,"format"],[52,77,50,32],[52,89,50,32,"_options$format"],[52,104,50,32],[52,107,50,36],[52,117,50,46],[53,4,51,2],[53,8,51,8,"representation"],[53,22,51,22],[53,26,51,22,"_options$representati"],[53,47,51,22],[53,50,51,25,"options"],[53,57,51,32],[53,77,51,25,"options"],[53,84,51,32],[53,85,51,34,"representation"],[53,99,51,48],[53,111,51,48,"_options$representati"],[53,132,51,48],[53,135,51,52],[53,145,51,62],[54,4,53,2],[54,8,53,6,"result"],[54,14,53,12],[54,17,53,15],[54,19,53,17],[55,4,54,2],[55,8,54,6,"tzOffset"],[55,16,54,14],[55,19,54,17],[55,21,54,19],[56,4,56,2],[56,8,56,8,"dateDelimiter"],[56,21,56,21],[56,24,56,24,"format"],[56,30,56,30],[56,35,56,35],[56,45,56,45],[56,48,56,48],[56,51,56,51],[56,54,56,54],[56,56,56,56],[57,4,57,2],[57,8,57,8,"timeDelimiter"],[57,21,57,21],[57,24,57,24,"format"],[57,30,57,30],[57,35,57,35],[57,45,57,45],[57,48,57,48],[57,51,57,51],[57,54,57,54],[57,56,57,56],[59,4,59,2],[60,4,60,2],[60,8,60,6,"representation"],[60,22,60,20],[60,27,60,25],[60,33,60,31],[60,35,60,33],[61,6,61,4],[61,10,61,10,"day"],[61,13,61,13],[61,16,61,16],[61,20,61,16,"addLeadingZeros"],[61,50,61,16],[61,51,61,16,"addLeadingZeros"],[61,95,61,31],[61,97,61,32,"date_"],[61,102,61,37],[61,103,61,38,"getDate"],[61,110,61,45],[61,111,61,46],[61,112,61,47],[61,114,61,49],[61,115,61,50],[61,116,61,51],[62,6,62,4],[62,10,62,10,"month"],[62,15,62,15],[62,18,62,18],[62,22,62,18,"addLeadingZeros"],[62,52,62,18],[62,53,62,18,"addLeadingZeros"],[62,97,62,33],[62,99,62,34,"date_"],[62,104,62,39],[62,105,62,40,"getMonth"],[62,113,62,48],[62,114,62,49],[62,115,62,50],[62,118,62,53],[62,119,62,54],[62,121,62,56],[62,122,62,57],[62,123,62,58],[63,6,63,4],[63,10,63,10,"year"],[63,14,63,14],[63,17,63,17],[63,21,63,17,"addLeadingZeros"],[63,51,63,17],[63,52,63,17,"addLeadingZeros"],[63,96,63,32],[63,98,63,33,"date_"],[63,103,63,38],[63,104,63,39,"getFullYear"],[63,115,63,50],[63,116,63,51],[63,117,63,52],[63,119,63,54],[63,120,63,55],[63,121,63,56],[65,6,65,4],[66,6,66,4,"result"],[66,12,66,10],[66,15,66,13],[66,18,66,16,"year"],[66,22,66,20],[66,25,66,23,"dateDelimiter"],[66,38,66,36],[66,41,66,39,"month"],[66,46,66,44],[66,49,66,47,"dateDelimiter"],[66,62,66,60],[66,65,66,63,"day"],[66,68,66,66],[66,70,66,68],[67,4,67,2],[69,4,69,2],[70,4,70,2],[70,8,70,6,"representation"],[70,22,70,20],[70,27,70,25],[70,33,70,31],[70,35,70,33],[71,6,71,4],[72,6,72,4],[72,10,72,10,"offset"],[72,16,72,16],[72,19,72,19,"date_"],[72,24,72,24],[72,25,72,25,"getTimezoneOffset"],[72,42,72,42],[72,43,72,43],[72,44,72,44],[73,6,74,4],[73,10,74,8,"offset"],[73,16,74,14],[73,21,74,19],[73,22,74,20],[73,24,74,22],[74,8,75,6],[74,12,75,12,"absoluteOffset"],[74,26,75,26],[74,29,75,29,"Math"],[74,33,75,33],[74,34,75,34,"abs"],[74,37,75,37],[74,38,75,38,"offset"],[74,44,75,44],[74,45,75,45],[75,8,76,6],[75,12,76,12,"hourOffset"],[75,22,76,22],[75,25,76,25],[75,29,76,25,"addLeadingZeros"],[75,59,76,25],[75,60,76,25,"addLeadingZeros"],[75,104,76,40],[75,106,76,41,"Math"],[75,110,76,45],[75,111,76,46,"trunc"],[75,116,76,51],[75,117,76,52,"absoluteOffset"],[75,131,76,66],[75,134,76,69],[75,136,76,71],[75,137,76,72],[75,139,76,74],[75,140,76,75],[75,141,76,76],[76,8,77,6],[76,12,77,12,"minuteOffset"],[76,24,77,24],[76,27,77,27],[76,31,77,27,"addLeadingZeros"],[76,61,77,27],[76,62,77,27,"addLeadingZeros"],[76,106,77,42],[76,108,77,43,"absoluteOffset"],[76,122,77,57],[76,125,77,60],[76,127,77,62],[76,129,77,64],[76,130,77,65],[76,131,77,66],[77,8,78,6],[78,8,79,6],[78,12,79,12,"sign"],[78,16,79,16],[78,19,79,19,"offset"],[78,25,79,25],[78,28,79,28],[78,29,79,29],[78,32,79,32],[78,35,79,35],[78,38,79,38],[78,41,79,41],[79,8,81,6,"tzOffset"],[79,16,81,14],[79,19,81,17],[79,22,81,20,"sign"],[79,26,81,24],[79,29,81,27,"hourOffset"],[79,39,81,37],[79,43,81,41,"minuteOffset"],[79,55,81,53],[79,57,81,55],[80,6,82,4],[80,7,82,5],[80,13,82,11],[81,8,83,6,"tzOffset"],[81,16,83,14],[81,19,83,17],[81,22,83,20],[82,6,84,4],[83,6,86,4],[83,10,86,10,"hour"],[83,14,86,14],[83,17,86,17],[83,21,86,17,"addLeadingZeros"],[83,51,86,17],[83,52,86,17,"addLeadingZeros"],[83,96,86,32],[83,98,86,33,"date_"],[83,103,86,38],[83,104,86,39,"getHours"],[83,112,86,47],[83,113,86,48],[83,114,86,49],[83,116,86,51],[83,117,86,52],[83,118,86,53],[84,6,87,4],[84,10,87,10,"minute"],[84,16,87,16],[84,19,87,19],[84,23,87,19,"addLeadingZeros"],[84,53,87,19],[84,54,87,19,"addLeadingZeros"],[84,98,87,34],[84,100,87,35,"date_"],[84,105,87,40],[84,106,87,41,"getMinutes"],[84,116,87,51],[84,117,87,52],[84,118,87,53],[84,120,87,55],[84,121,87,56],[84,122,87,57],[85,6,88,4],[85,10,88,10,"second"],[85,16,88,16],[85,19,88,19],[85,23,88,19,"addLeadingZeros"],[85,53,88,19],[85,54,88,19,"addLeadingZeros"],[85,98,88,34],[85,100,88,35,"date_"],[85,105,88,40],[85,106,88,41,"getSeconds"],[85,116,88,51],[85,117,88,52],[85,118,88,53],[85,120,88,55],[85,121,88,56],[85,122,88,57],[87,6,90,4],[88,6,91,4],[88,10,91,10,"separator"],[88,19,91,19],[88,22,91,22,"result"],[88,28,91,28],[88,33,91,33],[88,35,91,35],[88,38,91,38],[88,40,91,40],[88,43,91,43],[88,46,91,46],[90,6,93,4],[91,6,94,4],[91,10,94,10,"time"],[91,14,94,14],[91,17,94,17],[91,18,94,18,"hour"],[91,22,94,22],[91,24,94,24,"minute"],[91,30,94,30],[91,32,94,32,"second"],[91,38,94,38],[91,39,94,39],[91,40,94,40,"join"],[91,44,94,44],[91,45,94,45,"timeDelimiter"],[91,58,94,58],[91,59,94,59],[93,6,96,4],[94,6,97,4,"result"],[94,12,97,10],[94,15,97,13],[94,18,97,16,"result"],[94,24,97,22],[94,27,97,25,"separator"],[94,36,97,34],[94,39,97,37,"time"],[94,43,97,41],[94,46,97,44,"tzOffset"],[94,54,97,52],[94,56,97,54],[95,4,98,2],[96,4,100,2],[96,11,100,9,"result"],[96,17,100,15],[97,2,101,0],[99,2,103,0],[100,2,103,0],[100,6,103,0,"_default"],[100,14,103,0],[100,17,103,0,"exports"],[100,24,103,0],[100,25,103,0,"default"],[100,32,103,0],[100,35,104,15,"formatISO"],[100,44,104,24],[101,0,104,24],[101,3]],"functionMap":{"names":["<global>","formatISO"],"mappings":"AAA;OC0C;CD0D"}},"type":"js/module"}]}