{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":109,"column":0,"index":3510}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":109,"column":0,"index":3510}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":58,"index":58}}],"key":"qsrciYLlsSqtgV9rGEsSwSoAnCw="}},{"name":"./differenceInCalendarDays.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":59},"end":{"line":2,"column":73,"index":132}}],"key":"Ufea6TZeNzXRCj5kdHz4Ga6DCko="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.differenceInDays = differenceInDays;\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  /**\n   * The {@link differenceInDays} function options.\n   */\n\n  /**\n   * @name differenceInDays\n   * @category Day Helpers\n   * @summary Get the number of full days between the given dates.\n   *\n   * @description\n   * Get the number of full day periods between two dates. Fractional days are\n   * truncated towards zero.\n   *\n   * One \"full day\" is the distance between a local time in one day to the same\n   * local time on the next or previous day. A full day can sometimes be less than\n   * or more than 24 hours if a daylight savings change happens between two dates.\n   *\n   * To ignore DST and only measure exact 24-hour periods, use this instead:\n   * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\n   *\n   * @param laterDate - The later date\n   * @param earlierDate - The earlier date\n   * @param options - An object with options\n   *\n   * @returns The number of full days according to the local timezone\n   *\n   * @example\n   * // How many full days are between\n   * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n   * const result = differenceInDays(\n   *   new Date(2012, 6, 2, 0, 0),\n   *   new Date(2011, 6, 2, 23, 0)\n   * )\n   * //=> 365\n   *\n   * @example\n   * // How many full days are between\n   * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n   * const result = differenceInDays(\n   *   new Date(2011, 6, 3, 0, 1),\n   *   new Date(2011, 6, 2, 23, 59)\n   * )\n   * //=> 0\n   *\n   * @example\n   * // How many full days are between\n   * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n   * // Note: because local time is used, the\n   * // result will always be 92 days, even in\n   * // time zones where DST starts and the\n   * // period has only 92*24-1 hours.\n   * const result = differenceInDays(\n   *   new Date(2020, 5, 1),\n   *   new Date(2020, 2, 1)\n   * )\n   * //=> 92\n   */\n  function differenceInDays(laterDate, earlierDate, options) {\n    var _normalizeDates = (0, _$$_REQUIRE(_dependencyMap[2], \"./_lib/normalizeDates.js\").normalizeDates)(options == null ? void 0 : options.in, laterDate, earlierDate),\n      _normalizeDates2 = (0, _slicedToArray2.default)(_normalizeDates, 2),\n      laterDate_ = _normalizeDates2[0],\n      earlierDate_ = _normalizeDates2[1];\n    var sign = compareLocalAsc(laterDate_, earlierDate_);\n    var difference = Math.abs((0, _$$_REQUIRE(_dependencyMap[3], \"./differenceInCalendarDays.js\").differenceInCalendarDays)(laterDate_, earlierDate_));\n    laterDate_.setDate(laterDate_.getDate() - sign * difference);\n\n    // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n    // If so, result must be decreased by 1 in absolute value\n    var isLastDayNotFull = Number(compareLocalAsc(laterDate_, earlierDate_) === -sign);\n    var result = sign * (difference - isLastDayNotFull);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  }\n\n  // Like `compareAsc` but uses local time not UTC, which is needed\n  // for accurate equality comparisons of UTC timestamps that end up\n  // having the same representation in local time, e.g. one hour before\n  // DST ends vs. the instant that DST ends.\n  function compareLocalAsc(laterDate, earlierDate) {\n    var diff = laterDate.getFullYear() - earlierDate.getFullYear() || laterDate.getMonth() - earlierDate.getMonth() || laterDate.getDate() - earlierDate.getDate() || laterDate.getHours() - earlierDate.getHours() || laterDate.getMinutes() - earlierDate.getMinutes() || laterDate.getSeconds() - earlierDate.getSeconds() || laterDate.getMilliseconds() - earlierDate.getMilliseconds();\n    if (diff < 0) return -1;\n    if (diff > 0) return 1;\n\n    // Return 0 if diff is 0; return NaN if diff is NaN\n    return diff;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = differenceInDays;\n});","lineCount":98,"map":[[9,2,4,0],[10,0,5,0],[11,0,6,0],[13,2,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,0,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,0,27,0],[33,0,28,0],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,0,45,0],[51,0,46,0],[52,0,47,0],[53,0,48,0],[54,0,49,0],[55,0,50,0],[56,0,51,0],[57,0,52,0],[58,0,53,0],[59,0,54,0],[60,0,55,0],[61,0,56,0],[62,0,57,0],[63,0,58,0],[64,0,59,0],[65,0,60,0],[66,2,61,7],[66,11,61,16,"differenceInDays"],[66,27,61,32,"differenceInDays"],[66,28,61,33,"laterDate"],[66,37,61,42],[66,39,61,44,"earlierDate"],[66,50,61,55],[66,52,61,57,"options"],[66,59,61,64],[66,61,61,66],[67,4,62,2],[67,8,62,2,"_normalizeDates"],[67,23,62,2],[67,26,62,37],[67,30,62,37,"normalizeDates"],[67,60,62,37],[67,61,62,37,"normalizeDates"],[67,103,62,51],[67,105,63,4,"options"],[67,112,63,11],[67,132,63,4,"options"],[67,139,63,11],[67,140,63,13,"in"],[67,142,63,15],[67,144,64,4,"laterDate"],[67,153,64,13],[67,155,65,4,"earlierDate"],[67,166,66,2],[67,167,66,3],[68,6,66,3,"_normalizeDates2"],[68,22,66,3],[68,29,66,3,"_slicedToArray2"],[68,44,66,3],[68,45,66,3,"default"],[68,52,66,3],[68,54,66,3,"_normalizeDates"],[68,69,66,3],[69,6,62,9,"laterDate_"],[69,16,62,19],[69,19,62,19,"_normalizeDates2"],[69,35,62,19],[70,6,62,21,"earlierDate_"],[70,18,62,33],[70,21,62,33,"_normalizeDates2"],[70,37,62,33],[71,4,68,2],[71,8,68,8,"sign"],[71,12,68,12],[71,15,68,15,"compareLocalAsc"],[71,30,68,30],[71,31,68,31,"laterDate_"],[71,41,68,41],[71,43,68,43,"earlierDate_"],[71,55,68,55],[71,56,68,56],[72,4,69,2],[72,8,69,8,"difference"],[72,18,69,18],[72,21,69,21,"Math"],[72,25,69,25],[72,26,69,26,"abs"],[72,29,69,29],[72,30,70,4],[72,34,70,4,"differenceInCalendarDays"],[72,64,70,4],[72,65,70,4,"differenceInCalendarDays"],[72,122,70,28],[72,124,70,29,"laterDate_"],[72,134,70,39],[72,136,70,41,"earlierDate_"],[72,148,70,53],[72,149,71,2],[72,150,71,3],[73,4,73,2,"laterDate_"],[73,14,73,12],[73,15,73,13,"setDate"],[73,22,73,20],[73,23,73,21,"laterDate_"],[73,33,73,31],[73,34,73,32,"getDate"],[73,41,73,39],[73,42,73,40],[73,43,73,41],[73,46,73,44,"sign"],[73,50,73,48],[73,53,73,51,"difference"],[73,63,73,61],[73,64,73,62],[75,4,75,2],[76,4,76,2],[77,4,77,2],[77,8,77,8,"isLastDayNotFull"],[77,24,77,24],[77,27,77,27,"Number"],[77,33,77,33],[77,34,78,4,"compareLocalAsc"],[77,49,78,19],[77,50,78,20,"laterDate_"],[77,60,78,30],[77,62,78,32,"earlierDate_"],[77,74,78,44],[77,75,78,45],[77,80,78,50],[77,81,78,51,"sign"],[77,85,79,2],[77,86,79,3],[78,4,81,2],[78,8,81,8,"result"],[78,14,81,14],[78,17,81,17,"sign"],[78,21,81,21],[78,25,81,25,"difference"],[78,35,81,35],[78,38,81,38,"isLastDayNotFull"],[78,54,81,54],[78,55,81,55],[79,4,82,2],[80,4,83,2],[80,11,83,9,"result"],[80,17,83,15],[80,22,83,20],[80,23,83,21],[80,26,83,24],[80,27,83,25],[80,30,83,28,"result"],[80,36,83,34],[81,2,84,0],[83,2,86,0],[84,2,87,0],[85,2,88,0],[86,2,89,0],[87,2,90,0],[87,11,90,9,"compareLocalAsc"],[87,26,90,24,"compareLocalAsc"],[87,27,90,25,"laterDate"],[87,36,90,34],[87,38,90,36,"earlierDate"],[87,49,90,47],[87,51,90,49],[88,4,91,2],[88,8,91,8,"diff"],[88,12,91,12],[88,15,92,4,"laterDate"],[88,24,92,13],[88,25,92,14,"getFullYear"],[88,36,92,25],[88,37,92,26],[88,38,92,27],[88,41,92,30,"earlierDate"],[88,52,92,41],[88,53,92,42,"getFullYear"],[88,64,92,53],[88,65,92,54],[88,66,92,55],[88,70,93,4,"laterDate"],[88,79,93,13],[88,80,93,14,"getMonth"],[88,88,93,22],[88,89,93,23],[88,90,93,24],[88,93,93,27,"earlierDate"],[88,104,93,38],[88,105,93,39,"getMonth"],[88,113,93,47],[88,114,93,48],[88,115,93,49],[88,119,94,4,"laterDate"],[88,128,94,13],[88,129,94,14,"getDate"],[88,136,94,21],[88,137,94,22],[88,138,94,23],[88,141,94,26,"earlierDate"],[88,152,94,37],[88,153,94,38,"getDate"],[88,160,94,45],[88,161,94,46],[88,162,94,47],[88,166,95,4,"laterDate"],[88,175,95,13],[88,176,95,14,"getHours"],[88,184,95,22],[88,185,95,23],[88,186,95,24],[88,189,95,27,"earlierDate"],[88,200,95,38],[88,201,95,39,"getHours"],[88,209,95,47],[88,210,95,48],[88,211,95,49],[88,215,96,4,"laterDate"],[88,224,96,13],[88,225,96,14,"getMinutes"],[88,235,96,24],[88,236,96,25],[88,237,96,26],[88,240,96,29,"earlierDate"],[88,251,96,40],[88,252,96,41,"getMinutes"],[88,262,96,51],[88,263,96,52],[88,264,96,53],[88,268,97,4,"laterDate"],[88,277,97,13],[88,278,97,14,"getSeconds"],[88,288,97,24],[88,289,97,25],[88,290,97,26],[88,293,97,29,"earlierDate"],[88,304,97,40],[88,305,97,41,"getSeconds"],[88,315,97,51],[88,316,97,52],[88,317,97,53],[88,321,98,4,"laterDate"],[88,330,98,13],[88,331,98,14,"getMilliseconds"],[88,346,98,29],[88,347,98,30],[88,348,98,31],[88,351,98,34,"earlierDate"],[88,362,98,45],[88,363,98,46,"getMilliseconds"],[88,378,98,61],[88,379,98,62],[88,380,98,63],[89,4,100,2],[89,8,100,6,"diff"],[89,12,100,10],[89,15,100,13],[89,16,100,14],[89,18,100,16],[89,25,100,23],[89,26,100,24],[89,27,100,25],[90,4,101,2],[90,8,101,6,"diff"],[90,12,101,10],[90,15,101,13],[90,16,101,14],[90,18,101,16],[90,25,101,23],[90,26,101,24],[92,4,103,2],[93,4,104,2],[93,11,104,9,"diff"],[93,15,104,13],[94,2,105,0],[96,2,107,0],[97,2,107,0],[97,6,107,0,"_default"],[97,14,107,0],[97,17,107,0,"exports"],[97,24,107,0],[97,25,107,0,"default"],[97,32,107,0],[97,35,108,15,"differenceInDays"],[97,51,108,31],[98,0,108,31],[98,3]],"functionMap":{"names":["<global>","differenceInDays","compareLocalAsc"],"mappings":"AAA;OC4D;CDuB;AEM;CFe"}},"type":"js/module"}]}