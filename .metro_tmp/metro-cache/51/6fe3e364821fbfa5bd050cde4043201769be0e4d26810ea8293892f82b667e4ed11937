{"dependencies":[{"name":"./_lib/normalizeInterval.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"Bh7ny31Zm2tYBW0jgWrMRQn+gkY="}},{"name":"./constructFrom.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":51,"index":116}}],"key":"fe1vuD5Al7BWVRtgitxEm0VpSx0="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.eachDayOfInterval = eachDayOfInterval;\n  /**\n   * The {@link eachDayOfInterval} function options.\n   */\n\n  /**\n   * The {@link eachDayOfInterval} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the date argument,\n   * then the start interval date, and finally the end interval date. If\n   * a context function is passed, it uses the context function return type.\n   */\n\n  /**\n   * @name eachDayOfInterval\n   * @category Interval Helpers\n   * @summary Return the array of dates within the specified time interval.\n   *\n   * @description\n   * Return the array of dates within the specified time interval.\n   *\n   * @typeParam IntervalType - Interval type.\n   * @typeParam Options - Options type.\n   *\n   * @param interval - The interval.\n   * @param options - An object with options.\n   *\n   * @returns The array with starts of days from the day of the interval start to the day of the interval end\n   *\n   * @example\n   * // Each day between 6 October 2014 and 10 October 2014:\n   * const result = eachDayOfInterval({\n   *   start: new Date(2014, 9, 6),\n   *   end: new Date(2014, 9, 10)\n   * })\n   * //=> [\n   * //   Mon Oct 06 2014 00:00:00,\n   * //   Tue Oct 07 2014 00:00:00,\n   * //   Wed Oct 08 2014 00:00:00,\n   * //   Thu Oct 09 2014 00:00:00,\n   * //   Fri Oct 10 2014 00:00:00\n   * // ]\n   */\n  function eachDayOfInterval(interval, options) {\n    var _options$step;\n    var _normalizeInterval = (0, _$$_REQUIRE(_dependencyMap[0], \"./_lib/normalizeInterval.js\").normalizeInterval)(options == null ? void 0 : options.in, interval),\n      start = _normalizeInterval.start,\n      end = _normalizeInterval.end;\n    var reversed = +start > +end;\n    var endTime = reversed ? +start : +end;\n    var date = reversed ? end : start;\n    date.setHours(0, 0, 0, 0);\n    var step = (_options$step = options == null ? void 0 : options.step) != null ? _options$step : 1;\n    if (!step) return [];\n    if (step < 0) {\n      step = -step;\n      reversed = !reversed;\n    }\n    var dates = [];\n    while (+date <= endTime) {\n      dates.push((0, _$$_REQUIRE(_dependencyMap[1], \"./constructFrom.js\").constructFrom)(start, date));\n      date.setDate(date.getDate() + step);\n      date.setHours(0, 0, 0, 0);\n    }\n    return reversed ? dates.reverse() : dates;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = eachDayOfInterval;\n});","lineCount":74,"map":[[7,2,4,0],[8,0,5,0],[9,0,6,0],[11,2,8,0],[12,0,9,0],[13,0,10,0],[14,0,11,0],[15,0,12,0],[16,0,13,0],[18,2,15,0],[19,0,16,0],[20,0,17,0],[21,0,18,0],[22,0,19,0],[23,0,20,0],[24,0,21,0],[25,0,22,0],[26,0,23,0],[27,0,24,0],[28,0,25,0],[29,0,26,0],[30,0,27,0],[31,0,28,0],[32,0,29,0],[33,0,30,0],[34,0,31,0],[35,0,32,0],[36,0,33,0],[37,0,34,0],[38,0,35,0],[39,0,36,0],[40,0,37,0],[41,0,38,0],[42,0,39,0],[43,0,40,0],[44,0,41,0],[45,0,42,0],[46,0,43,0],[47,0,44,0],[48,2,45,7],[48,11,45,16,"eachDayOfInterval"],[48,28,45,33,"eachDayOfInterval"],[48,29,45,34,"interval"],[48,37,45,42],[48,39,45,44,"options"],[48,46,45,51],[48,48,45,53],[49,4,45,53],[49,8,45,53,"_options$step"],[49,21,45,53],[50,4,46,2],[50,8,46,2,"_normalizeInterval"],[50,26,46,2],[50,29,46,25],[50,33,46,25,"normalizeInterval"],[50,63,46,25],[50,64,46,25,"normalizeInterval"],[50,112,46,42],[50,114,46,43,"options"],[50,121,46,50],[50,141,46,43,"options"],[50,148,46,50],[50,149,46,52,"in"],[50,151,46,54],[50,153,46,56,"interval"],[50,161,46,64],[50,162,46,65],[51,6,46,10,"start"],[51,11,46,15],[51,14,46,15,"_normalizeInterval"],[51,32,46,15],[51,33,46,10,"start"],[51,38,46,15],[52,6,46,17,"end"],[52,9,46,20],[52,12,46,20,"_normalizeInterval"],[52,30,46,20],[52,31,46,17,"end"],[52,34,46,20],[53,4,48,2],[53,8,48,6,"reversed"],[53,16,48,14],[53,19,48,17],[53,20,48,18,"start"],[53,25,48,23],[53,28,48,26],[53,29,48,27,"end"],[53,32,48,30],[54,4,49,2],[54,8,49,8,"endTime"],[54,15,49,15],[54,18,49,18,"reversed"],[54,26,49,26],[54,29,49,29],[54,30,49,30,"start"],[54,35,49,35],[54,38,49,38],[54,39,49,39,"end"],[54,42,49,42],[55,4,50,2],[55,8,50,8,"date"],[55,12,50,12],[55,15,50,15,"reversed"],[55,23,50,23],[55,26,50,26,"end"],[55,29,50,29],[55,32,50,32,"start"],[55,37,50,37],[56,4,51,2,"date"],[56,8,51,6],[56,9,51,7,"setHours"],[56,17,51,15],[56,18,51,16],[56,19,51,17],[56,21,51,19],[56,22,51,20],[56,24,51,22],[56,25,51,23],[56,27,51,25],[56,28,51,26],[56,29,51,27],[57,4,53,2],[57,8,53,6,"step"],[57,12,53,10],[57,16,53,10,"_options$step"],[57,29,53,10],[57,32,53,13,"options"],[57,39,53,20],[57,59,53,13,"options"],[57,66,53,20],[57,67,53,22,"step"],[57,71,53,26],[57,83,53,26,"_options$step"],[57,96,53,26],[57,99,53,30],[57,100,53,31],[58,4,54,2],[58,8,54,6],[58,9,54,7,"step"],[58,13,54,11],[58,15,54,13],[58,22,54,20],[58,24,54,22],[59,4,55,2],[59,8,55,6,"step"],[59,12,55,10],[59,15,55,13],[59,16,55,14],[59,18,55,16],[60,6,56,4,"step"],[60,10,56,8],[60,13,56,11],[60,14,56,12,"step"],[60,18,56,16],[61,6,57,4,"reversed"],[61,14,57,12],[61,17,57,15],[61,18,57,16,"reversed"],[61,26,57,24],[62,4,58,2],[63,4,60,2],[63,8,60,8,"dates"],[63,13,60,13],[63,16,60,16],[63,18,60,18],[64,4,62,2],[64,11,62,9],[64,12,62,10,"date"],[64,16,62,14],[64,20,62,18,"endTime"],[64,27,62,25],[64,29,62,27],[65,6,63,4,"dates"],[65,11,63,9],[65,12,63,10,"push"],[65,16,63,14],[65,17,63,15],[65,21,63,15,"constructFrom"],[65,51,63,15],[65,52,63,15,"constructFrom"],[65,87,63,28],[65,89,63,29,"start"],[65,94,63,34],[65,96,63,36,"date"],[65,100,63,40],[65,101,63,41],[65,102,63,42],[66,6,64,4,"date"],[66,10,64,8],[66,11,64,9,"setDate"],[66,18,64,16],[66,19,64,17,"date"],[66,23,64,21],[66,24,64,22,"getDate"],[66,31,64,29],[66,32,64,30],[66,33,64,31],[66,36,64,34,"step"],[66,40,64,38],[66,41,64,39],[67,6,65,4,"date"],[67,10,65,8],[67,11,65,9,"setHours"],[67,19,65,17],[67,20,65,18],[67,21,65,19],[67,23,65,21],[67,24,65,22],[67,26,65,24],[67,27,65,25],[67,29,65,27],[67,30,65,28],[67,31,65,29],[68,4,66,2],[69,4,68,2],[69,11,68,9,"reversed"],[69,19,68,17],[69,22,68,20,"dates"],[69,27,68,25],[69,28,68,26,"reverse"],[69,35,68,33],[69,36,68,34],[69,37,68,35],[69,40,68,38,"dates"],[69,45,68,43],[70,2,69,0],[72,2,71,0],[73,2,71,0],[73,6,71,0,"_default"],[73,14,71,0],[73,17,71,0,"exports"],[73,24,71,0],[73,25,71,0,"default"],[73,32,71,0],[73,35,72,15,"eachDayOfInterval"],[73,52,72,32],[74,0,72,32],[74,3]],"functionMap":{"names":["<global>","eachDayOfInterval"],"mappings":"AAA;OC4C;CDwB"}},"type":"js/module"}]}