{"dependencies":[{"name":"./toFinite","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":15,"index":60},"end":{"line":2,"column":36,"index":81}},{"start":{"line":2,"column":15,"index":60},"end":{"line":2,"column":36,"index":81}}],"key":"cPBQNAUSHxTT+y/2zJZjTHOp1D4="}},{"name":"./toNumber","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":15,"index":98},"end":{"line":3,"column":36,"index":119}}],"key":"4DKY0bFQ4O0bhtv8chJfi7o1oVY="}},{"name":"./_baseInRange","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":18,"index":18},"end":{"line":1,"column":43,"index":43}}],"key":"X0T37qGedQf77vaCrl3U/56BVUk="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Checks if `n` is between `start` and up to, but not including, `end`. If\n   * `end` is not specified, it's set to `start` with `start` then set to `0`.\n   * If `start` is greater than `end` the params are swapped to support\n   * negative ranges.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.3.0\n   * @category Number\n   * @param {number} number The number to check.\n   * @param {number} [start=0] The start of the range.\n   * @param {number} end The end of the range.\n   * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n   * @see _.range, _.rangeRight\n   * @example\n   *\n   * _.inRange(3, 2, 4);\n   * // => true\n   *\n   * _.inRange(4, 8);\n   * // => true\n   *\n   * _.inRange(4, 2);\n   * // => false\n   *\n   * _.inRange(2, 2);\n   * // => false\n   *\n   * _.inRange(1.2, 2);\n   * // => true\n   *\n   * _.inRange(5.2, 4);\n   * // => false\n   *\n   * _.inRange(-3, -2, -6);\n   * // => true\n   */\n  function inRange(number, start, end) {\n    start = _$$_REQUIRE(_dependencyMap[0], \"./toFinite\")(start);\n    if (end === undefined) {\n      end = start;\n      start = 0;\n    } else {\n      end = _$$_REQUIRE(_dependencyMap[0], \"./toFinite\")(end);\n    }\n    number = _$$_REQUIRE(_dependencyMap[1], \"./toNumber\")(number);\n    return _$$_REQUIRE(_dependencyMap[2], \"./_baseInRange\")(number, start, end);\n  }\n  module.exports = inRange;\n});","lineCount":52,"map":[[2,2,5,0],[3,0,6,0],[4,0,7,0],[5,0,8,0],[6,0,9,0],[7,0,10,0],[8,0,11,0],[9,0,12,0],[10,0,13,0],[11,0,14,0],[12,0,15,0],[13,0,16,0],[14,0,17,0],[15,0,18,0],[16,0,19,0],[17,0,20,0],[18,0,21,0],[19,0,22,0],[20,0,23,0],[21,0,24,0],[22,0,25,0],[23,0,26,0],[24,0,27,0],[25,0,28,0],[26,0,29,0],[27,0,30,0],[28,0,31,0],[29,0,32,0],[30,0,33,0],[31,0,34,0],[32,0,35,0],[33,0,36,0],[34,0,37,0],[35,0,38,0],[36,0,39,0],[37,0,40,0],[38,0,41,0],[39,0,42,0],[40,2,43,0],[40,11,43,9,"inRange"],[40,18,43,16,"inRange"],[40,19,43,17,"number"],[40,25,43,23],[40,27,43,25,"start"],[40,32,43,30],[40,34,43,32,"end"],[40,37,43,35],[40,39,43,37],[41,4,44,2,"start"],[41,9,44,7],[41,12,44,10,"_$$_REQUIRE"],[41,23,44,10],[41,24,44,10,"_dependencyMap"],[41,38,44,10],[41,57,44,19,"start"],[41,62,44,24],[41,63,44,25],[42,4,45,2],[42,8,45,6,"end"],[42,11,45,9],[42,16,45,14,"undefined"],[42,25,45,23],[42,27,45,25],[43,6,46,4,"end"],[43,9,46,7],[43,12,46,10,"start"],[43,17,46,15],[44,6,47,4,"start"],[44,11,47,9],[44,14,47,12],[44,15,47,13],[45,4,48,2],[45,5,48,3],[45,11,48,9],[46,6,49,4,"end"],[46,9,49,7],[46,12,49,10,"_$$_REQUIRE"],[46,23,49,10],[46,24,49,10,"_dependencyMap"],[46,38,49,10],[46,57,49,19,"end"],[46,60,49,22],[46,61,49,23],[47,4,50,2],[48,4,51,2,"number"],[48,10,51,8],[48,13,51,11,"_$$_REQUIRE"],[48,24,51,11],[48,25,51,11,"_dependencyMap"],[48,39,51,11],[48,58,51,20,"number"],[48,64,51,26],[48,65,51,27],[49,4,52,2],[49,11,52,9,"_$$_REQUIRE"],[49,22,52,9],[49,23,52,9,"_dependencyMap"],[49,37,52,9],[49,60,52,21,"number"],[49,66,52,27],[49,68,52,29,"start"],[49,73,52,34],[49,75,52,36,"end"],[49,78,52,39],[49,79,52,40],[50,2,53,0],[51,2,55,0,"module"],[51,8,55,6],[51,9,55,7,"exports"],[51,16,55,14],[51,19,55,17,"inRange"],[51,26,55,24],[52,0,55,25],[52,3]],"functionMap":{"names":["<global>","inRange"],"mappings":"AAA;AC0C;CDU"}},"type":"js/module"}]}