{"dependencies":[{"name":"./toDate.js","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":94},"end":{"line":3,"column":37,"index":131}}],"key":"o2GbHlM0wxsRaLWHEC6986QcehU="}},{"name":"./constructFrom.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"fe1vuD5Al7BWVRtgitxEm0VpSx0="}},{"name":"./setMonth.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":52},"end":{"line":2,"column":41,"index":93}}],"key":"aG2EjQMA1UOBcOVkEnthNFsjhOo="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.set = set;\n  /**\n   * The {@link set} function options.\n   */\n\n  /**\n   * @name set\n   * @category Common Helpers\n   * @summary Set date values to a given date.\n   *\n   * @description\n   * Set date values to a given date.\n   *\n   * Sets time values to date from object `values`.\n   * A value is not set if it is undefined or null or doesn't exist in `values`.\n   *\n   * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n   * to use native `Date#setX` methods. If you use this function, you may not want to include the\n   * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param date - The date to be changed\n   * @param values - The date values to be set\n   * @param options - The options\n   *\n   * @returns The new date with options set\n   *\n   * @example\n   * // Transform 1 September 2014 into 20 October 2015 in a single line:\n   * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n   * //=> Tue Oct 20 2015 00:00:00\n   *\n   * @example\n   * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n   * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n   * //=> Mon Sep 01 2014 12:23:45\n   */\n  function set(date, values, options) {\n    var _date = (0, _$$_REQUIRE(_dependencyMap[0], \"./toDate.js\").toDate)(date, options == null ? void 0 : options.in);\n\n    // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n    if (isNaN(+_date)) return (0, _$$_REQUIRE(_dependencyMap[1], \"./constructFrom.js\").constructFrom)((options == null ? void 0 : options.in) || date, NaN);\n    if (values.year != null) _date.setFullYear(values.year);\n    if (values.month != null) _date = (0, _$$_REQUIRE(_dependencyMap[2], \"./setMonth.js\").setMonth)(_date, values.month);\n    if (values.date != null) _date.setDate(values.date);\n    if (values.hours != null) _date.setHours(values.hours);\n    if (values.minutes != null) _date.setMinutes(values.minutes);\n    if (values.seconds != null) _date.setSeconds(values.seconds);\n    if (values.milliseconds != null) _date.setMilliseconds(values.milliseconds);\n    return _date;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = set;\n});","lineCount":62,"map":[[7,2,5,0],[8,0,6,0],[9,0,7,0],[11,2,9,0],[12,0,10,0],[13,0,11,0],[14,0,12,0],[15,0,13,0],[16,0,14,0],[17,0,15,0],[18,0,16,0],[19,0,17,0],[20,0,18,0],[21,0,19,0],[22,0,20,0],[23,0,21,0],[24,0,22,0],[25,0,23,0],[26,0,24,0],[27,0,25,0],[28,0,26,0],[29,0,27,0],[30,0,28,0],[31,0,29,0],[32,0,30,0],[33,0,31,0],[34,0,32,0],[35,0,33,0],[36,0,34,0],[37,0,35,0],[38,0,36,0],[39,0,37,0],[40,0,38,0],[41,0,39,0],[42,0,40,0],[43,0,41,0],[44,0,42,0],[45,2,43,7],[45,11,43,16,"set"],[45,14,43,19,"set"],[45,15,43,20,"date"],[45,19,43,24],[45,21,43,26,"values"],[45,27,43,32],[45,29,43,34,"options"],[45,36,43,41],[45,38,43,43],[46,4,44,2],[46,8,44,6,"_date"],[46,13,44,11],[46,16,44,14],[46,20,44,14,"toDate"],[46,50,44,14],[46,51,44,14,"toDate"],[46,72,44,20],[46,74,44,21,"date"],[46,78,44,25],[46,80,44,27,"options"],[46,87,44,34],[46,107,44,27,"options"],[46,114,44,34],[46,115,44,36,"in"],[46,117,44,38],[46,118,44,39],[48,4,46,2],[49,4,47,2],[49,8,47,6,"isNaN"],[49,13,47,11],[49,14,47,12],[49,15,47,13,"_date"],[49,20,47,18],[49,21,47,19],[49,23,47,21],[49,30,47,28],[49,34,47,28,"constructFrom"],[49,64,47,28],[49,65,47,28,"constructFrom"],[49,100,47,41],[49,102,47,42],[49,103,47,42,"options"],[49,110,47,49],[49,130,47,42,"options"],[49,137,47,49],[49,138,47,51,"in"],[49,140,47,53],[49,145,47,57,"date"],[49,149,47,61],[49,151,47,63,"NaN"],[49,154,47,66],[49,155,47,67],[50,4,49,2],[50,8,49,6,"values"],[50,14,49,12],[50,15,49,13,"year"],[50,19,49,17],[50,23,49,21],[50,27,49,25],[50,29,49,27,"_date"],[50,34,49,32],[50,35,49,33,"setFullYear"],[50,46,49,44],[50,47,49,45,"values"],[50,53,49,51],[50,54,49,52,"year"],[50,58,49,56],[50,59,49,57],[51,4,50,2],[51,8,50,6,"values"],[51,14,50,12],[51,15,50,13,"month"],[51,20,50,18],[51,24,50,22],[51,28,50,26],[51,30,50,28,"_date"],[51,35,50,33],[51,38,50,36],[51,42,50,36,"setMonth"],[51,72,50,36],[51,73,50,36,"setMonth"],[51,98,50,44],[51,100,50,45,"_date"],[51,105,50,50],[51,107,50,52,"values"],[51,113,50,58],[51,114,50,59,"month"],[51,119,50,64],[51,120,50,65],[52,4,51,2],[52,8,51,6,"values"],[52,14,51,12],[52,15,51,13,"date"],[52,19,51,17],[52,23,51,21],[52,27,51,25],[52,29,51,27,"_date"],[52,34,51,32],[52,35,51,33,"setDate"],[52,42,51,40],[52,43,51,41,"values"],[52,49,51,47],[52,50,51,48,"date"],[52,54,51,52],[52,55,51,53],[53,4,52,2],[53,8,52,6,"values"],[53,14,52,12],[53,15,52,13,"hours"],[53,20,52,18],[53,24,52,22],[53,28,52,26],[53,30,52,28,"_date"],[53,35,52,33],[53,36,52,34,"setHours"],[53,44,52,42],[53,45,52,43,"values"],[53,51,52,49],[53,52,52,50,"hours"],[53,57,52,55],[53,58,52,56],[54,4,53,2],[54,8,53,6,"values"],[54,14,53,12],[54,15,53,13,"minutes"],[54,22,53,20],[54,26,53,24],[54,30,53,28],[54,32,53,30,"_date"],[54,37,53,35],[54,38,53,36,"setMinutes"],[54,48,53,46],[54,49,53,47,"values"],[54,55,53,53],[54,56,53,54,"minutes"],[54,63,53,61],[54,64,53,62],[55,4,54,2],[55,8,54,6,"values"],[55,14,54,12],[55,15,54,13,"seconds"],[55,22,54,20],[55,26,54,24],[55,30,54,28],[55,32,54,30,"_date"],[55,37,54,35],[55,38,54,36,"setSeconds"],[55,48,54,46],[55,49,54,47,"values"],[55,55,54,53],[55,56,54,54,"seconds"],[55,63,54,61],[55,64,54,62],[56,4,55,2],[56,8,55,6,"values"],[56,14,55,12],[56,15,55,13,"milliseconds"],[56,27,55,25],[56,31,55,29],[56,35,55,33],[56,37,55,35,"_date"],[56,42,55,40],[56,43,55,41,"setMilliseconds"],[56,58,55,56],[56,59,55,57,"values"],[56,65,55,63],[56,66,55,64,"milliseconds"],[56,78,55,76],[56,79,55,77],[57,4,57,2],[57,11,57,9,"_date"],[57,16,57,14],[58,2,58,0],[60,2,60,0],[61,2,60,0],[61,6,60,0,"_default"],[61,14,60,0],[61,17,60,0,"exports"],[61,24,60,0],[61,25,60,0,"default"],[61,32,60,0],[61,35,61,15,"set"],[61,38,61,18],[62,0,61,18],[62,3]],"functionMap":{"names":["<global>","set"],"mappings":"AAA;OC0C;CDe"}},"type":"js/module"}]}