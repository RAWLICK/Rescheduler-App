{"dependencies":[{"name":"./_lib/format/lightFormatters.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":67,"index":67}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":67,"index":67}}],"key":"/Z6HPFpCm6XWkxUQsV3wOuHudag="}},{"name":"./toDate.js","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":108},"end":{"line":3,"column":37,"index":145}}],"key":"o2GbHlM0wxsRaLWHEC6986QcehU="}},{"name":"./isValid.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":68},"end":{"line":2,"column":39,"index":107}}],"key":"6gy6KQe0G2A6IbhZZsiQ4oGii58="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.lightFormat = lightFormat;\n  Object.defineProperty(exports, \"lightFormatters\", {\n    enumerable: true,\n    get: function get() {\n      return _$$_REQUIRE(_dependencyMap[0], \"./_lib/format/lightFormatters.js\").lightFormatters;\n    }\n  });\n  // Rexports of internal for libraries to use.\n  // See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\n\n  // This RegExp consists of three parts separated by `|`:\n  // - (\\w)\\1* matches any sequences of the same letter\n  // - '' matches two quote characters in a row\n  // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n  //   except a single quote symbol, which ends the sequence.\n  //   Two quote characters do not end the sequence.\n  //   If there is no matching single quote\n  //   then the sequence will continue until the end of the string.\n  // - . matches any single character unmatched by previous parts of the RegExps\n  var formattingTokensRegExp = /(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n  var escapedStringRegExp = /^'([^]*?)'?$/;\n  var doubleQuoteRegExp = /''/g;\n  var unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\n  /**\n   * @private\n   */\n\n  /**\n   * @name lightFormat\n   * @category Common Helpers\n   * @summary Format the date.\n   *\n   * @description\n   * Return the formatted date string in the given format. Unlike `format`,\n   * `lightFormat` doesn't use locales and outputs date using the most popular tokens.\n   *\n   * > ⚠️ Please note that the `lightFormat` tokens differ from Moment.js and other libraries.\n   * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n   *\n   * The characters wrapped between two single quotes characters (') are escaped.\n   * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n   *\n   * Format of the string is based on Unicode Technical Standard #35:\n   * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n   *\n   * Accepted patterns:\n   * | Unit                            | Pattern | Result examples                   |\n   * |---------------------------------|---------|-----------------------------------|\n   * | AM, PM                          | a..aaa  | AM, PM                            |\n   * |                                 | aaaa    | a.m., p.m.                        |\n   * |                                 | aaaaa   | a, p                              |\n   * | Calendar year                   | y       | 44, 1, 1900, 2017                 |\n   * |                                 | yy      | 44, 01, 00, 17                    |\n   * |                                 | yyy     | 044, 001, 000, 017                |\n   * |                                 | yyyy    | 0044, 0001, 1900, 2017            |\n   * | Month (formatting)              | M       | 1, 2, ..., 12                     |\n   * |                                 | MM      | 01, 02, ..., 12                   |\n   * | Day of month                    | d       | 1, 2, ..., 31                     |\n   * |                                 | dd      | 01, 02, ..., 31                   |\n   * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |\n   * |                                 | hh      | 01, 02, ..., 11, 12               |\n   * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |\n   * |                                 | HH      | 00, 01, 02, ..., 23               |\n   * | Minute                          | m       | 0, 1, ..., 59                     |\n   * |                                 | mm      | 00, 01, ..., 59                   |\n   * | Second                          | s       | 0, 1, ..., 59                     |\n   * |                                 | ss      | 00, 01, ..., 59                   |\n   * | Fraction of second              | S       | 0, 1, ..., 9                      |\n   * |                                 | SS      | 00, 01, ..., 99                   |\n   * |                                 | SSS     | 000, 001, ..., 999                |\n   * |                                 | SSSS    | ...                               |\n   *\n   * @param date - The original date\n   * @param format - The string of tokens\n   *\n   * @returns The formatted date string\n   *\n   * @throws `Invalid time value` if the date is invalid\n   * @throws format string contains an unescaped latin alphabet character\n   *\n   * @example\n   * const result = lightFormat(new Date(2014, 1, 11), 'yyyy-MM-dd')\n   * //=> '2014-02-11'\n   */\n  function lightFormat(date, formatStr) {\n    var date_ = (0, _$$_REQUIRE(_dependencyMap[1], \"./toDate.js\").toDate)(date);\n    if (!(0, _$$_REQUIRE(_dependencyMap[2], \"./isValid.js\").isValid)(date_)) {\n      throw new RangeError(\"Invalid time value\");\n    }\n    var tokens = formatStr.match(formattingTokensRegExp);\n\n    // The only case when formattingTokensRegExp doesn't match the string is when it's empty\n    if (!tokens) return \"\";\n    var result = tokens.map(function (substring) {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return \"'\";\n      }\n      var firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return cleanEscapedString(substring);\n      }\n      var formatter = _$$_REQUIRE(_dependencyMap[0], \"./_lib/format/lightFormatters.js\").lightFormatters[firstCharacter];\n      if (formatter) {\n        return formatter(date_, substring);\n      }\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\"Format string contains an unescaped latin alphabet character `\" + firstCharacter + \"`\");\n      }\n      return substring;\n    }).join(\"\");\n    return result;\n  }\n  function cleanEscapedString(input) {\n    var matches = input.match(escapedStringRegExp);\n    if (!matches) return input;\n    return matches[1].replace(doubleQuoteRegExp, \"'\");\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = lightFormat;\n});","lineCount":128,"map":[[13,2,5,0],[14,2,6,0],[16,2,9,0],[17,2,10,0],[18,2,11,0],[19,2,12,0],[20,2,13,0],[21,2,14,0],[22,2,15,0],[23,2,16,0],[24,2,17,0],[25,2,18,0],[25,6,18,6,"formattingTokensRegExp"],[25,28,18,28],[25,31,18,31],[25,63,18,63],[26,2,20,0],[26,6,20,6,"escapedStringRegExp"],[26,25,20,25],[26,28,20,28],[26,42,20,42],[27,2,21,0],[27,6,21,6,"doubleQuoteRegExp"],[27,23,21,23],[27,26,21,26],[27,31,21,31],[28,2,22,0],[28,6,22,6,"unescapedLatinCharacterRegExp"],[28,35,22,35],[28,38,22,38],[28,48,22,48],[30,2,24,0],[31,0,25,0],[32,0,26,0],[34,2,28,0],[35,0,29,0],[36,0,30,0],[37,0,31,0],[38,0,32,0],[39,0,33,0],[40,0,34,0],[41,0,35,0],[42,0,36,0],[43,0,37,0],[44,0,38,0],[45,0,39,0],[46,0,40,0],[47,0,41,0],[48,0,42,0],[49,0,43,0],[50,0,44,0],[51,0,45,0],[52,0,46,0],[53,0,47,0],[54,0,48,0],[55,0,49,0],[56,0,50,0],[57,0,51,0],[58,0,52,0],[59,0,53,0],[60,0,54,0],[61,0,55,0],[62,0,56,0],[63,0,57,0],[64,0,58,0],[65,0,59,0],[66,0,60,0],[67,0,61,0],[68,0,62,0],[69,0,63,0],[70,0,64,0],[71,0,65,0],[72,0,66,0],[73,0,67,0],[74,0,68,0],[75,0,69,0],[76,0,70,0],[77,0,71,0],[78,0,72,0],[79,0,73,0],[80,0,74,0],[81,0,75,0],[82,0,76,0],[83,0,77,0],[84,0,78,0],[85,0,79,0],[86,0,80,0],[87,0,81,0],[88,0,82,0],[89,0,83,0],[90,0,84,0],[91,2,85,7],[91,11,85,16,"lightFormat"],[91,22,85,27,"lightFormat"],[91,23,85,28,"date"],[91,27,85,32],[91,29,85,34,"formatStr"],[91,38,85,43],[91,40,85,45],[92,4,86,2],[92,8,86,8,"date_"],[92,13,86,13],[92,16,86,16],[92,20,86,16,"toDate"],[92,50,86,16],[92,51,86,16,"toDate"],[92,72,86,22],[92,74,86,23,"date"],[92,78,86,27],[92,79,86,28],[93,4,88,2],[93,8,88,6],[93,9,88,7],[93,13,88,7,"isValid"],[93,43,88,7],[93,44,88,7,"isValid"],[93,67,88,14],[93,69,88,15,"date_"],[93,74,88,20],[93,75,88,21],[93,77,88,23],[94,6,89,4],[94,12,89,10],[94,16,89,14,"RangeError"],[94,26,89,24],[94,27,89,25],[94,47,89,45],[94,48,89,46],[95,4,90,2],[96,4,92,2],[96,8,92,8,"tokens"],[96,14,92,14],[96,17,92,17,"formatStr"],[96,26,92,26],[96,27,92,27,"match"],[96,32,92,32],[96,33,92,33,"formattingTokensRegExp"],[96,55,92,55],[96,56,92,56],[98,4,94,2],[99,4,95,2],[99,8,95,6],[99,9,95,7,"tokens"],[99,15,95,13],[99,17,95,15],[99,24,95,22],[99,26,95,24],[100,4,97,2],[100,8,97,8,"result"],[100,14,97,14],[100,17,97,17,"tokens"],[100,23,97,23],[100,24,98,5,"map"],[100,27,98,8],[100,28,98,9],[100,38,98,10,"substring"],[100,47,98,19],[100,49,98,24],[101,6,99,6],[102,6,100,6],[102,10,100,10,"substring"],[102,19,100,19],[102,24,100,24],[102,28,100,28],[102,30,100,30],[103,8,101,8],[103,15,101,15],[103,18,101,18],[104,6,102,6],[105,6,104,6],[105,10,104,12,"firstCharacter"],[105,24,104,26],[105,27,104,29,"substring"],[105,36,104,38],[105,37,104,39],[105,38,104,40],[105,39,104,41],[106,6,105,6],[106,10,105,10,"firstCharacter"],[106,24,105,24],[106,29,105,29],[106,32,105,32],[106,34,105,34],[107,8,106,8],[107,15,106,15,"cleanEscapedString"],[107,33,106,33],[107,34,106,34,"substring"],[107,43,106,43],[107,44,106,44],[108,6,107,6],[109,6,109,6],[109,10,109,12,"formatter"],[109,19,109,21],[109,22,109,24,"lightFormatters"],[109,52,109,24],[109,53,109,24,"lightFormatters"],[109,104,109,39],[109,105,109,40,"firstCharacter"],[109,119,109,54],[109,120,109,55],[110,6,110,6],[110,10,110,10,"formatter"],[110,19,110,19],[110,21,110,21],[111,8,111,8],[111,15,111,15,"formatter"],[111,24,111,24],[111,25,111,25,"date_"],[111,30,111,30],[111,32,111,32,"substring"],[111,41,111,41],[111,42,111,42],[112,6,112,6],[113,6,114,6],[113,10,114,10,"firstCharacter"],[113,24,114,24],[113,25,114,25,"match"],[113,30,114,30],[113,31,114,31,"unescapedLatinCharacterRegExp"],[113,60,114,60],[113,61,114,61],[113,63,114,63],[114,8,115,8],[114,14,115,14],[114,18,115,18,"RangeError"],[114,28,115,28],[114,29,116,10],[114,93,116,74],[114,96,117,12,"firstCharacter"],[114,110,117,26],[114,113,118,12],[114,116,119,8],[114,117,119,9],[115,6,120,6],[116,6,122,6],[116,13,122,13,"substring"],[116,22,122,22],[117,4,123,4],[117,5,123,5],[117,6,123,6],[117,7,124,5,"join"],[117,11,124,9],[117,12,124,10],[117,14,124,12],[117,15,124,13],[118,4,126,2],[118,11,126,9,"result"],[118,17,126,15],[119,2,127,0],[120,2,129,0],[120,11,129,9,"cleanEscapedString"],[120,29,129,27,"cleanEscapedString"],[120,30,129,28,"input"],[120,35,129,33],[120,37,129,35],[121,4,130,2],[121,8,130,8,"matches"],[121,15,130,15],[121,18,130,18,"input"],[121,23,130,23],[121,24,130,24,"match"],[121,29,130,29],[121,30,130,30,"escapedStringRegExp"],[121,49,130,49],[121,50,130,50],[122,4,131,2],[122,8,131,6],[122,9,131,7,"matches"],[122,16,131,14],[122,18,131,16],[122,25,131,23,"input"],[122,30,131,28],[123,4,132,2],[123,11,132,9,"matches"],[123,18,132,16],[123,19,132,17],[123,20,132,18],[123,21,132,19],[123,22,132,20,"replace"],[123,29,132,27],[123,30,132,28,"doubleQuoteRegExp"],[123,47,132,45],[123,49,132,47],[123,52,132,50],[123,53,132,51],[124,2,133,0],[126,2,135,0],[127,2,135,0],[127,6,135,0,"_default"],[127,14,135,0],[127,17,135,0,"exports"],[127,24,135,0],[127,25,135,0,"default"],[127,32,135,0],[127,35,136,15,"lightFormat"],[127,46,136,26],[128,0,136,26],[128,3]],"functionMap":{"names":["<global>","lightFormat","tokens.map$argument_0","cleanEscapedString"],"mappings":"AAA;OCoF;SCa;KDyB;CDI;AGE;CHI"}},"type":"js/module"}]}