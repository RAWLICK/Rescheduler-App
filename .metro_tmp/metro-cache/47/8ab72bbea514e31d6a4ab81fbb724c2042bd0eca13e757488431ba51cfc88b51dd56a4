{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":67,"column":0,"index":2421}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":67,"column":0,"index":2421}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"./toDate.js","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":145},"end":{"line":3,"column":37,"index":182}},{"start":{"line":3,"column":0,"index":145},"end":{"line":3,"column":37,"index":182}},{"start":{"line":3,"column":0,"index":145},"end":{"line":3,"column":37,"index":182}},{"start":{"line":3,"column":0,"index":145},"end":{"line":3,"column":37,"index":182}}],"key":"o2GbHlM0wxsRaLWHEC6986QcehU="}},{"name":"./_lib/getTimezoneOffsetInMilliseconds.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":92,"index":92}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":92,"index":92}}],"key":"DaTWSp7W8IZ8bPvM94IzOSvNQSs="}},{"name":"./constants.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":93},"end":{"line":2,"column":51,"index":144}}],"key":"0CDp4OIxpxzHKYXO2c/E0Fm3H6U="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.getOverlappingDaysInIntervals = getOverlappingDaysInIntervals;\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/slicedToArray\"));\n  /**\n   * @name getOverlappingDaysInIntervals\n   * @category Interval Helpers\n   * @summary Get the number of days that overlap in two time intervals\n   *\n   * @description\n   * Get the number of days that overlap in two time intervals. It uses the time\n   * between dates to calculate the number of days, rounding it up to include\n   * partial days.\n   *\n   * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will\n   * result in 1.\n   *\n   * @param intervalLeft - The first interval to compare.\n   * @param intervalRight - The second interval to compare.\n   * @param options - An object with options\n   *\n   * @returns The number of days that overlap in two time intervals\n   *\n   * @example\n   * // For overlapping time intervals adds 1 for each started overlapping day:\n   * getOverlappingDaysInIntervals(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n   * )\n   * //=> 3\n   *\n   * @example\n   * // For non-overlapping time intervals returns 0:\n   * getOverlappingDaysInIntervals(\n   *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n   *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n   * )\n   * //=> 0\n   */\n\n  function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {\n    var _sort = [+(0, _$$_REQUIRE(_dependencyMap[2], \"./toDate.js\").toDate)(intervalLeft.start), +(0, _$$_REQUIRE(_dependencyMap[2], \"./toDate.js\").toDate)(intervalLeft.end)].sort(function (a, b) {\n        return a - b;\n      }),\n      _sort2 = (0, _slicedToArray2.default)(_sort, 2),\n      leftStart = _sort2[0],\n      leftEnd = _sort2[1];\n    var _sort3 = [+(0, _$$_REQUIRE(_dependencyMap[2], \"./toDate.js\").toDate)(intervalRight.start), +(0, _$$_REQUIRE(_dependencyMap[2], \"./toDate.js\").toDate)(intervalRight.end)].sort(function (a, b) {\n        return a - b;\n      }),\n      _sort4 = (0, _slicedToArray2.default)(_sort3, 2),\n      rightStart = _sort4[0],\n      rightEnd = _sort4[1];\n\n    // Prevent NaN result if intervals don't overlap at all.\n    var isOverlapping = leftStart < rightEnd && rightStart < leftEnd;\n    if (!isOverlapping) return 0;\n\n    // Remove the timezone offset to negate the DST effect on calculations.\n    var overlapLeft = rightStart < leftStart ? leftStart : rightStart;\n    var left = overlapLeft - (0, _$$_REQUIRE(_dependencyMap[3], \"./_lib/getTimezoneOffsetInMilliseconds.js\").getTimezoneOffsetInMilliseconds)(overlapLeft);\n    var overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;\n    var right = overlapRight - (0, _$$_REQUIRE(_dependencyMap[3], \"./_lib/getTimezoneOffsetInMilliseconds.js\").getTimezoneOffsetInMilliseconds)(overlapRight);\n\n    // Ceil the number to include partial days too.\n    return Math.ceil((right - left) / _$$_REQUIRE(_dependencyMap[4], \"./constants.js\").millisecondsInDay);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = getOverlappingDaysInIntervals;\n});","lineCount":75,"map":[[9,2,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,0,29,0],[34,0,30,0],[35,0,31,0],[36,0,32,0],[37,0,33,0],[38,0,34,0],[39,0,35,0],[40,0,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[45,2,41,7],[45,11,41,16,"getOverlappingDaysInIntervals"],[45,40,41,45,"getOverlappingDaysInIntervals"],[45,41,41,46,"intervalLeft"],[45,53,41,58],[45,55,41,60,"intervalRight"],[45,68,41,73],[45,70,41,75],[46,4,42,2],[46,8,42,2,"_sort"],[46,13,42,2],[46,16,42,31],[46,17,43,4],[46,18,43,5],[46,22,43,5,"toDate"],[46,52,43,5],[46,53,43,5,"toDate"],[46,74,43,11],[46,76,43,12,"intervalLeft"],[46,88,43,24],[46,89,43,25,"start"],[46,94,43,30],[46,95,43,31],[46,97,44,4],[46,98,44,5],[46,102,44,5,"toDate"],[46,132,44,5],[46,133,44,5,"toDate"],[46,154,44,11],[46,156,44,12,"intervalLeft"],[46,168,44,24],[46,169,44,25,"end"],[46,172,44,28],[46,173,44,29],[46,174,45,3],[46,175,45,4,"sort"],[46,179,45,8],[46,180,45,9],[46,190,45,10,"a"],[46,191,45,11],[46,193,45,13,"b"],[46,194,45,14],[47,8,45,14],[47,15,45,19,"a"],[47,16,45,20],[47,19,45,23,"b"],[47,20,45,24],[48,6,45,24],[48,8,45,25],[49,6,45,25,"_sort2"],[49,12,45,25],[49,19,45,25,"_slicedToArray2"],[49,34,45,25],[49,35,45,25,"default"],[49,42,45,25],[49,44,45,25,"_sort"],[49,49,45,25],[50,6,42,9,"leftStart"],[50,15,42,18],[50,18,42,18,"_sort2"],[50,24,42,18],[51,6,42,20,"leftEnd"],[51,13,42,27],[51,16,42,27,"_sort2"],[51,22,42,27],[52,4,46,2],[52,8,46,2,"_sort3"],[52,14,46,2],[52,17,46,33],[52,18,47,4],[52,19,47,5],[52,23,47,5,"toDate"],[52,53,47,5],[52,54,47,5,"toDate"],[52,75,47,11],[52,77,47,12,"intervalRight"],[52,90,47,25],[52,91,47,26,"start"],[52,96,47,31],[52,97,47,32],[52,99,48,4],[52,100,48,5],[52,104,48,5,"toDate"],[52,134,48,5],[52,135,48,5,"toDate"],[52,156,48,11],[52,158,48,12,"intervalRight"],[52,171,48,25],[52,172,48,26,"end"],[52,175,48,29],[52,176,48,30],[52,177,49,3],[52,178,49,4,"sort"],[52,182,49,8],[52,183,49,9],[52,193,49,10,"a"],[52,194,49,11],[52,196,49,13,"b"],[52,197,49,14],[53,8,49,14],[53,15,49,19,"a"],[53,16,49,20],[53,19,49,23,"b"],[53,20,49,24],[54,6,49,24],[54,8,49,25],[55,6,49,25,"_sort4"],[55,12,49,25],[55,19,49,25,"_slicedToArray2"],[55,34,49,25],[55,35,49,25,"default"],[55,42,49,25],[55,44,49,25,"_sort3"],[55,50,49,25],[56,6,46,9,"rightStart"],[56,16,46,19],[56,19,46,19,"_sort4"],[56,25,46,19],[57,6,46,21,"rightEnd"],[57,14,46,29],[57,17,46,29,"_sort4"],[57,23,46,29],[59,4,51,2],[60,4,52,2],[60,8,52,8,"isOverlapping"],[60,21,52,21],[60,24,52,24,"leftStart"],[60,33,52,33],[60,36,52,36,"rightEnd"],[60,44,52,44],[60,48,52,48,"rightStart"],[60,58,52,58],[60,61,52,61,"leftEnd"],[60,68,52,68],[61,4,53,2],[61,8,53,6],[61,9,53,7,"isOverlapping"],[61,22,53,20],[61,24,53,22],[61,31,53,29],[61,32,53,30],[63,4,55,2],[64,4,56,2],[64,8,56,8,"overlapLeft"],[64,19,56,19],[64,22,56,22,"rightStart"],[64,32,56,32],[64,35,56,35,"leftStart"],[64,44,56,44],[64,47,56,47,"leftStart"],[64,56,56,56],[64,59,56,59,"rightStart"],[64,69,56,69],[65,4,57,2],[65,8,57,8,"left"],[65,12,57,12],[65,15,57,15,"overlapLeft"],[65,26,57,26],[65,29,57,29],[65,33,57,29,"getTimezoneOffsetInMilliseconds"],[65,63,57,29],[65,64,57,29,"getTimezoneOffsetInMilliseconds"],[65,140,57,60],[65,142,57,61,"overlapLeft"],[65,153,57,72],[65,154,57,73],[66,4,58,2],[66,8,58,8,"overlapRight"],[66,20,58,20],[66,23,58,23,"rightEnd"],[66,31,58,31],[66,34,58,34,"leftEnd"],[66,41,58,41],[66,44,58,44,"leftEnd"],[66,51,58,51],[66,54,58,54,"rightEnd"],[66,62,58,62],[67,4,59,2],[67,8,59,8,"right"],[67,13,59,13],[67,16,59,16,"overlapRight"],[67,28,59,28],[67,31,59,31],[67,35,59,31,"getTimezoneOffsetInMilliseconds"],[67,65,59,31],[67,66,59,31,"getTimezoneOffsetInMilliseconds"],[67,142,59,62],[67,144,59,63,"overlapRight"],[67,156,59,75],[67,157,59,76],[69,4,61,2],[70,4,62,2],[70,11,62,9,"Math"],[70,15,62,13],[70,16,62,14,"ceil"],[70,20,62,18],[70,21,62,19],[70,22,62,20,"right"],[70,27,62,25],[70,30,62,28,"left"],[70,34,62,32],[70,38,62,36,"millisecondsInDay"],[70,68,62,36],[70,69,62,36,"millisecondsInDay"],[70,104,62,53],[70,105,62,54],[71,2,63,0],[73,2,65,0],[74,2,65,0],[74,6,65,0,"_default"],[74,14,65,0],[74,17,65,0,"exports"],[74,24,65,0],[74,25,65,0,"default"],[74,32,65,0],[74,35,66,15,"getOverlappingDaysInIntervals"],[74,64,66,44],[75,0,66,44],[75,3]],"functionMap":{"names":["<global>","getOverlappingDaysInIntervals","sort$argument_0"],"mappings":"AAA;OCwC;SCI,eD;SCI,eD;CDc"}},"type":"js/module"}]}