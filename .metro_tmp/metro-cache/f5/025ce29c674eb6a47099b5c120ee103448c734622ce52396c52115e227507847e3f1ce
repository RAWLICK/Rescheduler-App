{"dependencies":[{"name":"@motionone/utils","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":12,"index":27},"end":{"line":3,"column":39,"index":54}}],"key":"xckskIHee+cZzkqmegwsQoOgUg0="}},{"name":"../spring/index.cjs.js","data":{"asyncType":null,"locs":[{"start":{"line":5,"column":12,"index":120},"end":{"line":5,"column":45,"index":153}}],"key":"ZEQvBNh1cfu+l/AEFykx4gz0Qk4="}},{"name":"../utils/velocity.cjs.js","data":{"asyncType":null,"locs":[{"start":{"line":4,"column":15,"index":71},"end":{"line":4,"column":50,"index":106}}],"key":"z9jldBJbneEXCbsmO3LBG0553Do="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var glide = function glide(_ref) {\n    var _ref$from = _ref.from,\n      from = _ref$from === void 0 ? 0 : _ref$from,\n      _ref$velocity = _ref.velocity,\n      velocity$1 = _ref$velocity === void 0 ? 0.0 : _ref$velocity,\n      _ref$power = _ref.power,\n      power = _ref$power === void 0 ? 0.8 : _ref$power,\n      _ref$decay = _ref.decay,\n      decay = _ref$decay === void 0 ? 0.325 : _ref$decay,\n      bounceDamping = _ref.bounceDamping,\n      bounceStiffness = _ref.bounceStiffness,\n      changeTarget = _ref.changeTarget,\n      min = _ref.min,\n      max = _ref.max,\n      _ref$restDistance = _ref.restDistance,\n      restDistance = _ref$restDistance === void 0 ? 0.5 : _ref$restDistance,\n      restSpeed = _ref.restSpeed;\n    decay = _$$_REQUIRE(_dependencyMap[0], \"@motionone/utils\").time.ms(decay);\n    var state = {\n      hasReachedTarget: false,\n      done: false,\n      current: from,\n      target: from\n    };\n    var isOutOfBounds = function isOutOfBounds(v) {\n      return min !== undefined && v < min || max !== undefined && v > max;\n    };\n    var nearestBoundary = function nearestBoundary(v) {\n      if (min === undefined) return max;\n      if (max === undefined) return min;\n      return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    var amplitude = power * velocity$1;\n    var ideal = from + amplitude;\n    var target = changeTarget === undefined ? ideal : changeTarget(ideal);\n    state.target = target;\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal) amplitude = target - from;\n    var calcDelta = function calcDelta(t) {\n      return -amplitude * Math.exp(-t / decay);\n    };\n    var calcLatest = function calcLatest(t) {\n      return target + calcDelta(t);\n    };\n    var applyFriction = function applyFriction(t) {\n      var delta = calcDelta(t);\n      var latest = calcLatest(t);\n      state.done = Math.abs(delta) <= restDistance;\n      state.current = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */\n    var timeReachedBoundary;\n    var spring;\n    var checkCatchBoundary = function checkCatchBoundary(t) {\n      if (!isOutOfBounds(state.current)) return;\n      timeReachedBoundary = t;\n      spring = _$$_REQUIRE(_dependencyMap[1], \"../spring/index.cjs.js\").spring({\n        from: state.current,\n        to: nearestBoundary(state.current),\n        velocity: _$$_REQUIRE(_dependencyMap[2], \"../utils/velocity.cjs.js\").calcGeneratorVelocity(calcLatest, t, state.current),\n        // TODO: This should be passing * 1000\n        damping: bounceDamping,\n        stiffness: bounceStiffness,\n        restDistance: restDistance,\n        restSpeed: restSpeed\n      });\n    };\n    checkCatchBoundary(0);\n    return function (t) {\n      /**\n       * We need to resolve the friction to figure out if we need a\n       * spring but we don't want to do this twice per frame. So here\n       * we flag if we updated for this frame and later if we did\n       * we can skip doing it again.\n       */\n      var hasUpdatedFrame = false;\n      if (!spring && timeReachedBoundary === undefined) {\n        hasUpdatedFrame = true;\n        applyFriction(t);\n        checkCatchBoundary(t);\n      }\n      /**\n       * If we have a spring and the provided t is beyond the moment the friction\n       * animation crossed the min/max boundary, use the spring.\n       */\n      if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n        state.hasReachedTarget = true;\n        return spring(t - timeReachedBoundary);\n      } else {\n        state.hasReachedTarget = false;\n        !hasUpdatedFrame && applyFriction(t);\n        return state;\n      }\n    };\n  };\n  exports.glide = glide;\n});","lineCount":108,"map":[[2,2,1,0],[2,14,1,12],[4,2,7,0],[4,6,7,6,"glide"],[4,11,7,11],[4,14,7,14],[4,23,7,6,"glide"],[4,28,7,11,"glide"],[4,29,7,11,"_ref"],[4,33,7,11],[4,35,7,176],[5,4,7,176],[5,8,7,176,"_ref$from"],[5,17,7,176],[5,20,7,176,"_ref"],[5,24,7,176],[5,25,7,17,"from"],[5,29,7,21],[6,6,7,17,"from"],[6,10,7,21],[6,13,7,21,"_ref$from"],[6,22,7,21],[6,36,7,24],[6,37,7,25],[6,40,7,25,"_ref$from"],[6,49,7,25],[7,6,7,25,"_ref$velocity"],[7,19,7,25],[7,22,7,25,"_ref"],[7,26,7,25],[7,27,7,27,"velocity"],[7,35,7,35],[8,6,7,37,"velocity$1"],[8,16,7,47],[8,19,7,47,"_ref$velocity"],[8,32,7,47],[8,46,7,50],[8,49,7,53],[8,52,7,53,"_ref$velocity"],[8,65,7,53],[9,6,7,53,"_ref$power"],[9,16,7,53],[9,19,7,53,"_ref"],[9,23,7,53],[9,24,7,55,"power"],[9,29,7,60],[10,6,7,55,"power"],[10,11,7,60],[10,14,7,60,"_ref$power"],[10,24,7,60],[10,38,7,63],[10,41,7,66],[10,44,7,66,"_ref$power"],[10,54,7,66],[11,6,7,66,"_ref$decay"],[11,16,7,66],[11,19,7,66,"_ref"],[11,23,7,66],[11,24,7,68,"decay"],[11,29,7,73],[12,6,7,68,"decay"],[12,11,7,73],[12,14,7,73,"_ref$decay"],[12,24,7,73],[12,38,7,76],[12,43,7,81],[12,46,7,81,"_ref$decay"],[12,56,7,81],[13,6,7,83,"bounceDamping"],[13,19,7,96],[13,22,7,96,"_ref"],[13,26,7,96],[13,27,7,83,"bounceDamping"],[13,40,7,96],[14,6,7,98,"bounceStiffness"],[14,21,7,113],[14,24,7,113,"_ref"],[14,28,7,113],[14,29,7,98,"bounceStiffness"],[14,44,7,113],[15,6,7,115,"changeTarget"],[15,18,7,127],[15,21,7,127,"_ref"],[15,25,7,127],[15,26,7,115,"changeTarget"],[15,38,7,127],[16,6,7,129,"min"],[16,9,7,132],[16,12,7,132,"_ref"],[16,16,7,132],[16,17,7,129,"min"],[16,20,7,132],[17,6,7,134,"max"],[17,9,7,137],[17,12,7,137,"_ref"],[17,16,7,137],[17,17,7,134,"max"],[17,20,7,137],[18,6,7,137,"_ref$restDistance"],[18,23,7,137],[18,26,7,137,"_ref"],[18,30,7,137],[18,31,7,139,"restDistance"],[18,43,7,151],[19,6,7,139,"restDistance"],[19,18,7,151],[19,21,7,151,"_ref$restDistance"],[19,38,7,151],[19,52,7,154],[19,55,7,157],[19,58,7,157,"_ref$restDistance"],[19,75,7,157],[20,6,7,159,"restSpeed"],[20,15,7,168],[20,18,7,168,"_ref"],[20,22,7,168],[20,23,7,159,"restSpeed"],[20,32,7,168],[21,4,8,4,"decay"],[21,9,8,9],[21,12,8,12,"_$$_REQUIRE"],[21,23,8,12],[21,24,8,12,"_dependencyMap"],[21,38,8,12],[21,63,8,18,"time"],[21,67,8,22],[21,68,8,23,"ms"],[21,70,8,25],[21,71,8,26,"decay"],[21,76,8,31],[21,77,8,32],[22,4,9,4],[22,8,9,10,"state"],[22,13,9,15],[22,16,9,18],[23,6,10,8,"hasReachedTarget"],[23,22,10,24],[23,24,10,26],[23,29,10,31],[24,6,11,8,"done"],[24,10,11,12],[24,12,11,14],[24,17,11,19],[25,6,12,8,"current"],[25,13,12,15],[25,15,12,17,"from"],[25,19,12,21],[26,6,13,8,"target"],[26,12,13,14],[26,14,13,16,"from"],[27,4,14,4],[27,5,14,5],[28,4,15,4],[28,8,15,10,"isOutOfBounds"],[28,21,15,23],[28,24,15,26],[28,33,15,10,"isOutOfBounds"],[28,46,15,23,"isOutOfBounds"],[28,47,15,27,"v"],[28,48,15,28],[29,6,15,28],[29,13,15,34,"min"],[29,16,15,37],[29,21,15,42,"undefined"],[29,30,15,51],[29,34,15,55,"v"],[29,35,15,56],[29,38,15,59,"min"],[29,41,15,62],[29,45,15,68,"max"],[29,48,15,71],[29,53,15,76,"undefined"],[29,62,15,85],[29,66,15,89,"v"],[29,67,15,90],[29,70,15,93,"max"],[29,73,15,97],[30,4,15,97],[31,4,16,4],[31,8,16,10,"nearestBoundary"],[31,23,16,25],[31,26,16,28],[31,35,16,10,"nearestBoundary"],[31,50,16,25,"nearestBoundary"],[31,51,16,29,"v"],[31,52,16,30],[31,54,16,35],[32,6,17,8],[32,10,17,12,"min"],[32,13,17,15],[32,18,17,20,"undefined"],[32,27,17,29],[32,29,18,12],[32,36,18,19,"max"],[32,39,18,22],[33,6,19,8],[33,10,19,12,"max"],[33,13,19,15],[33,18,19,20,"undefined"],[33,27,19,29],[33,29,20,12],[33,36,20,19,"min"],[33,39,20,22],[34,6,21,8],[34,13,21,15,"Math"],[34,17,21,19],[34,18,21,20,"abs"],[34,21,21,23],[34,22,21,24,"min"],[34,25,21,27],[34,28,21,30,"v"],[34,29,21,31],[34,30,21,32],[34,33,21,35,"Math"],[34,37,21,39],[34,38,21,40,"abs"],[34,41,21,43],[34,42,21,44,"max"],[34,45,21,47],[34,48,21,50,"v"],[34,49,21,51],[34,50,21,52],[34,53,21,55,"min"],[34,56,21,58],[34,59,21,61,"max"],[34,62,21,64],[35,4,22,4],[35,5,22,5],[36,4,23,4],[36,8,23,8,"amplitude"],[36,17,23,17],[36,20,23,20,"power"],[36,25,23,25],[36,28,23,28,"velocity$1"],[36,38,23,38],[37,4,24,4],[37,8,24,10,"ideal"],[37,13,24,15],[37,16,24,18,"from"],[37,20,24,22],[37,23,24,25,"amplitude"],[37,32,24,34],[38,4,25,4],[38,8,25,10,"target"],[38,14,25,16],[38,17,25,19,"changeTarget"],[38,29,25,31],[38,34,25,36,"undefined"],[38,43,25,45],[38,46,25,48,"ideal"],[38,51,25,53],[38,54,25,56,"changeTarget"],[38,66,25,68],[38,67,25,69,"ideal"],[38,72,25,74],[38,73,25,75],[39,4,26,4,"state"],[39,9,26,9],[39,10,26,10,"target"],[39,16,26,16],[39,19,26,19,"target"],[39,25,26,25],[40,4,27,4],[41,0,28,0],[42,0,29,0],[43,0,30,0],[44,4,31,4],[44,8,31,8,"target"],[44,14,31,14],[44,19,31,19,"ideal"],[44,24,31,24],[44,26,32,8,"amplitude"],[44,35,32,17],[44,38,32,20,"target"],[44,44,32,26],[44,47,32,29,"from"],[44,51,32,33],[45,4,33,4],[45,8,33,10,"calcDelta"],[45,17,33,19],[45,20,33,22],[45,29,33,10,"calcDelta"],[45,38,33,19,"calcDelta"],[45,39,33,23,"t"],[45,40,33,24],[46,6,33,24],[46,13,33,29],[46,14,33,30,"amplitude"],[46,23,33,39],[46,26,33,42,"Math"],[46,30,33,46],[46,31,33,47,"exp"],[46,34,33,50],[46,35,33,51],[46,36,33,52,"t"],[46,37,33,53],[46,40,33,56,"decay"],[46,45,33,61],[46,46,33,62],[47,4,33,62],[48,4,34,4],[48,8,34,10,"calcLatest"],[48,18,34,20],[48,21,34,23],[48,30,34,10,"calcLatest"],[48,40,34,20,"calcLatest"],[48,41,34,24,"t"],[48,42,34,25],[49,6,34,25],[49,13,34,30,"target"],[49,19,34,36],[49,22,34,39,"calcDelta"],[49,31,34,48],[49,32,34,49,"t"],[49,33,34,50],[49,34,34,51],[50,4,34,51],[51,4,35,4],[51,8,35,10,"applyFriction"],[51,21,35,23],[51,24,35,26],[51,33,35,10,"applyFriction"],[51,46,35,23,"applyFriction"],[51,47,35,27,"t"],[51,48,35,28],[51,50,35,33],[52,6,36,8],[52,10,36,14,"delta"],[52,15,36,19],[52,18,36,22,"calcDelta"],[52,27,36,31],[52,28,36,32,"t"],[52,29,36,33],[52,30,36,34],[53,6,37,8],[53,10,37,14,"latest"],[53,16,37,20],[53,19,37,23,"calcLatest"],[53,29,37,33],[53,30,37,34,"t"],[53,31,37,35],[53,32,37,36],[54,6,38,8,"state"],[54,11,38,13],[54,12,38,14,"done"],[54,16,38,18],[54,19,38,21,"Math"],[54,23,38,25],[54,24,38,26,"abs"],[54,27,38,29],[54,28,38,30,"delta"],[54,33,38,35],[54,34,38,36],[54,38,38,40,"restDistance"],[54,50,38,52],[55,6,39,8,"state"],[55,11,39,13],[55,12,39,14,"current"],[55,19,39,21],[55,22,39,24,"state"],[55,27,39,29],[55,28,39,30,"done"],[55,32,39,34],[55,35,39,37,"target"],[55,41,39,43],[55,44,39,46,"latest"],[55,50,39,52],[56,4,40,4],[56,5,40,5],[57,4,41,4],[58,0,42,0],[59,0,43,0],[60,0,44,0],[61,0,45,0],[62,0,46,0],[63,4,47,4],[63,8,47,8,"timeReachedBoundary"],[63,27,47,27],[64,4,48,4],[64,8,48,8,"spring"],[64,14,48,14],[65,4,49,4],[65,8,49,10,"checkCatchBoundary"],[65,26,49,28],[65,29,49,31],[65,38,49,10,"checkCatchBoundary"],[65,56,49,28,"checkCatchBoundary"],[65,57,49,32,"t"],[65,58,49,33],[65,60,49,38],[66,6,50,8],[66,10,50,12],[66,11,50,13,"isOutOfBounds"],[66,24,50,26],[66,25,50,27,"state"],[66,30,50,32],[66,31,50,33,"current"],[66,38,50,40],[66,39,50,41],[66,41,51,12],[67,6,52,8,"timeReachedBoundary"],[67,25,52,27],[67,28,52,30,"t"],[67,29,52,31],[68,6,53,8,"spring"],[68,12,53,14],[68,15,53,17,"_$$_REQUIRE"],[68,26,53,17],[68,27,53,17,"_dependencyMap"],[68,41,53,17],[68,72,53,23,"spring"],[68,78,53,29],[68,79,53,30],[69,8,54,12,"from"],[69,12,54,16],[69,14,54,18,"state"],[69,19,54,23],[69,20,54,24,"current"],[69,27,54,31],[70,8,55,12,"to"],[70,10,55,14],[70,12,55,16,"nearestBoundary"],[70,27,55,31],[70,28,55,32,"state"],[70,33,55,37],[70,34,55,38,"current"],[70,41,55,45],[70,42,55,46],[71,8,56,12,"velocity"],[71,16,56,20],[71,18,56,22,"_$$_REQUIRE"],[71,29,56,22],[71,30,56,22,"_dependencyMap"],[71,44,56,22],[71,77,56,31,"calcGeneratorVelocity"],[71,98,56,52],[71,99,56,53,"calcLatest"],[71,109,56,63],[71,111,56,65,"t"],[71,112,56,66],[71,114,56,68,"state"],[71,119,56,73],[71,120,56,74,"current"],[71,127,56,81],[71,128,56,82],[72,8,56,84],[73,8,57,12,"damping"],[73,15,57,19],[73,17,57,21,"bounceDamping"],[73,30,57,34],[74,8,58,12,"stiffness"],[74,17,58,21],[74,19,58,23,"bounceStiffness"],[74,34,58,38],[75,8,59,12,"restDistance"],[75,20,59,24],[75,22,59,12,"restDistance"],[75,34,59,24],[76,8,60,12,"restSpeed"],[76,17,60,21],[76,19,60,12,"restSpeed"],[77,6,61,8],[77,7,61,9],[77,8,61,10],[78,4,62,4],[78,5,62,5],[79,4,63,4,"checkCatchBoundary"],[79,22,63,22],[79,23,63,23],[79,24,63,24],[79,25,63,25],[80,4,64,4],[80,11,64,11],[80,21,64,12,"t"],[80,22,64,13],[80,24,64,18],[81,6,65,8],[82,0,66,0],[83,0,67,0],[84,0,68,0],[85,0,69,0],[86,0,70,0],[87,6,71,8],[87,10,71,12,"hasUpdatedFrame"],[87,25,71,27],[87,28,71,30],[87,33,71,35],[88,6,72,8],[88,10,72,12],[88,11,72,13,"spring"],[88,17,72,19],[88,21,72,23,"timeReachedBoundary"],[88,40,72,42],[88,45,72,47,"undefined"],[88,54,72,56],[88,56,72,58],[89,8,73,12,"hasUpdatedFrame"],[89,23,73,27],[89,26,73,30],[89,30,73,34],[90,8,74,12,"applyFriction"],[90,21,74,25],[90,22,74,26,"t"],[90,23,74,27],[90,24,74,28],[91,8,75,12,"checkCatchBoundary"],[91,26,75,30],[91,27,75,31,"t"],[91,28,75,32],[91,29,75,33],[92,6,76,8],[93,6,77,8],[94,0,78,0],[95,0,79,0],[96,0,80,0],[97,6,81,8],[97,10,81,12,"timeReachedBoundary"],[97,29,81,31],[97,34,81,36,"undefined"],[97,43,81,45],[97,47,81,49,"t"],[97,48,81,50],[97,51,81,53,"timeReachedBoundary"],[97,70,81,72],[97,72,81,74],[98,8,82,12,"state"],[98,13,82,17],[98,14,82,18,"hasReachedTarget"],[98,30,82,34],[98,33,82,37],[98,37,82,41],[99,8,83,12],[99,15,83,19,"spring"],[99,21,83,25],[99,22,83,26,"t"],[99,23,83,27],[99,26,83,30,"timeReachedBoundary"],[99,45,83,49],[99,46,83,50],[100,6,84,8],[100,7,84,9],[100,13,85,13],[101,8,86,12,"state"],[101,13,86,17],[101,14,86,18,"hasReachedTarget"],[101,30,86,34],[101,33,86,37],[101,38,86,42],[102,8,87,12],[102,9,87,13,"hasUpdatedFrame"],[102,24,87,28],[102,28,87,32,"applyFriction"],[102,41,87,45],[102,42,87,46,"t"],[102,43,87,47],[102,44,87,48],[103,8,88,12],[103,15,88,19,"state"],[103,20,88,24],[104,6,89,8],[105,4,90,4],[105,5,90,5],[106,2,91,0],[106,3,91,1],[107,2,93,0,"exports"],[107,9,93,7],[107,10,93,8,"glide"],[107,15,93,13],[107,18,93,16,"glide"],[107,23,93,21],[108,0,93,22],[108,3]],"functionMap":{"names":["<global>","glide","isOutOfBounds","nearestBoundary","calcDelta","calcLatest","applyFriction","checkCatchBoundary","<anonymous>"],"mappings":"AAA;cCM;0BCQ,uED;4BEC;KFM;sBGW,wCH;uBIC,4BJ;0BKC;KLK;+BMS;KNa;WOE;KP0B;CDC"}},"type":"js/module"}]}