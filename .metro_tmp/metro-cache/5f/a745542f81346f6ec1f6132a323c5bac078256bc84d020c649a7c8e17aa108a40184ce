{"dependencies":[{"name":"./_lib/normalizeInterval.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"Bh7ny31Zm2tYBW0jgWrMRQn+gkY="}},{"name":"./startOfQuarter.js","data":{"asyncType":null,"locs":[{"start":{"line":4,"column":0,"index":165},"end":{"line":4,"column":53,"index":218}},{"start":{"line":4,"column":0,"index":165},"end":{"line":4,"column":53,"index":218}},{"start":{"line":4,"column":0,"index":165},"end":{"line":4,"column":53,"index":218}},{"start":{"line":4,"column":0,"index":165},"end":{"line":4,"column":53,"index":218}}],"key":"vUpq/pcno7PQYH+gPGHDpxQP6bk="}},{"name":"./constructFrom.js","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":113},"end":{"line":3,"column":51,"index":164}}],"key":"fe1vuD5Al7BWVRtgitxEm0VpSx0="}},{"name":"./addQuarters.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":47,"index":112}}],"key":"9IsW1kq5+UmS9Cv5pAnpqcCrBRM="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.eachQuarterOfInterval = eachQuarterOfInterval;\n  /**\n   * The {@link eachQuarterOfInterval} function options.\n   */\n\n  /**\n   * The {@link eachQuarterOfInterval} function result type. It resolves the proper data type.\n   * It uses the first argument date object type, starting from the date argument,\n   * then the start interval date, and finally the end interval date. If\n   * a context function is passed, it uses the context function return type.\n   */\n\n  /**\n   * @name eachQuarterOfInterval\n   * @category Interval Helpers\n   * @summary Return the array of quarters within the specified time interval.\n   *\n   * @description\n   * Return the array of quarters within the specified time interval.\n   *\n   * @typeParam IntervalType - Interval type.\n   * @typeParam Options - Options type.\n   *\n   * @param interval - The interval\n   * @param options - An object with options\n   *\n   * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end\n   *\n   * @example\n   * // Each quarter within interval 6 February 2014 - 10 August 2014:\n   * const result = eachQuarterOfInterval({\n   *   start: new Date(2014, 1, 6),\n   *   end: new Date(2014, 7, 10),\n   * })\n   * //=> [\n   * //   Wed Jan 01 2014 00:00:00,\n   * //   Tue Apr 01 2014 00:00:00,\n   * //   Tue Jul 01 2014 00:00:00,\n   * // ]\n   */\n  function eachQuarterOfInterval(interval, options) {\n    var _options$step;\n    var _normalizeInterval = (0, _$$_REQUIRE(_dependencyMap[0], \"./_lib/normalizeInterval.js\").normalizeInterval)(options == null ? void 0 : options.in, interval),\n      start = _normalizeInterval.start,\n      end = _normalizeInterval.end;\n    var reversed = +start > +end;\n    var endTime = reversed ? +(0, _$$_REQUIRE(_dependencyMap[1], \"./startOfQuarter.js\").startOfQuarter)(start) : +(0, _$$_REQUIRE(_dependencyMap[1], \"./startOfQuarter.js\").startOfQuarter)(end);\n    var date = reversed ? (0, _$$_REQUIRE(_dependencyMap[1], \"./startOfQuarter.js\").startOfQuarter)(end) : (0, _$$_REQUIRE(_dependencyMap[1], \"./startOfQuarter.js\").startOfQuarter)(start);\n    var step = (_options$step = options == null ? void 0 : options.step) != null ? _options$step : 1;\n    if (!step) return [];\n    if (step < 0) {\n      step = -step;\n      reversed = !reversed;\n    }\n    var dates = [];\n    while (+date <= endTime) {\n      dates.push((0, _$$_REQUIRE(_dependencyMap[2], \"./constructFrom.js\").constructFrom)(start, date));\n      date = (0, _$$_REQUIRE(_dependencyMap[3], \"./addQuarters.js\").addQuarters)(date, step);\n    }\n    return reversed ? dates.reverse() : dates;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = eachQuarterOfInterval;\n});","lineCount":70,"map":[[7,2,6,0],[8,0,7,0],[9,0,8,0],[11,2,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[18,2,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,0,23,0],[25,0,24,0],[26,0,25,0],[27,0,26,0],[28,0,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,0,31,0],[33,0,32,0],[34,0,33,0],[35,0,34,0],[36,0,35,0],[37,0,36,0],[38,0,37,0],[39,0,38,0],[40,0,39,0],[41,0,40,0],[42,0,41,0],[43,0,42,0],[44,0,43,0],[45,0,44,0],[46,2,45,7],[46,11,45,16,"eachQuarterOfInterval"],[46,32,45,37,"eachQuarterOfInterval"],[46,33,45,38,"interval"],[46,41,45,46],[46,43,45,48,"options"],[46,50,45,55],[46,52,45,57],[47,4,45,57],[47,8,45,57,"_options$step"],[47,21,45,57],[48,4,46,2],[48,8,46,2,"_normalizeInterval"],[48,26,46,2],[48,29,46,25],[48,33,46,25,"normalizeInterval"],[48,63,46,25],[48,64,46,25,"normalizeInterval"],[48,112,46,42],[48,114,46,43,"options"],[48,121,46,50],[48,141,46,43,"options"],[48,148,46,50],[48,149,46,52,"in"],[48,151,46,54],[48,153,46,56,"interval"],[48,161,46,64],[48,162,46,65],[49,6,46,10,"start"],[49,11,46,15],[49,14,46,15,"_normalizeInterval"],[49,32,46,15],[49,33,46,10,"start"],[49,38,46,15],[50,6,46,17,"end"],[50,9,46,20],[50,12,46,20,"_normalizeInterval"],[50,30,46,20],[50,31,46,17,"end"],[50,34,46,20],[51,4,48,2],[51,8,48,6,"reversed"],[51,16,48,14],[51,19,48,17],[51,20,48,18,"start"],[51,25,48,23],[51,28,48,26],[51,29,48,27,"end"],[51,32,48,30],[52,4,49,2],[52,8,49,8,"endTime"],[52,15,49,15],[52,18,49,18,"reversed"],[52,26,49,26],[52,29,49,29],[52,30,49,30],[52,34,49,30,"startOfQuarter"],[52,64,49,30],[52,65,49,30,"startOfQuarter"],[52,102,49,44],[52,104,49,45,"start"],[52,109,49,50],[52,110,49,51],[52,113,49,54],[52,114,49,55],[52,118,49,55,"startOfQuarter"],[52,148,49,55],[52,149,49,55,"startOfQuarter"],[52,186,49,69],[52,188,49,70,"end"],[52,191,49,73],[52,192,49,74],[53,4,50,2],[53,8,50,6,"date"],[53,12,50,10],[53,15,50,13,"reversed"],[53,23,50,21],[53,26,50,24],[53,30,50,24,"startOfQuarter"],[53,60,50,24],[53,61,50,24,"startOfQuarter"],[53,98,50,38],[53,100,50,39,"end"],[53,103,50,42],[53,104,50,43],[53,107,50,46],[53,111,50,46,"startOfQuarter"],[53,141,50,46],[53,142,50,46,"startOfQuarter"],[53,179,50,60],[53,181,50,61,"start"],[53,186,50,66],[53,187,50,67],[54,4,52,2],[54,8,52,6,"step"],[54,12,52,10],[54,16,52,10,"_options$step"],[54,29,52,10],[54,32,52,13,"options"],[54,39,52,20],[54,59,52,13,"options"],[54,66,52,20],[54,67,52,22,"step"],[54,71,52,26],[54,83,52,26,"_options$step"],[54,96,52,26],[54,99,52,30],[54,100,52,31],[55,4,53,2],[55,8,53,6],[55,9,53,7,"step"],[55,13,53,11],[55,15,53,13],[55,22,53,20],[55,24,53,22],[56,4,54,2],[56,8,54,6,"step"],[56,12,54,10],[56,15,54,13],[56,16,54,14],[56,18,54,16],[57,6,55,4,"step"],[57,10,55,8],[57,13,55,11],[57,14,55,12,"step"],[57,18,55,16],[58,6,56,4,"reversed"],[58,14,56,12],[58,17,56,15],[58,18,56,16,"reversed"],[58,26,56,24],[59,4,57,2],[60,4,59,2],[60,8,59,8,"dates"],[60,13,59,13],[60,16,59,16],[60,18,59,18],[61,4,61,2],[61,11,61,9],[61,12,61,10,"date"],[61,16,61,14],[61,20,61,18,"endTime"],[61,27,61,25],[61,29,61,27],[62,6,62,4,"dates"],[62,11,62,9],[62,12,62,10,"push"],[62,16,62,14],[62,17,62,15],[62,21,62,15,"constructFrom"],[62,51,62,15],[62,52,62,15,"constructFrom"],[62,87,62,28],[62,89,62,29,"start"],[62,94,62,34],[62,96,62,36,"date"],[62,100,62,40],[62,101,62,41],[62,102,62,42],[63,6,63,4,"date"],[63,10,63,8],[63,13,63,11],[63,17,63,11,"addQuarters"],[63,47,63,11],[63,48,63,11,"addQuarters"],[63,79,63,22],[63,81,63,23,"date"],[63,85,63,27],[63,87,63,29,"step"],[63,91,63,33],[63,92,63,34],[64,4,64,2],[65,4,66,2],[65,11,66,9,"reversed"],[65,19,66,17],[65,22,66,20,"dates"],[65,27,66,25],[65,28,66,26,"reverse"],[65,35,66,33],[65,36,66,34],[65,37,66,35],[65,40,66,38,"dates"],[65,45,66,43],[66,2,67,0],[68,2,69,0],[69,2,69,0],[69,6,69,0,"_default"],[69,14,69,0],[69,17,69,0,"exports"],[69,24,69,0],[69,25,69,0,"default"],[69,32,69,0],[69,35,70,15,"eachQuarterOfInterval"],[69,56,70,36],[70,0,70,36],[70,3]],"functionMap":{"names":["<global>","eachQuarterOfInterval"],"mappings":"AAA;OC4C;CDsB"}},"type":"js/module"}]}