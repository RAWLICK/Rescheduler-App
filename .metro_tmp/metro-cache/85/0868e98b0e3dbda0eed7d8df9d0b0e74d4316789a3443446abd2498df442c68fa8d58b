{"dependencies":[{"name":"./getDay.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"+CGEEVZe/QauFtwS7KgRRiNB4s0="}},{"name":"./subDays.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":38},"end":{"line":2,"column":39,"index":77}}],"key":"B7Nb5I2AKwq6zcSlW+ZsXAnw4gk="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.previousDay = previousDay;\n  /**\n   * The {@link previousDay} function options.\n   */\n\n  /**\n   * @name previousDay\n   * @category Weekday Helpers\n   * @summary When is the previous day of the week?\n   *\n   * @description\n   * When is the previous day of the week? 0-6 the day of the week, 0 represents Sunday.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param date - The date to check\n   * @param day - The day of the week\n   * @param options - An object with options\n   *\n   * @returns The date is the previous day of week\n   *\n   * @example\n   * // When is the previous Monday before Mar, 20, 2020?\n   * const result = previousDay(new Date(2020, 2, 20), 1)\n   * //=> Mon Mar 16 2020 00:00:00\n   *\n   * @example\n   * // When is the previous Tuesday before Mar, 21, 2020?\n   * const result = previousDay(new Date(2020, 2, 21), 2)\n   * //=> Tue Mar 17 2020 00:00:00\n   */\n  function previousDay(date, day, options) {\n    var delta = (0, _$$_REQUIRE(_dependencyMap[0], \"./getDay.js\").getDay)(date, options) - day;\n    if (delta <= 0) delta += 7;\n    return (0, _$$_REQUIRE(_dependencyMap[1], \"./subDays.js\").subDays)(date, delta, options);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = previousDay;\n});","lineCount":46,"map":[[7,2,4,0],[8,0,5,0],[9,0,6,0],[11,2,8,0],[12,0,9,0],[13,0,10,0],[14,0,11,0],[15,0,12,0],[16,0,13,0],[17,0,14,0],[18,0,15,0],[19,0,16,0],[20,0,17,0],[21,0,18,0],[22,0,19,0],[23,0,20,0],[24,0,21,0],[25,0,22,0],[26,0,23,0],[27,0,24,0],[28,0,25,0],[29,0,26,0],[30,0,27,0],[31,0,28,0],[32,0,29,0],[33,0,30,0],[34,0,31,0],[35,0,32,0],[36,0,33,0],[37,0,34,0],[38,2,35,7],[38,11,35,16,"previousDay"],[38,22,35,27,"previousDay"],[38,23,35,28,"date"],[38,27,35,32],[38,29,35,34,"day"],[38,32,35,37],[38,34,35,39,"options"],[38,41,35,46],[38,43,35,48],[39,4,36,2],[39,8,36,6,"delta"],[39,13,36,11],[39,16,36,14],[39,20,36,14,"getDay"],[39,50,36,14],[39,51,36,14,"getDay"],[39,72,36,20],[39,74,36,21,"date"],[39,78,36,25],[39,80,36,27,"options"],[39,87,36,34],[39,88,36,35],[39,91,36,38,"day"],[39,94,36,41],[40,4,37,2],[40,8,37,6,"delta"],[40,13,37,11],[40,17,37,15],[40,18,37,16],[40,20,37,18,"delta"],[40,25,37,23],[40,29,37,27],[40,30,37,28],[41,4,39,2],[41,11,39,9],[41,15,39,9,"subDays"],[41,45,39,9],[41,46,39,9,"subDays"],[41,69,39,16],[41,71,39,17,"date"],[41,75,39,21],[41,77,39,23,"delta"],[41,82,39,28],[41,84,39,30,"options"],[41,91,39,37],[41,92,39,38],[42,2,40,0],[44,2,42,0],[45,2,42,0],[45,6,42,0,"_default"],[45,14,42,0],[45,17,42,0,"exports"],[45,24,42,0],[45,25,42,0,"default"],[45,32,42,0],[45,35,43,15,"previousDay"],[45,46,43,26],[46,0,43,26],[46,3]],"functionMap":{"names":["<global>","previousDay"],"mappings":"AAA;OCkC;CDK"}},"type":"js/module"}]}