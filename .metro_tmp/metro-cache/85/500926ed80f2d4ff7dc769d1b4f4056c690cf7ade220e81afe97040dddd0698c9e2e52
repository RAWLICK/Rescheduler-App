{"dependencies":[{"name":"./constructFrom.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":51,"index":116}}],"key":"fe1vuD5Al7BWVRtgitxEm0VpSx0="}},{"name":"./toDate.js","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":117},"end":{"line":3,"column":37,"index":154}}],"key":"o2GbHlM0wxsRaLWHEC6986QcehU="}},{"name":"./_lib/getRoundingMethod.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"ndTrphm//UZzzqhNblex5zIu2d0="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.roundToNearestMinutes = roundToNearestMinutes;\n  /**\n   * The {@link roundToNearestMinutes} function options.\n   */\n\n  /**\n   * @name roundToNearestMinutes\n   * @category Minute Helpers\n   * @summary Rounds the given date to the nearest minute\n   *\n   * @description\n   * Rounds the given date to the nearest minute (or number of minutes).\n   * Rounds up when the given date is exactly between the nearest round minutes.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param date - The date to round\n   * @param options - An object with options.\n   *\n   * @returns The new date rounded to the closest minute\n   *\n   * @example\n   * // Round 10 July 2014 12:12:34 to nearest minute:\n   * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))\n   * //=> Thu Jul 10 2014 12:13:00\n   *\n   * @example\n   * // Round 10 July 2014 12:12:34 to nearest quarter hour:\n   * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })\n   * //=> Thu Jul 10 2014 12:15:00\n   *\n   * @example\n   * // Floor (rounds down) 10 July 2014 12:12:34 to nearest minute:\n   * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'floor' })\n   * //=> Thu Jul 10 2014 12:12:00\n   *\n   * @example\n   * // Ceil (rounds up) 10 July 2014 12:12:34 to nearest half hour:\n   * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'ceil', nearestTo: 30 })\n   * //=> Thu Jul 10 2014 12:30:00\n   */\n  function roundToNearestMinutes(date, options) {\n    var _options$nearestTo, _options$roundingMeth;\n    var nearestTo = (_options$nearestTo = options == null ? void 0 : options.nearestTo) != null ? _options$nearestTo : 1;\n    if (nearestTo < 1 || nearestTo > 30) return (0, _$$_REQUIRE(_dependencyMap[0], \"./constructFrom.js\").constructFrom)(date, NaN);\n    var date_ = (0, _$$_REQUIRE(_dependencyMap[1], \"./toDate.js\").toDate)(date, options == null ? void 0 : options.in);\n    var fractionalSeconds = date_.getSeconds() / 60;\n    var fractionalMilliseconds = date_.getMilliseconds() / 1000 / 60;\n    var minutes = date_.getMinutes() + fractionalSeconds + fractionalMilliseconds;\n    var method = (_options$roundingMeth = options == null ? void 0 : options.roundingMethod) != null ? _options$roundingMeth : \"round\";\n    var roundingMethod = (0, _$$_REQUIRE(_dependencyMap[2], \"./_lib/getRoundingMethod.js\").getRoundingMethod)(method);\n    var roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;\n    date_.setMinutes(roundedMinutes, 0, 0);\n    return date_;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = roundToNearestMinutes;\n});","lineCount":65,"map":[[7,2,5,0],[8,0,6,0],[9,0,7,0],[11,2,9,0],[12,0,10,0],[13,0,11,0],[14,0,12,0],[15,0,13,0],[16,0,14,0],[17,0,15,0],[18,0,16,0],[19,0,17,0],[20,0,18,0],[21,0,19,0],[22,0,20,0],[23,0,21,0],[24,0,22,0],[25,0,23,0],[26,0,24,0],[27,0,25,0],[28,0,26,0],[29,0,27,0],[30,0,28,0],[31,0,29,0],[32,0,30,0],[33,0,31,0],[34,0,32,0],[35,0,33,0],[36,0,34,0],[37,0,35,0],[38,0,36,0],[39,0,37,0],[40,0,38,0],[41,0,39,0],[42,0,40,0],[43,0,41,0],[44,0,42,0],[45,0,43,0],[46,0,44,0],[47,0,45,0],[48,2,46,7],[48,11,46,16,"roundToNearestMinutes"],[48,32,46,37,"roundToNearestMinutes"],[48,33,46,38,"date"],[48,37,46,42],[48,39,46,44,"options"],[48,46,46,51],[48,48,46,53],[49,4,46,53],[49,8,46,53,"_options$nearestTo"],[49,26,46,53],[49,28,46,53,"_options$roundingMeth"],[49,49,46,53],[50,4,47,2],[50,8,47,8,"nearestTo"],[50,17,47,17],[50,21,47,17,"_options$nearestTo"],[50,39,47,17],[50,42,47,20,"options"],[50,49,47,27],[50,69,47,20,"options"],[50,76,47,27],[50,77,47,29,"nearestTo"],[50,86,47,38],[50,98,47,38,"_options$nearestTo"],[50,116,47,38],[50,119,47,42],[50,120,47,43],[51,4,49,2],[51,8,49,6,"nearestTo"],[51,17,49,15],[51,20,49,18],[51,21,49,19],[51,25,49,23,"nearestTo"],[51,34,49,32],[51,37,49,35],[51,39,49,37],[51,41,49,39],[51,48,49,46],[51,52,49,46,"constructFrom"],[51,82,49,46],[51,83,49,46,"constructFrom"],[51,118,49,59],[51,120,49,60,"date"],[51,124,49,64],[51,126,49,66,"NaN"],[51,129,49,69],[51,130,49,70],[52,4,51,2],[52,8,51,8,"date_"],[52,13,51,13],[52,16,51,16],[52,20,51,16,"toDate"],[52,50,51,16],[52,51,51,16,"toDate"],[52,72,51,22],[52,74,51,23,"date"],[52,78,51,27],[52,80,51,29,"options"],[52,87,51,36],[52,107,51,29,"options"],[52,114,51,36],[52,115,51,38,"in"],[52,117,51,40],[52,118,51,41],[53,4,52,2],[53,8,52,8,"fractionalSeconds"],[53,25,52,25],[53,28,52,28,"date_"],[53,33,52,33],[53,34,52,34,"getSeconds"],[53,44,52,44],[53,45,52,45],[53,46,52,46],[53,49,52,49],[53,51,52,51],[54,4,53,2],[54,8,53,8,"fractionalMilliseconds"],[54,30,53,30],[54,33,53,33,"date_"],[54,38,53,38],[54,39,53,39,"getMilliseconds"],[54,54,53,54],[54,55,53,55],[54,56,53,56],[54,59,53,59],[54,63,53,63],[54,66,53,66],[54,68,53,68],[55,4,54,2],[55,8,54,8,"minutes"],[55,15,54,15],[55,18,55,4,"date_"],[55,23,55,9],[55,24,55,10,"getMinutes"],[55,34,55,20],[55,35,55,21],[55,36,55,22],[55,39,55,25,"fractionalSeconds"],[55,56,55,42],[55,59,55,45,"fractionalMilliseconds"],[55,81,55,67],[56,4,57,2],[56,8,57,8,"method"],[56,14,57,14],[56,18,57,14,"_options$roundingMeth"],[56,39,57,14],[56,42,57,17,"options"],[56,49,57,24],[56,69,57,17,"options"],[56,76,57,24],[56,77,57,26,"roundingMethod"],[56,91,57,40],[56,103,57,40,"_options$roundingMeth"],[56,124,57,40],[56,127,57,44],[56,134,57,51],[57,4,58,2],[57,8,58,8,"roundingMethod"],[57,22,58,22],[57,25,58,25],[57,29,58,25,"getRoundingMethod"],[57,59,58,25],[57,60,58,25,"getRoundingMethod"],[57,108,58,42],[57,110,58,43,"method"],[57,116,58,49],[57,117,58,50],[58,4,60,2],[58,8,60,8,"roundedMinutes"],[58,22,60,22],[58,25,60,25,"roundingMethod"],[58,39,60,39],[58,40,60,40,"minutes"],[58,47,60,47],[58,50,60,50,"nearestTo"],[58,59,60,59],[58,60,60,60],[58,63,60,63,"nearestTo"],[58,72,60,72],[59,4,62,2,"date_"],[59,9,62,7],[59,10,62,8,"setMinutes"],[59,20,62,18],[59,21,62,19,"roundedMinutes"],[59,35,62,33],[59,37,62,35],[59,38,62,36],[59,40,62,38],[59,41,62,39],[59,42,62,40],[60,4,63,2],[60,11,63,9,"date_"],[60,16,63,14],[61,2,64,0],[63,2,66,0],[64,2,66,0],[64,6,66,0,"_default"],[64,14,66,0],[64,17,66,0,"exports"],[64,24,66,0],[64,25,66,0,"default"],[64,32,66,0],[64,35,67,15,"roundToNearestMinutes"],[64,56,67,36],[65,0,67,36],[65,3]],"functionMap":{"names":["<global>","roundToNearestMinutes"],"mappings":"AAA;OC6C;CDkB"}},"type":"js/module"}]}