{"dependencies":[{"name":"./toDate.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"o2GbHlM0wxsRaLWHEC6986QcehU="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.intlFormat = intlFormat;\n  /**\n   * The locale string (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n   * @deprecated\n   *\n   * [TODO] Remove in v4\n   */\n\n  /**\n   * The format options (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options)\n   */\n\n  /**\n   * The locale options.\n   */\n\n  /**\n   * @name intlFormat\n   * @category Common Helpers\n   * @summary Format the date with Intl.DateTimeFormat (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat).\n   *\n   * @description\n   * Return the formatted date string in the given format.\n   * The method uses [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) inside.\n   * formatOptions are the same as [`Intl.DateTimeFormat` options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat#using_options)\n   *\n   * > ⚠️ Please note that before Node version 13.0.0, only the locale data for en-US is available by default.\n   *\n   * @param date - The date to format\n   *\n   * @returns The formatted date string\n   *\n   * @throws `date` must not be Invalid Date\n   *\n   * @example\n   * // Represent 4 October 2019 in middle-endian format:\n   * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456))\n   * //=> 10/4/2019\n   */\n\n  /**\n   * @param date - The date to format\n   * @param localeOptions - An object with locale\n   *\n   * @returns The formatted date string\n   *\n   * @throws `date` must not be Invalid Date\n   *\n   * @example\n   * // Represent 4 October 2019 in Korean.\n   * // Convert the date with locale's options.\n   * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {\n   *   locale: 'ko-KR',\n   * })\n   * //=> 2019. 10. 4.\n   */\n\n  /**\n   * @param date - The date to format\n   * @param formatOptions - The format options\n   *\n   * @returns The formatted date string\n   *\n   * @throws `date` must not be Invalid Date\n   *\n   * @example\n   * // Represent 4 October 2019.\n   * // Convert the date with format's options.\n   * const result = intlFormat.default(new Date(2019, 9, 4, 12, 30, 13, 456), {\n   *   year: 'numeric',\n   *   month: 'numeric',\n   *   day: 'numeric',\n   *   hour: 'numeric',\n   * })\n   * //=> 10/4/2019, 12 PM\n   */\n\n  /**\n   * @param date - The date to format\n   * @param formatOptions - The format options\n   * @param localeOptions - An object with locale\n   *\n   * @returns The formatted date string\n   *\n   * @throws `date` must not be Invalid Date\n   *\n   * @example\n   * // Represent 4 October 2019 in German.\n   * // Convert the date with format's options and locale's options.\n   * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {\n   *   weekday: 'long',\n   *   year: 'numeric',\n   *   month: 'long',\n   *   day: 'numeric',\n   * }, {\n   *   locale: 'de-DE',\n   * })\n   * //=> Freitag, 4. Oktober 2019\n   */\n\n  function intlFormat(date, formatOrLocale, localeOptions) {\n    var _localeOptions;\n    var formatOptions;\n    if (isFormatOptions(formatOrLocale)) {\n      formatOptions = formatOrLocale;\n    } else {\n      localeOptions = formatOrLocale;\n    }\n    return new Intl.DateTimeFormat((_localeOptions = localeOptions) == null ? void 0 : _localeOptions.locale, formatOptions).format((0, _$$_REQUIRE(_dependencyMap[0], \"./toDate.js\").toDate)(date));\n  }\n  function isFormatOptions(opts) {\n    return opts !== undefined && !(\"locale\" in opts);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = intlFormat;\n});","lineCount":122,"map":[[7,2,3,0],[8,0,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[14,2,10,0],[15,0,11,0],[16,0,12,0],[18,2,14,0],[19,0,15,0],[20,0,16,0],[22,2,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,0,29,0],[34,0,30,0],[35,0,31,0],[36,0,32,0],[37,0,33,0],[38,0,34,0],[39,0,35,0],[40,0,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,0,40,0],[46,2,42,0],[47,0,43,0],[48,0,44,0],[49,0,45,0],[50,0,46,0],[51,0,47,0],[52,0,48,0],[53,0,49,0],[54,0,50,0],[55,0,51,0],[56,0,52,0],[57,0,53,0],[58,0,54,0],[59,0,55,0],[60,0,56,0],[61,0,57,0],[63,2,59,0],[64,0,60,0],[65,0,61,0],[66,0,62,0],[67,0,63,0],[68,0,64,0],[69,0,65,0],[70,0,66,0],[71,0,67,0],[72,0,68,0],[73,0,69,0],[74,0,70,0],[75,0,71,0],[76,0,72,0],[77,0,73,0],[78,0,74,0],[79,0,75,0],[80,0,76,0],[81,0,77,0],[83,2,79,0],[84,0,80,0],[85,0,81,0],[86,0,82,0],[87,0,83,0],[88,0,84,0],[89,0,85,0],[90,0,86,0],[91,0,87,0],[92,0,88,0],[93,0,89,0],[94,0,90,0],[95,0,91,0],[96,0,92,0],[97,0,93,0],[98,0,94,0],[99,0,95,0],[100,0,96,0],[101,0,97,0],[102,0,98,0],[103,0,99,0],[104,0,100,0],[106,2,102,7],[106,11,102,16,"intlFormat"],[106,21,102,26,"intlFormat"],[106,22,102,27,"date"],[106,26,102,31],[106,28,102,33,"formatOrLocale"],[106,42,102,47],[106,44,102,49,"localeOptions"],[106,57,102,62],[106,59,102,64],[107,4,102,64],[107,8,102,64,"_localeOptions"],[107,22,102,64],[108,4,103,2],[108,8,103,6,"formatOptions"],[108,21,103,19],[109,4,105,2],[109,8,105,6,"isFormatOptions"],[109,23,105,21],[109,24,105,22,"formatOrLocale"],[109,38,105,36],[109,39,105,37],[109,41,105,39],[110,6,106,4,"formatOptions"],[110,19,106,17],[110,22,106,20,"formatOrLocale"],[110,36,106,34],[111,4,107,2],[111,5,107,3],[111,11,107,9],[112,6,108,4,"localeOptions"],[112,19,108,17],[112,22,108,20,"formatOrLocale"],[112,36,108,34],[113,4,109,2],[114,4,111,2],[114,11,111,9],[114,15,111,13,"Intl"],[114,19,111,17],[114,20,111,18,"DateTimeFormat"],[114,34,111,32],[114,36,111,32,"_localeOptions"],[114,50,111,32],[114,53,111,33,"localeOptions"],[114,66,111,46],[114,87,111,33,"_localeOptions"],[114,101,111,33],[114,102,111,48,"locale"],[114,108,111,54],[114,110,111,56,"formatOptions"],[114,123,111,69],[114,124,111,70],[114,125,111,71,"format"],[114,131,111,77],[114,132,112,4],[114,136,112,4,"toDate"],[114,166,112,4],[114,167,112,4,"toDate"],[114,188,112,10],[114,190,112,11,"date"],[114,194,112,15],[114,195,113,2],[114,196,113,3],[115,2,114,0],[116,2,116,0],[116,11,116,9,"isFormatOptions"],[116,26,116,24,"isFormatOptions"],[116,27,116,25,"opts"],[116,31,116,29],[116,33,116,31],[117,4,117,2],[117,11,117,9,"opts"],[117,15,117,13],[117,20,117,18,"undefined"],[117,29,117,27],[117,33,117,31],[117,35,117,33],[117,43,117,41],[117,47,117,45,"opts"],[117,51,117,49],[117,52,117,50],[118,2,118,0],[120,2,120,0],[121,2,120,0],[121,6,120,0,"_default"],[121,14,120,0],[121,17,120,0,"exports"],[121,24,120,0],[121,25,120,0,"default"],[121,32,120,0],[121,35,121,15,"intlFormat"],[121,45,121,25],[122,0,121,25],[122,3]],"functionMap":{"names":["<global>","intlFormat","isFormatOptions"],"mappings":"AAA;OCqG;CDY;AEE;CFE"}},"type":"js/module"}]}