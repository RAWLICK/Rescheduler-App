{"dependencies":[{"name":"./constructFrom.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":65},"end":{"line":2,"column":51,"index":116}}],"key":"fe1vuD5Al7BWVRtgitxEm0VpSx0="}},{"name":"./toDate.js","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":117},"end":{"line":3,"column":37,"index":154}}],"key":"o2GbHlM0wxsRaLWHEC6986QcehU="}},{"name":"./_lib/getRoundingMethod.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":64,"index":64}}],"key":"ndTrphm//UZzzqhNblex5zIu2d0="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.roundToNearestHours = roundToNearestHours;\n  /**\n   * The {@link roundToNearestHours} function options.\n   */\n\n  /**\n   * @name roundToNearestHours\n   * @category Hour Helpers\n   * @summary Rounds the given date to the nearest hour\n   *\n   * @description\n   * Rounds the given date to the nearest hour (or number of hours).\n   * Rounds up when the given date is exactly between the nearest round hours.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param date - The date to round\n   * @param options - An object with options.\n   *\n   * @returns The new date rounded to the closest hour\n   *\n   * @example\n   * // Round 10 July 2014 12:34:56 to nearest hour:\n   * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56))\n   * //=> Thu Jul 10 2014 13:00:00\n   *\n   * @example\n   * // Round 10 July 2014 12:34:56 to nearest half hour:\n   * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 6 })\n   * //=> Thu Jul 10 2014 12:00:00\n   *\n   * @example\n   * // Round 10 July 2014 12:34:56 to nearest half hour:\n   * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 8 })\n   * //=> Thu Jul 10 2014 16:00:00\n   *\n   * @example\n   * // Floor (rounds down) 10 July 2014 12:34:56 to nearest hour:\n   * const result = roundToNearestHours(new Date(2014, 6, 10, 1, 23, 45), { roundingMethod: 'ceil' })\n   * //=> Thu Jul 10 2014 02:00:00\n   *\n   * @example\n   * // Ceil (rounds up) 10 July 2014 12:34:56 to nearest quarter hour:\n   * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { roundingMethod: 'floor', nearestTo: 8 })\n   * //=> Thu Jul 10 2014 08:00:00\n   */\n  function roundToNearestHours(date, options) {\n    var _options$nearestTo, _options$roundingMeth;\n    var nearestTo = (_options$nearestTo = options == null ? void 0 : options.nearestTo) != null ? _options$nearestTo : 1;\n    if (nearestTo < 1 || nearestTo > 12) return (0, _$$_REQUIRE(_dependencyMap[0], \"./constructFrom.js\").constructFrom)((options == null ? void 0 : options.in) || date, NaN);\n    var date_ = (0, _$$_REQUIRE(_dependencyMap[1], \"./toDate.js\").toDate)(date, options == null ? void 0 : options.in);\n    var fractionalMinutes = date_.getMinutes() / 60;\n    var fractionalSeconds = date_.getSeconds() / 60 / 60;\n    var fractionalMilliseconds = date_.getMilliseconds() / 1000 / 60 / 60;\n    var hours = date_.getHours() + fractionalMinutes + fractionalSeconds + fractionalMilliseconds;\n    var method = (_options$roundingMeth = options == null ? void 0 : options.roundingMethod) != null ? _options$roundingMeth : \"round\";\n    var roundingMethod = (0, _$$_REQUIRE(_dependencyMap[2], \"./_lib/getRoundingMethod.js\").getRoundingMethod)(method);\n    var roundedHours = roundingMethod(hours / nearestTo) * nearestTo;\n    date_.setHours(roundedHours, 0, 0, 0);\n    return date_;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = roundToNearestHours;\n});","lineCount":71,"map":[[7,2,5,0],[8,0,6,0],[9,0,7,0],[11,2,9,0],[12,0,10,0],[13,0,11,0],[14,0,12,0],[15,0,13,0],[16,0,14,0],[17,0,15,0],[18,0,16,0],[19,0,17,0],[20,0,18,0],[21,0,19,0],[22,0,20,0],[23,0,21,0],[24,0,22,0],[25,0,23,0],[26,0,24,0],[27,0,25,0],[28,0,26,0],[29,0,27,0],[30,0,28,0],[31,0,29,0],[32,0,30,0],[33,0,31,0],[34,0,32,0],[35,0,33,0],[36,0,34,0],[37,0,35,0],[38,0,36,0],[39,0,37,0],[40,0,38,0],[41,0,39,0],[42,0,40,0],[43,0,41,0],[44,0,42,0],[45,0,43,0],[46,0,44,0],[47,0,45,0],[48,0,46,0],[49,0,47,0],[50,0,48,0],[51,0,49,0],[52,0,50,0],[53,2,51,7],[53,11,51,16,"roundToNearestHours"],[53,30,51,35,"roundToNearestHours"],[53,31,51,36,"date"],[53,35,51,40],[53,37,51,42,"options"],[53,44,51,49],[53,46,51,51],[54,4,51,51],[54,8,51,51,"_options$nearestTo"],[54,26,51,51],[54,28,51,51,"_options$roundingMeth"],[54,49,51,51],[55,4,52,2],[55,8,52,8,"nearestTo"],[55,17,52,17],[55,21,52,17,"_options$nearestTo"],[55,39,52,17],[55,42,52,20,"options"],[55,49,52,27],[55,69,52,20,"options"],[55,76,52,27],[55,77,52,29,"nearestTo"],[55,86,52,38],[55,98,52,38,"_options$nearestTo"],[55,116,52,38],[55,119,52,42],[55,120,52,43],[56,4,54,2],[56,8,54,6,"nearestTo"],[56,17,54,15],[56,20,54,18],[56,21,54,19],[56,25,54,23,"nearestTo"],[56,34,54,32],[56,37,54,35],[56,39,54,37],[56,41,55,4],[56,48,55,11],[56,52,55,11,"constructFrom"],[56,82,55,11],[56,83,55,11,"constructFrom"],[56,118,55,24],[56,120,55,25],[56,121,55,25,"options"],[56,128,55,32],[56,148,55,25,"options"],[56,155,55,32],[56,156,55,34,"in"],[56,158,55,36],[56,163,55,40,"date"],[56,167,55,44],[56,169,55,46,"NaN"],[56,172,55,49],[56,173,55,50],[57,4,57,2],[57,8,57,8,"date_"],[57,13,57,13],[57,16,57,16],[57,20,57,16,"toDate"],[57,50,57,16],[57,51,57,16,"toDate"],[57,72,57,22],[57,74,57,23,"date"],[57,78,57,27],[57,80,57,29,"options"],[57,87,57,36],[57,107,57,29,"options"],[57,114,57,36],[57,115,57,38,"in"],[57,117,57,40],[57,118,57,41],[58,4,58,2],[58,8,58,8,"fractionalMinutes"],[58,25,58,25],[58,28,58,28,"date_"],[58,33,58,33],[58,34,58,34,"getMinutes"],[58,44,58,44],[58,45,58,45],[58,46,58,46],[58,49,58,49],[58,51,58,51],[59,4,59,2],[59,8,59,8,"fractionalSeconds"],[59,25,59,25],[59,28,59,28,"date_"],[59,33,59,33],[59,34,59,34,"getSeconds"],[59,44,59,44],[59,45,59,45],[59,46,59,46],[59,49,59,49],[59,51,59,51],[59,54,59,54],[59,56,59,56],[60,4,60,2],[60,8,60,8,"fractionalMilliseconds"],[60,30,60,30],[60,33,60,33,"date_"],[60,38,60,38],[60,39,60,39,"getMilliseconds"],[60,54,60,54],[60,55,60,55],[60,56,60,56],[60,59,60,59],[60,63,60,63],[60,66,60,66],[60,68,60,68],[60,71,60,71],[60,73,60,73],[61,4,61,2],[61,8,61,8,"hours"],[61,13,61,13],[61,16,62,4,"date_"],[61,21,62,9],[61,22,62,10,"getHours"],[61,30,62,18],[61,31,62,19],[61,32,62,20],[61,35,63,4,"fractionalMinutes"],[61,52,63,21],[61,55,64,4,"fractionalSeconds"],[61,72,64,21],[61,75,65,4,"fractionalMilliseconds"],[61,97,65,26],[62,4,67,2],[62,8,67,8,"method"],[62,14,67,14],[62,18,67,14,"_options$roundingMeth"],[62,39,67,14],[62,42,67,17,"options"],[62,49,67,24],[62,69,67,17,"options"],[62,76,67,24],[62,77,67,26,"roundingMethod"],[62,91,67,40],[62,103,67,40,"_options$roundingMeth"],[62,124,67,40],[62,127,67,44],[62,134,67,51],[63,4,68,2],[63,8,68,8,"roundingMethod"],[63,22,68,22],[63,25,68,25],[63,29,68,25,"getRoundingMethod"],[63,59,68,25],[63,60,68,25,"getRoundingMethod"],[63,108,68,42],[63,110,68,43,"method"],[63,116,68,49],[63,117,68,50],[64,4,70,2],[64,8,70,8,"roundedHours"],[64,20,70,20],[64,23,70,23,"roundingMethod"],[64,37,70,37],[64,38,70,38,"hours"],[64,43,70,43],[64,46,70,46,"nearestTo"],[64,55,70,55],[64,56,70,56],[64,59,70,59,"nearestTo"],[64,68,70,68],[65,4,72,2,"date_"],[65,9,72,7],[65,10,72,8,"setHours"],[65,18,72,16],[65,19,72,17,"roundedHours"],[65,31,72,29],[65,33,72,31],[65,34,72,32],[65,36,72,34],[65,37,72,35],[65,39,72,37],[65,40,72,38],[65,41,72,39],[66,4,73,2],[66,11,73,9,"date_"],[66,16,73,14],[67,2,74,0],[69,2,76,0],[70,2,76,0],[70,6,76,0,"_default"],[70,14,76,0],[70,17,76,0,"exports"],[70,24,76,0],[70,25,76,0,"default"],[70,32,76,0],[70,35,77,15,"roundToNearestHours"],[70,54,77,34],[71,0,77,34],[71,3]],"functionMap":{"names":["<global>","roundToNearestHours"],"mappings":"AAA;OCkD;CDuB"}},"type":"js/module"}]}