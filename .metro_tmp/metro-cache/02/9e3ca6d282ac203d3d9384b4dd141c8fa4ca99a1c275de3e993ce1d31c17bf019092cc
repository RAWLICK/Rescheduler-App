{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":120,"column":0,"index":4694}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"lodash/inRange","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"xzTDcnEMlW2elhxiRh46wseog/g="}},{"name":"xdate","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":38},"end":{"line":2,"column":26,"index":64}}],"key":"qaC/XeccTYBPNEkj2XgFkW3bkVM="}},{"name":"../commons/constants","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":65},"end":{"line":3,"column":45,"index":110}}],"key":"024IXEZNN4pCTqmapID3hHpurWo="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.HOUR_BLOCK_HEIGHT = void 0;\n  exports.buildUnavailableHoursBlocks = buildUnavailableHoursBlocks;\n  exports.populateEvents = populateEvents;\n  var _inRange = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"lodash/inRange\"));\n  var _xdate = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"xdate\"));\n  var _constants = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"../commons/constants\"));\n  var HOUR_BLOCK_HEIGHT = exports.HOUR_BLOCK_HEIGHT = 100;\n  var OVERLAP_EVENTS_SPACINGS = 10;\n  var RIGHT_EDGE_SPACING = 10;\n  function buildEvent(event, left, width, _ref) {\n    var _ref$dayStart = _ref.dayStart,\n      dayStart = _ref$dayStart === void 0 ? 0 : _ref$dayStart,\n      _ref$hourBlockHeight = _ref.hourBlockHeight,\n      hourBlockHeight = _ref$hourBlockHeight === void 0 ? HOUR_BLOCK_HEIGHT : _ref$hourBlockHeight;\n    var startTime = new _xdate.default(event.start);\n    var endTime = event.end ? new _xdate.default(event.end) : new _xdate.default(startTime).addHours(1);\n    var dayStartTime = new _xdate.default(startTime).clearTime();\n    return Object.assign({}, event, {\n      top: (dayStartTime.diffHours(startTime) - dayStart) * hourBlockHeight,\n      height: startTime.diffHours(endTime) * hourBlockHeight,\n      width: width,\n      left: left\n    });\n  }\n  function hasCollision(a, b) {\n    return a.end > b.start && a.start < b.end;\n  }\n  function calcColumnSpan(event, columnIndex, columns) {\n    var colSpan = 1;\n    for (var i = columnIndex + 1; i < columns.length; i++) {\n      var column = columns[i];\n      var foundCollision = column.find(function (ev) {\n        return hasCollision(event, ev);\n      });\n      if (foundCollision) {\n        return colSpan;\n      }\n      colSpan++;\n    }\n    return colSpan;\n  }\n  function packOverlappingEventGroup(columns, calculatedEvents, populateOptions) {\n    var _populateOptions$scre = populateOptions.screenWidth,\n      screenWidth = _populateOptions$scre === void 0 ? _constants.default.screenWidth : _populateOptions$scre,\n      _populateOptions$righ = populateOptions.rightEdgeSpacing,\n      rightEdgeSpacing = _populateOptions$righ === void 0 ? RIGHT_EDGE_SPACING : _populateOptions$righ,\n      _populateOptions$over = populateOptions.overlapEventsSpacing,\n      overlapEventsSpacing = _populateOptions$over === void 0 ? OVERLAP_EVENTS_SPACINGS : _populateOptions$over;\n    columns.forEach(function (column, columnIndex) {\n      column.forEach(function (event) {\n        var totalWidth = screenWidth - rightEdgeSpacing;\n        var columnSpan = calcColumnSpan(event, columnIndex, columns);\n        var eventLeft = columnIndex / columns.length * totalWidth;\n        var eventWidth = totalWidth * (columnSpan / columns.length);\n        if (columnIndex + columnSpan <= columns.length - 1) {\n          eventWidth -= overlapEventsSpacing;\n        }\n        calculatedEvents.push(buildEvent(event, eventLeft, eventWidth, populateOptions));\n      });\n    });\n  }\n  function populateEvents(_events, populateOptions) {\n    var lastEnd = null;\n    var columns = [];\n    var calculatedEvents = [];\n    var events = _events.map(function (ev, index) {\n      return Object.assign({}, ev, {\n        index: index\n      });\n    }).sort(function (a, b) {\n      if (a.start < b.start) return -1;\n      if (a.start > b.start) return 1;\n      if (a.end < b.end) return -1;\n      if (a.end > b.end) return 1;\n      return 0;\n    });\n    events.forEach(function (ev) {\n      // Reset recent overlapping event group and start a new one\n      if (lastEnd !== null && ev.start >= lastEnd) {\n        packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n        columns = [];\n        lastEnd = null;\n      }\n      // Place current event in the right column where it doesn't overlap\n      var placed = false;\n      for (var i = 0; i < columns.length; i++) {\n        var col = columns[i];\n        if (!hasCollision(col[col.length - 1], ev)) {\n          col.push(ev);\n          placed = true;\n          break;\n        }\n      }\n      // If curr event wasn't placed in any of the columns, create a new column for it\n      if (!placed) {\n        columns.push([ev]);\n      }\n      if (lastEnd === null || ev.end > lastEnd) {\n        lastEnd = ev.end;\n      }\n    });\n    if (columns.length > 0) {\n      packOverlappingEventGroup(columns, calculatedEvents, populateOptions);\n    }\n    return calculatedEvents;\n  }\n  function buildUnavailableHoursBlocks() {\n    var unavailableHours = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 ? arguments[1] : undefined;\n    var _ref2 = options || {},\n      _ref2$hourBlockHeight = _ref2.hourBlockHeight,\n      hourBlockHeight = _ref2$hourBlockHeight === void 0 ? HOUR_BLOCK_HEIGHT : _ref2$hourBlockHeight,\n      _ref2$dayStart = _ref2.dayStart,\n      dayStart = _ref2$dayStart === void 0 ? 0 : _ref2$dayStart,\n      _ref2$dayEnd = _ref2.dayEnd,\n      dayEnd = _ref2$dayEnd === void 0 ? 24 : _ref2$dayEnd;\n    var totalDayHours = dayEnd - dayStart;\n    var totalDayHeight = (dayEnd - dayStart) * hourBlockHeight;\n    return unavailableHours.map(function (hours) {\n      if (!(0, _inRange.default)(hours.start, 0, 25) || !(0, _inRange.default)(hours.end, 0, 25)) {\n        console.error('Calendar Timeline unavailableHours is invalid. Hours should be between 0 and 24');\n        return undefined;\n      }\n      if (hours.start >= hours.end) {\n        console.error('Calendar Timeline availableHours is invalid. start hour should be earlier than end hour');\n        return undefined;\n      }\n      var startFixed = Math.max(hours.start, dayStart);\n      var endFixed = Math.min(hours.end, dayEnd);\n      return {\n        top: (startFixed - dayStart) / totalDayHours * totalDayHeight,\n        height: (endFixed - startFixed) * hourBlockHeight\n      };\n    })\n    // Note: this filter falsy values (undefined blocks)\n    .filter(Boolean);\n  }\n});","lineCount":143,"map":[[9,2,1,0],[9,6,1,0,"_inRange"],[9,14,1,0],[9,17,1,0,"_interopRequireDefault"],[9,39,1,0],[9,40,1,0,"_$$_REQUIRE"],[9,51,1,0],[9,52,1,0,"_dependencyMap"],[9,66,1,0],[10,2,2,0],[10,6,2,0,"_xdate"],[10,12,2,0],[10,15,2,0,"_interopRequireDefault"],[10,37,2,0],[10,38,2,0,"_$$_REQUIRE"],[10,49,2,0],[10,50,2,0,"_dependencyMap"],[10,64,2,0],[11,2,3,0],[11,6,3,0,"_constants"],[11,16,3,0],[11,19,3,0,"_interopRequireDefault"],[11,41,3,0],[11,42,3,0,"_$$_REQUIRE"],[11,53,3,0],[11,54,3,0,"_dependencyMap"],[11,68,3,0],[12,2,4,7],[12,6,4,13,"HOUR_BLOCK_HEIGHT"],[12,23,4,30],[12,26,4,30,"exports"],[12,33,4,30],[12,34,4,30,"HOUR_BLOCK_HEIGHT"],[12,51,4,30],[12,54,4,33],[12,57,4,36],[13,2,5,0],[13,6,5,6,"OVERLAP_EVENTS_SPACINGS"],[13,29,5,29],[13,32,5,32],[13,34,5,34],[14,2,6,0],[14,6,6,6,"RIGHT_EDGE_SPACING"],[14,24,6,24],[14,27,6,27],[14,29,6,29],[15,2,7,0],[15,11,7,9,"buildEvent"],[15,21,7,19,"buildEvent"],[15,22,7,20,"event"],[15,27,7,25],[15,29,7,27,"left"],[15,33,7,31],[15,35,7,33,"width"],[15,40,7,38],[15,42,7,38,"_ref"],[15,46,7,38],[15,48,7,95],[16,4,7,95],[16,8,7,95,"_ref$dayStart"],[16,21,7,95],[16,24,7,95,"_ref"],[16,28,7,95],[16,29,7,42,"dayStart"],[16,37,7,50],[17,6,7,42,"dayStart"],[17,14,7,50],[17,17,7,50,"_ref$dayStart"],[17,30,7,50],[17,44,7,53],[17,45,7,54],[17,48,7,54,"_ref$dayStart"],[17,61,7,54],[18,6,7,54,"_ref$hourBlockHeight"],[18,26,7,54],[18,29,7,54,"_ref"],[18,33,7,54],[18,34,7,56,"hourBlockHeight"],[18,49,7,71],[19,6,7,56,"hourBlockHeight"],[19,21,7,71],[19,24,7,71,"_ref$hourBlockHeight"],[19,44,7,71],[19,58,7,74,"HOUR_BLOCK_HEIGHT"],[19,75,7,91],[19,78,7,91,"_ref$hourBlockHeight"],[19,98,7,91],[20,4,8,4],[20,8,8,10,"startTime"],[20,17,8,19],[20,20,8,22],[20,24,8,26,"XDate"],[20,38,8,31],[20,39,8,32,"event"],[20,44,8,37],[20,45,8,38,"start"],[20,50,8,43],[20,51,8,44],[21,4,9,4],[21,8,9,10,"endTime"],[21,15,9,17],[21,18,9,20,"event"],[21,23,9,25],[21,24,9,26,"end"],[21,27,9,29],[21,30,9,32],[21,34,9,36,"XDate"],[21,48,9,41],[21,49,9,42,"event"],[21,54,9,47],[21,55,9,48,"end"],[21,58,9,51],[21,59,9,52],[21,62,9,55],[21,66,9,59,"XDate"],[21,80,9,64],[21,81,9,65,"startTime"],[21,90,9,74],[21,91,9,75],[21,92,9,76,"addHours"],[21,100,9,84],[21,101,9,85],[21,102,9,86],[21,103,9,87],[22,4,10,4],[22,8,10,10,"dayStartTime"],[22,20,10,22],[22,23,10,25],[22,27,10,29,"XDate"],[22,41,10,34],[22,42,10,35,"startTime"],[22,51,10,44],[22,52,10,45],[22,53,10,46,"clearTime"],[22,62,10,55],[22,63,10,56],[22,64,10,57],[23,4,11,4],[23,11,11,4,"Object"],[23,17,11,4],[23,18,11,4,"assign"],[23,24,11,4],[23,29,12,11,"event"],[23,34,12,16],[24,6,13,8,"top"],[24,9,13,11],[24,11,13,13],[24,12,13,14,"dayStartTime"],[24,24,13,26],[24,25,13,27,"diffHours"],[24,34,13,36],[24,35,13,37,"startTime"],[24,44,13,46],[24,45,13,47],[24,48,13,50,"dayStart"],[24,56,13,58],[24,60,13,62,"hourBlockHeight"],[24,75,13,77],[25,6,14,8,"height"],[25,12,14,14],[25,14,14,16,"startTime"],[25,23,14,25],[25,24,14,26,"diffHours"],[25,33,14,35],[25,34,14,36,"endTime"],[25,41,14,43],[25,42,14,44],[25,45,14,47,"hourBlockHeight"],[25,60,14,62],[26,6,15,8,"width"],[26,11,15,13],[26,13,15,8,"width"],[26,18,15,13],[27,6,16,8,"left"],[27,10,16,12],[27,12,16,8,"left"],[28,4,16,12],[29,2,18,0],[30,2,19,0],[30,11,19,9,"hasCollision"],[30,23,19,21,"hasCollision"],[30,24,19,22,"a"],[30,25,19,23],[30,27,19,25,"b"],[30,28,19,26],[30,30,19,28],[31,4,20,4],[31,11,20,11,"a"],[31,12,20,12],[31,13,20,13,"end"],[31,16,20,16],[31,19,20,19,"b"],[31,20,20,20],[31,21,20,21,"start"],[31,26,20,26],[31,30,20,30,"a"],[31,31,20,31],[31,32,20,32,"start"],[31,37,20,37],[31,40,20,40,"b"],[31,41,20,41],[31,42,20,42,"end"],[31,45,20,45],[32,2,21,0],[33,2,22,0],[33,11,22,9,"calcColumnSpan"],[33,25,22,23,"calcColumnSpan"],[33,26,22,24,"event"],[33,31,22,29],[33,33,22,31,"columnIndex"],[33,44,22,42],[33,46,22,44,"columns"],[33,53,22,51],[33,55,22,53],[34,4,23,4],[34,8,23,8,"colSpan"],[34,15,23,15],[34,18,23,18],[34,19,23,19],[35,4,24,4],[35,9,24,9],[35,13,24,13,"i"],[35,14,24,14],[35,17,24,17,"columnIndex"],[35,28,24,28],[35,31,24,31],[35,32,24,32],[35,34,24,34,"i"],[35,35,24,35],[35,38,24,38,"columns"],[35,45,24,45],[35,46,24,46,"length"],[35,52,24,52],[35,54,24,54,"i"],[35,55,24,55],[35,57,24,57],[35,59,24,59],[36,6,25,8],[36,10,25,14,"column"],[36,16,25,20],[36,19,25,23,"columns"],[36,26,25,30],[36,27,25,31,"i"],[36,28,25,32],[36,29,25,33],[37,6,26,8],[37,10,26,14,"foundCollision"],[37,24,26,28],[37,27,26,31,"column"],[37,33,26,37],[37,34,26,38,"find"],[37,38,26,42],[37,39,26,43],[37,49,26,43,"ev"],[37,51,26,45],[38,8,26,45],[38,15,26,49,"hasCollision"],[38,27,26,61],[38,28,26,62,"event"],[38,33,26,67],[38,35,26,69,"ev"],[38,37,26,71],[38,38,26,72],[39,6,26,72],[39,8,26,73],[40,6,27,8],[40,10,27,12,"foundCollision"],[40,24,27,26],[40,26,27,28],[41,8,28,12],[41,15,28,19,"colSpan"],[41,22,28,26],[42,6,29,8],[43,6,30,8,"colSpan"],[43,13,30,15],[43,15,30,17],[44,4,31,4],[45,4,32,4],[45,11,32,11,"colSpan"],[45,18,32,18],[46,2,33,0],[47,2,34,0],[47,11,34,9,"packOverlappingEventGroup"],[47,36,34,34,"packOverlappingEventGroup"],[47,37,34,35,"columns"],[47,44,34,42],[47,46,34,44,"calculatedEvents"],[47,62,34,60],[47,64,34,62,"populateOptions"],[47,79,34,77],[47,81,34,79],[48,4,35,4],[48,8,35,4,"_populateOptions$scre"],[48,29,35,4],[48,32,35,139,"populateOptions"],[48,47,35,154],[48,48,35,12,"screenWidth"],[48,59,35,23],[49,6,35,12,"screenWidth"],[49,17,35,23],[49,20,35,23,"_populateOptions$scre"],[49,41,35,23],[49,55,35,26,"constants"],[49,73,35,35],[49,74,35,36,"screenWidth"],[49,85,35,47],[49,88,35,47,"_populateOptions$scre"],[49,109,35,47],[50,6,35,47,"_populateOptions$righ"],[50,27,35,47],[50,30,35,139,"populateOptions"],[50,45,35,154],[50,46,35,49,"rightEdgeSpacing"],[50,62,35,65],[51,6,35,49,"rightEdgeSpacing"],[51,22,35,65],[51,25,35,65,"_populateOptions$righ"],[51,46,35,65],[51,60,35,68,"RIGHT_EDGE_SPACING"],[51,78,35,86],[51,81,35,86,"_populateOptions$righ"],[51,102,35,86],[52,6,35,86,"_populateOptions$over"],[52,27,35,86],[52,30,35,139,"populateOptions"],[52,45,35,154],[52,46,35,88,"overlapEventsSpacing"],[52,66,35,108],[53,6,35,88,"overlapEventsSpacing"],[53,26,35,108],[53,29,35,108,"_populateOptions$over"],[53,50,35,108],[53,64,35,111,"OVERLAP_EVENTS_SPACINGS"],[53,87,35,134],[53,90,35,134,"_populateOptions$over"],[53,111,35,134],[54,4,36,4,"columns"],[54,11,36,11],[54,12,36,12,"forEach"],[54,19,36,19],[54,20,36,20],[54,30,36,21,"column"],[54,36,36,27],[54,38,36,29,"columnIndex"],[54,49,36,40],[54,51,36,45],[55,6,37,8,"column"],[55,12,37,14],[55,13,37,15,"forEach"],[55,20,37,22],[55,21,37,23],[55,31,37,23,"event"],[55,36,37,28],[55,38,37,32],[56,8,38,12],[56,12,38,18,"totalWidth"],[56,22,38,28],[56,25,38,31,"screenWidth"],[56,36,38,42],[56,39,38,45,"rightEdgeSpacing"],[56,55,38,61],[57,8,39,12],[57,12,39,18,"columnSpan"],[57,22,39,28],[57,25,39,31,"calcColumnSpan"],[57,39,39,45],[57,40,39,46,"event"],[57,45,39,51],[57,47,39,53,"columnIndex"],[57,58,39,64],[57,60,39,66,"columns"],[57,67,39,73],[57,68,39,74],[58,8,40,12],[58,12,40,18,"eventLeft"],[58,21,40,27],[58,24,40,31,"columnIndex"],[58,35,40,42],[58,38,40,45,"columns"],[58,45,40,52],[58,46,40,53,"length"],[58,52,40,59],[58,55,40,63,"totalWidth"],[58,65,40,73],[59,8,41,12],[59,12,41,16,"eventWidth"],[59,22,41,26],[59,25,41,29,"totalWidth"],[59,35,41,39],[59,39,41,43,"columnSpan"],[59,49,41,53],[59,52,41,56,"columns"],[59,59,41,63],[59,60,41,64,"length"],[59,66,41,70],[59,67,41,71],[60,8,42,12],[60,12,42,16,"columnIndex"],[60,23,42,27],[60,26,42,30,"columnSpan"],[60,36,42,40],[60,40,42,44,"columns"],[60,47,42,51],[60,48,42,52,"length"],[60,54,42,58],[60,57,42,61],[60,58,42,62],[60,60,42,64],[61,10,43,16,"eventWidth"],[61,20,43,26],[61,24,43,30,"overlapEventsSpacing"],[61,44,43,50],[62,8,44,12],[63,8,45,12,"calculatedEvents"],[63,24,45,28],[63,25,45,29,"push"],[63,29,45,33],[63,30,45,34,"buildEvent"],[63,40,45,44],[63,41,45,45,"event"],[63,46,45,50],[63,48,45,52,"eventLeft"],[63,57,45,61],[63,59,45,63,"eventWidth"],[63,69,45,73],[63,71,45,75,"populateOptions"],[63,86,45,90],[63,87,45,91],[63,88,45,92],[64,6,46,8],[64,7,46,9],[64,8,46,10],[65,4,47,4],[65,5,47,5],[65,6,47,6],[66,2,48,0],[67,2,49,7],[67,11,49,16,"populateEvents"],[67,25,49,30,"populateEvents"],[67,26,49,31,"_events"],[67,33,49,38],[67,35,49,40,"populateOptions"],[67,50,49,55],[67,52,49,57],[68,4,50,4],[68,8,50,8,"lastEnd"],[68,15,50,15],[68,18,50,18],[68,22,50,22],[69,4,51,4],[69,8,51,8,"columns"],[69,15,51,15],[69,18,51,18],[69,20,51,20],[70,4,52,4],[70,8,52,10,"calculatedEvents"],[70,24,52,26],[70,27,52,29],[70,29,52,31],[71,4,53,4],[71,8,53,10,"events"],[71,14,53,16],[71,17,53,19,"_events"],[71,24,53,26],[71,25,54,9,"map"],[71,28,54,12],[71,29,54,13],[71,39,54,14,"ev"],[71,41,54,16],[71,43,54,18,"index"],[71,48,54,23],[72,6,54,23],[72,13,54,23,"Object"],[72,19,54,23],[72,20,54,23,"assign"],[72,26,54,23],[72,31,54,34,"ev"],[72,33,54,36],[73,8,54,38,"index"],[73,13,54,43],[73,15,54,45,"index"],[74,6,54,50],[75,4,54,50],[75,5,54,53],[75,6,54,54],[75,7,55,9,"sort"],[75,11,55,13],[75,12,55,14],[75,22,55,24,"a"],[75,23,55,25],[75,25,55,27,"b"],[75,26,55,28],[75,28,55,30],[76,6,56,8],[76,10,56,12,"a"],[76,11,56,13],[76,12,56,14,"start"],[76,17,56,19],[76,20,56,22,"b"],[76,21,56,23],[76,22,56,24,"start"],[76,27,56,29],[76,29,57,12],[76,36,57,19],[76,37,57,20],[76,38,57,21],[77,6,58,8],[77,10,58,12,"a"],[77,11,58,13],[77,12,58,14,"start"],[77,17,58,19],[77,20,58,22,"b"],[77,21,58,23],[77,22,58,24,"start"],[77,27,58,29],[77,29,59,12],[77,36,59,19],[77,37,59,20],[78,6,60,8],[78,10,60,12,"a"],[78,11,60,13],[78,12,60,14,"end"],[78,15,60,17],[78,18,60,20,"b"],[78,19,60,21],[78,20,60,22,"end"],[78,23,60,25],[78,25,61,12],[78,32,61,19],[78,33,61,20],[78,34,61,21],[79,6,62,8],[79,10,62,12,"a"],[79,11,62,13],[79,12,62,14,"end"],[79,15,62,17],[79,18,62,20,"b"],[79,19,62,21],[79,20,62,22,"end"],[79,23,62,25],[79,25,63,12],[79,32,63,19],[79,33,63,20],[80,6,64,8],[80,13,64,15],[80,14,64,16],[81,4,65,4],[81,5,65,5],[81,6,65,6],[82,4,66,4,"events"],[82,10,66,10],[82,11,66,11,"forEach"],[82,18,66,18],[82,19,66,19],[82,29,66,29,"ev"],[82,31,66,31],[82,33,66,33],[83,6,67,8],[84,6,68,8],[84,10,68,12,"lastEnd"],[84,17,68,19],[84,22,68,24],[84,26,68,28],[84,30,68,32,"ev"],[84,32,68,34],[84,33,68,35,"start"],[84,38,68,40],[84,42,68,44,"lastEnd"],[84,49,68,51],[84,51,68,53],[85,8,69,12,"packOverlappingEventGroup"],[85,33,69,37],[85,34,69,38,"columns"],[85,41,69,45],[85,43,69,47,"calculatedEvents"],[85,59,69,63],[85,61,69,65,"populateOptions"],[85,76,69,80],[85,77,69,81],[86,8,70,12,"columns"],[86,15,70,19],[86,18,70,22],[86,20,70,24],[87,8,71,12,"lastEnd"],[87,15,71,19],[87,18,71,22],[87,22,71,26],[88,6,72,8],[89,6,73,8],[90,6,74,8],[90,10,74,12,"placed"],[90,16,74,18],[90,19,74,21],[90,24,74,26],[91,6,75,8],[91,11,75,13],[91,15,75,17,"i"],[91,16,75,18],[91,19,75,21],[91,20,75,22],[91,22,75,24,"i"],[91,23,75,25],[91,26,75,28,"columns"],[91,33,75,35],[91,34,75,36,"length"],[91,40,75,42],[91,42,75,44,"i"],[91,43,75,45],[91,45,75,47],[91,47,75,49],[92,8,76,12],[92,12,76,18,"col"],[92,15,76,21],[92,18,76,24,"columns"],[92,25,76,31],[92,26,76,32,"i"],[92,27,76,33],[92,28,76,34],[93,8,77,12],[93,12,77,16],[93,13,77,17,"hasCollision"],[93,25,77,29],[93,26,77,30,"col"],[93,29,77,33],[93,30,77,34,"col"],[93,33,77,37],[93,34,77,38,"length"],[93,40,77,44],[93,43,77,47],[93,44,77,48],[93,45,77,49],[93,47,77,51,"ev"],[93,49,77,53],[93,50,77,54],[93,52,77,56],[94,10,78,16,"col"],[94,13,78,19],[94,14,78,20,"push"],[94,18,78,24],[94,19,78,25,"ev"],[94,21,78,27],[94,22,78,28],[95,10,79,16,"placed"],[95,16,79,22],[95,19,79,25],[95,23,79,29],[96,10,80,16],[97,8,81,12],[98,6,82,8],[99,6,83,8],[100,6,84,8],[100,10,84,12],[100,11,84,13,"placed"],[100,17,84,19],[100,19,84,21],[101,8,85,12,"columns"],[101,15,85,19],[101,16,85,20,"push"],[101,20,85,24],[101,21,85,25],[101,22,85,26,"ev"],[101,24,85,28],[101,25,85,29],[101,26,85,30],[102,6,86,8],[103,6,87,8],[103,10,87,12,"lastEnd"],[103,17,87,19],[103,22,87,24],[103,26,87,28],[103,30,87,32,"ev"],[103,32,87,34],[103,33,87,35,"end"],[103,36,87,38],[103,39,87,41,"lastEnd"],[103,46,87,48],[103,48,87,50],[104,8,88,12,"lastEnd"],[104,15,88,19],[104,18,88,22,"ev"],[104,20,88,24],[104,21,88,25,"end"],[104,24,88,28],[105,6,89,8],[106,4,90,4],[106,5,90,5],[106,6,90,6],[107,4,91,4],[107,8,91,8,"columns"],[107,15,91,15],[107,16,91,16,"length"],[107,22,91,22],[107,25,91,25],[107,26,91,26],[107,28,91,28],[108,6,92,8,"packOverlappingEventGroup"],[108,31,92,33],[108,32,92,34,"columns"],[108,39,92,41],[108,41,92,43,"calculatedEvents"],[108,57,92,59],[108,59,92,61,"populateOptions"],[108,74,92,76],[108,75,92,77],[109,4,93,4],[110,4,94,4],[110,11,94,11,"calculatedEvents"],[110,27,94,27],[111,2,95,0],[112,2,96,7],[112,11,96,16,"buildUnavailableHoursBlocks"],[112,38,96,43,"buildUnavailableHoursBlocks"],[112,39,96,43],[112,41,96,76],[113,4,96,76],[113,8,96,44,"unavailableHours"],[113,24,96,60],[113,27,96,60,"arguments"],[113,36,96,60],[113,37,96,60,"length"],[113,43,96,60],[113,51,96,60,"arguments"],[113,60,96,60],[113,68,96,60,"undefined"],[113,77,96,60],[113,80,96,60,"arguments"],[113,89,96,60],[113,95,96,63],[113,97,96,65],[114,4,96,65],[114,8,96,67,"options"],[114,15,96,74],[114,18,96,74,"arguments"],[114,27,96,74],[114,28,96,74,"length"],[114,34,96,74],[114,41,96,74,"arguments"],[114,50,96,74],[114,56,96,74,"undefined"],[114,65,96,74],[115,4,97,4],[115,8,97,4,"_ref2"],[115,13,97,4],[115,16,97,79,"options"],[115,23,97,86],[115,27,97,90],[115,28,97,91],[115,29,97,92],[116,6,97,92,"_ref2$hourBlockHeight"],[116,27,97,92],[116,30,97,92,"_ref2"],[116,35,97,92],[116,36,97,12,"hourBlockHeight"],[116,51,97,27],[117,6,97,12,"hourBlockHeight"],[117,21,97,27],[117,24,97,27,"_ref2$hourBlockHeight"],[117,45,97,27],[117,59,97,30,"HOUR_BLOCK_HEIGHT"],[117,76,97,47],[117,79,97,47,"_ref2$hourBlockHeight"],[117,100,97,47],[118,6,97,47,"_ref2$dayStart"],[118,20,97,47],[118,23,97,47,"_ref2"],[118,28,97,47],[118,29,97,49,"dayStart"],[118,37,97,57],[119,6,97,49,"dayStart"],[119,14,97,57],[119,17,97,57,"_ref2$dayStart"],[119,31,97,57],[119,45,97,60],[119,46,97,61],[119,49,97,61,"_ref2$dayStart"],[119,63,97,61],[120,6,97,61,"_ref2$dayEnd"],[120,18,97,61],[120,21,97,61,"_ref2"],[120,26,97,61],[120,27,97,63,"dayEnd"],[120,33,97,69],[121,6,97,63,"dayEnd"],[121,12,97,69],[121,15,97,69,"_ref2$dayEnd"],[121,27,97,69],[121,41,97,72],[121,43,97,74],[121,46,97,74,"_ref2$dayEnd"],[121,58,97,74],[122,4,98,4],[122,8,98,10,"totalDayHours"],[122,21,98,23],[122,24,98,26,"dayEnd"],[122,30,98,32],[122,33,98,35,"dayStart"],[122,41,98,43],[123,4,99,4],[123,8,99,10,"totalDayHeight"],[123,22,99,24],[123,25,99,27],[123,26,99,28,"dayEnd"],[123,32,99,34],[123,35,99,37,"dayStart"],[123,43,99,45],[123,47,99,49,"hourBlockHeight"],[123,62,99,64],[124,4,100,4],[124,11,100,12,"unavailableHours"],[124,27,100,28],[124,28,101,9,"map"],[124,31,101,12],[124,32,101,13],[124,42,101,13,"hours"],[124,47,101,18],[124,49,101,22],[125,6,102,8],[125,10,102,12],[125,11,102,13],[125,15,102,13,"inRange"],[125,31,102,20],[125,33,102,21,"hours"],[125,38,102,26],[125,39,102,27,"start"],[125,44,102,32],[125,46,102,34],[125,47,102,35],[125,49,102,37],[125,51,102,39],[125,52,102,40],[125,56,102,44],[125,57,102,45],[125,61,102,45,"inRange"],[125,77,102,52],[125,79,102,53,"hours"],[125,84,102,58],[125,85,102,59,"end"],[125,88,102,62],[125,90,102,64],[125,91,102,65],[125,93,102,67],[125,95,102,69],[125,96,102,70],[125,98,102,72],[126,8,103,12,"console"],[126,15,103,19],[126,16,103,20,"error"],[126,21,103,25],[126,22,103,26],[126,103,103,107],[126,104,103,108],[127,8,104,12],[127,15,104,19,"undefined"],[127,24,104,28],[128,6,105,8],[129,6,106,8],[129,10,106,12,"hours"],[129,15,106,17],[129,16,106,18,"start"],[129,21,106,23],[129,25,106,27,"hours"],[129,30,106,32],[129,31,106,33,"end"],[129,34,106,36],[129,36,106,38],[130,8,107,12,"console"],[130,15,107,19],[130,16,107,20,"error"],[130,21,107,25],[130,22,107,26],[130,111,107,115],[130,112,107,116],[131,8,108,12],[131,15,108,19,"undefined"],[131,24,108,28],[132,6,109,8],[133,6,110,8],[133,10,110,14,"startFixed"],[133,20,110,24],[133,23,110,27,"Math"],[133,27,110,31],[133,28,110,32,"max"],[133,31,110,35],[133,32,110,36,"hours"],[133,37,110,41],[133,38,110,42,"start"],[133,43,110,47],[133,45,110,49,"dayStart"],[133,53,110,57],[133,54,110,58],[134,6,111,8],[134,10,111,14,"endFixed"],[134,18,111,22],[134,21,111,25,"Math"],[134,25,111,29],[134,26,111,30,"min"],[134,29,111,33],[134,30,111,34,"hours"],[134,35,111,39],[134,36,111,40,"end"],[134,39,111,43],[134,41,111,45,"dayEnd"],[134,47,111,51],[134,48,111,52],[135,6,112,8],[135,13,112,15],[136,8,113,12,"top"],[136,11,113,15],[136,13,113,18],[136,14,113,19,"startFixed"],[136,24,113,29],[136,27,113,32,"dayStart"],[136,35,113,40],[136,39,113,44,"totalDayHours"],[136,52,113,57],[136,55,113,61,"totalDayHeight"],[136,69,113,75],[137,8,114,12,"height"],[137,14,114,18],[137,16,114,20],[137,17,114,21,"endFixed"],[137,25,114,29],[137,28,114,32,"startFixed"],[137,38,114,42],[137,42,114,46,"hourBlockHeight"],[138,6,115,8],[138,7,115,9],[139,4,116,4],[139,5,116,5],[140,4,117,8],[141,4,117,8],[141,5,118,9,"filter"],[141,11,118,15],[141,12,118,16,"Boolean"],[141,19,118,23],[141,20,118,24],[142,2,119,0],[143,0,119,1],[143,3]],"functionMap":{"names":["<global>","buildEvent","hasCollision","calcColumnSpan","column.find$argument_0","packOverlappingEventGroup","columns.forEach$argument_0","column.forEach$argument_0","populateEvents","_events.map$argument_0","_events.map.sort$argument_0","events.forEach$argument_0","buildUnavailableHoursBlocks","unavailableHours.map$argument_0"],"mappings":"AAA;ACM;CDW;AEC;CFE;AGC;2CCI,6BD;CHO;AKC;oBCE;uBCC;SDS;KDC;CLC;OQC;aCK,wCD;cEC;KFU;mBGC;KHwB;CRK;OYC;aCK;KDe;CZG"}},"type":"js/module"}]}