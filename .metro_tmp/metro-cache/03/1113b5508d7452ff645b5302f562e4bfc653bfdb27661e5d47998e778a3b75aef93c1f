{"dependencies":[{"name":"./toDate.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":52},"end":{"line":2,"column":37,"index":89}}],"key":"o2GbHlM0wxsRaLWHEC6986QcehU="}},{"name":"./constructFrom.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"fe1vuD5Al7BWVRtgitxEm0VpSx0="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.addMonths = addMonths;\n  exports.default = void 0;\n  /**\n   * The {@link addMonths} function options.\n   */\n\n  /**\n   * @name addMonths\n   * @category Month Helpers\n   * @summary Add the specified number of months to the given date.\n   *\n   * @description\n   * Add the specified number of months to the given date.\n   *\n   * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n   * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n   *\n   * @param date - The date to be changed\n   * @param amount - The amount of months to be added.\n   * @param options - The options object\n   *\n   * @returns The new date with the months added\n   *\n   * @example\n   * // Add 5 months to 1 September 2014:\n   * const result = addMonths(new Date(2014, 8, 1), 5)\n   * //=> Sun Feb 01 2015 00:00:00\n   *\n   * // Add one month to 30 January 2023:\n   * const result = addMonths(new Date(2023, 0, 30), 1)\n   * //=> Tue Feb 28 2023 00:00:00\n   */\n  function addMonths(date, amount, options) {\n    var _date = (0, _$$_REQUIRE(_dependencyMap[0], \"./toDate.js\").toDate)(date, options == null ? void 0 : options.in);\n    if (isNaN(amount)) return (0, _$$_REQUIRE(_dependencyMap[1], \"./constructFrom.js\").constructFrom)((options == null ? void 0 : options.in) || date, NaN);\n    if (!amount) {\n      // If 0 months, no-op to avoid changing times in the hour before end of DST\n      return _date;\n    }\n    var dayOfMonth = _date.getDate();\n\n    // The JS Date object supports date math by accepting out-of-bounds values for\n    // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n    // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n    // want except that dates will wrap around the end of a month, meaning that\n    // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n    // we'll default to the end of the desired month by adding 1 to the desired\n    // month and using a date of 0 to back up one day to the end of the desired\n    // month.\n    var endOfDesiredMonth = (0, _$$_REQUIRE(_dependencyMap[1], \"./constructFrom.js\").constructFrom)((options == null ? void 0 : options.in) || date, _date.getTime());\n    endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);\n    var daysInMonth = endOfDesiredMonth.getDate();\n    if (dayOfMonth >= daysInMonth) {\n      // If we're already at the end of the month, then this is the correct date\n      // and we're done.\n      return endOfDesiredMonth;\n    } else {\n      // Otherwise, we now know that setting the original day-of-month value won't\n      // cause an overflow, so set the desired day-of-month. Note that we can't\n      // just set the date of `endOfDesiredMonth` because that object may have had\n      // its time changed in the unusual case where where a DST transition was on\n      // the last day of the month and its local time was in the hour skipped or\n      // repeated next to a DST transition.  So we use `date` instead which is\n      // guaranteed to still have the original time.\n      _date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n      return _date;\n    }\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = addMonths;\n});","lineCount":76,"map":[[7,2,4,0],[8,0,5,0],[9,0,6,0],[11,2,8,0],[12,0,9,0],[13,0,10,0],[14,0,11,0],[15,0,12,0],[16,0,13,0],[17,0,14,0],[18,0,15,0],[19,0,16,0],[20,0,17,0],[21,0,18,0],[22,0,19,0],[23,0,20,0],[24,0,21,0],[25,0,22,0],[26,0,23,0],[27,0,24,0],[28,0,25,0],[29,0,26,0],[30,0,27,0],[31,0,28,0],[32,0,29,0],[33,0,30,0],[34,0,31,0],[35,0,32,0],[36,0,33,0],[37,2,34,7],[37,11,34,16,"addMonths"],[37,20,34,25,"addMonths"],[37,21,34,26,"date"],[37,25,34,30],[37,27,34,32,"amount"],[37,33,34,38],[37,35,34,40,"options"],[37,42,34,47],[37,44,34,49],[38,4,35,2],[38,8,35,8,"_date"],[38,13,35,13],[38,16,35,16],[38,20,35,16,"toDate"],[38,50,35,16],[38,51,35,16,"toDate"],[38,72,35,22],[38,74,35,23,"date"],[38,78,35,27],[38,80,35,29,"options"],[38,87,35,36],[38,107,35,29,"options"],[38,114,35,36],[38,115,35,38,"in"],[38,117,35,40],[38,118,35,41],[39,4,36,2],[39,8,36,6,"isNaN"],[39,13,36,11],[39,14,36,12,"amount"],[39,20,36,18],[39,21,36,19],[39,23,36,21],[39,30,36,28],[39,34,36,28,"constructFrom"],[39,64,36,28],[39,65,36,28,"constructFrom"],[39,100,36,41],[39,102,36,42],[39,103,36,42,"options"],[39,110,36,49],[39,130,36,42,"options"],[39,137,36,49],[39,138,36,51,"in"],[39,140,36,53],[39,145,36,57,"date"],[39,149,36,61],[39,151,36,63,"NaN"],[39,154,36,66],[39,155,36,67],[40,4,37,2],[40,8,37,6],[40,9,37,7,"amount"],[40,15,37,13],[40,17,37,15],[41,6,38,4],[42,6,39,4],[42,13,39,11,"_date"],[42,18,39,16],[43,4,40,2],[44,4,41,2],[44,8,41,8,"dayOfMonth"],[44,18,41,18],[44,21,41,21,"_date"],[44,26,41,26],[44,27,41,27,"getDate"],[44,34,41,34],[44,35,41,35],[44,36,41,36],[46,4,43,2],[47,4,44,2],[48,4,45,2],[49,4,46,2],[50,4,47,2],[51,4,48,2],[52,4,49,2],[53,4,50,2],[54,4,51,2],[54,8,51,8,"endOfDesiredMonth"],[54,25,51,25],[54,28,51,28],[54,32,51,28,"constructFrom"],[54,62,51,28],[54,63,51,28,"constructFrom"],[54,98,51,41],[54,100,51,42],[54,101,51,42,"options"],[54,108,51,49],[54,128,51,42,"options"],[54,135,51,49],[54,136,51,51,"in"],[54,138,51,53],[54,143,51,57,"date"],[54,147,51,61],[54,149,51,63,"_date"],[54,154,51,68],[54,155,51,69,"getTime"],[54,162,51,76],[54,163,51,77],[54,164,51,78],[54,165,51,79],[55,4,52,2,"endOfDesiredMonth"],[55,21,52,19],[55,22,52,20,"setMonth"],[55,30,52,28],[55,31,52,29,"_date"],[55,36,52,34],[55,37,52,35,"getMonth"],[55,45,52,43],[55,46,52,44],[55,47,52,45],[55,50,52,48,"amount"],[55,56,52,54],[55,59,52,57],[55,60,52,58],[55,62,52,60],[55,63,52,61],[55,64,52,62],[56,4,53,2],[56,8,53,8,"daysInMonth"],[56,19,53,19],[56,22,53,22,"endOfDesiredMonth"],[56,39,53,39],[56,40,53,40,"getDate"],[56,47,53,47],[56,48,53,48],[56,49,53,49],[57,4,54,2],[57,8,54,6,"dayOfMonth"],[57,18,54,16],[57,22,54,20,"daysInMonth"],[57,33,54,31],[57,35,54,33],[58,6,55,4],[59,6,56,4],[60,6,57,4],[60,13,57,11,"endOfDesiredMonth"],[60,30,57,28],[61,4,58,2],[61,5,58,3],[61,11,58,9],[62,6,59,4],[63,6,60,4],[64,6,61,4],[65,6,62,4],[66,6,63,4],[67,6,64,4],[68,6,65,4],[69,6,66,4,"_date"],[69,11,66,9],[69,12,66,10,"setFullYear"],[69,23,66,21],[69,24,67,6,"endOfDesiredMonth"],[69,41,67,23],[69,42,67,24,"getFullYear"],[69,53,67,35],[69,54,67,36],[69,55,67,37],[69,57,68,6,"endOfDesiredMonth"],[69,74,68,23],[69,75,68,24,"getMonth"],[69,83,68,32],[69,84,68,33],[69,85,68,34],[69,87,69,6,"dayOfMonth"],[69,97,70,4],[69,98,70,5],[70,6,71,4],[70,13,71,11,"_date"],[70,18,71,16],[71,4,72,2],[72,2,73,0],[74,2,75,0],[75,2,75,0],[75,6,75,0,"_default"],[75,14,75,0],[75,17,75,0,"exports"],[75,24,75,0],[75,25,75,0,"default"],[75,32,75,0],[75,35,76,15,"addMonths"],[75,44,76,24],[76,0,76,24],[76,3]],"functionMap":{"names":["<global>","addMonths"],"mappings":"AAA;OCiC;CDuC"}},"type":"js/module"}]}