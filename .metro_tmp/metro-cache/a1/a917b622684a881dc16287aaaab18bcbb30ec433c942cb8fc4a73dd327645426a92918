{"dependencies":[{"name":"./toDate.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":37,"index":37}}],"key":"o2GbHlM0wxsRaLWHEC6986QcehU="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.closestIndexTo = closestIndexTo;\n  exports.default = void 0;\n  /**\n   * @name closestIndexTo\n   * @category Common Helpers\n   * @summary Return an index of the closest date from the array comparing to the given date.\n   *\n   * @description\n   * Return an index of the closest date from the array comparing to the given date.\n   *\n   * @param dateToCompare - The date to compare with\n   * @param dates - The array to search\n   *\n   * @returns An index of the date closest to the given date or undefined if no valid value is given\n   *\n   * @example\n   * // Which date is closer to 6 September 2015?\n   * const dateToCompare = new Date(2015, 8, 6)\n   * const datesArray = [\n   *   new Date(2015, 0, 1),\n   *   new Date(2016, 0, 1),\n   *   new Date(2017, 0, 1)\n   * ]\n   * const result = closestIndexTo(dateToCompare, datesArray)\n   * //=> 1\n   */\n  function closestIndexTo(dateToCompare, dates) {\n    // [TODO] It would be better to return -1 here rather than undefined, as this\n    // is how JS behaves, but it would be a breaking change, so we need\n    // to consider it for v4.\n    var timeToCompare = +(0, _$$_REQUIRE(_dependencyMap[0], \"./toDate.js\").toDate)(dateToCompare);\n    if (isNaN(timeToCompare)) return NaN;\n    var result;\n    var minDistance;\n    dates.forEach(function (date, index) {\n      var date_ = (0, _$$_REQUIRE(_dependencyMap[0], \"./toDate.js\").toDate)(date);\n      if (isNaN(+date_)) {\n        result = NaN;\n        minDistance = NaN;\n        return;\n      }\n      var distance = Math.abs(timeToCompare - +date_);\n      if (result == null || distance < minDistance) {\n        result = index;\n        minDistance = distance;\n      }\n    });\n    return result;\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = closestIndexTo;\n});","lineCount":57,"map":[[7,2,3,0],[8,0,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,2,27,7],[31,11,27,16,"closestIndexTo"],[31,25,27,30,"closestIndexTo"],[31,26,27,31,"dateToCompare"],[31,39,27,44],[31,41,27,46,"dates"],[31,46,27,51],[31,48,27,53],[32,4,28,2],[33,4,29,2],[34,4,30,2],[35,4,31,2],[35,8,31,8,"timeToCompare"],[35,21,31,21],[35,24,31,24],[35,25,31,25],[35,29,31,25,"toDate"],[35,59,31,25],[35,60,31,25,"toDate"],[35,81,31,31],[35,83,31,32,"dateToCompare"],[35,96,31,45],[35,97,31,46],[36,4,33,2],[36,8,33,6,"isNaN"],[36,13,33,11],[36,14,33,12,"timeToCompare"],[36,27,33,25],[36,28,33,26],[36,30,33,28],[36,37,33,35,"NaN"],[36,40,33,38],[37,4,35,2],[37,8,35,6,"result"],[37,14,35,12],[38,4,36,2],[38,8,36,6,"minDistance"],[38,19,36,17],[39,4,37,2,"dates"],[39,9,37,7],[39,10,37,8,"forEach"],[39,17,37,15],[39,18,37,16],[39,28,37,17,"date"],[39,32,37,21],[39,34,37,23,"index"],[39,39,37,28],[39,41,37,33],[40,6,38,4],[40,10,38,10,"date_"],[40,15,38,15],[40,18,38,18],[40,22,38,18,"toDate"],[40,52,38,18],[40,53,38,18,"toDate"],[40,74,38,24],[40,76,38,25,"date"],[40,80,38,29],[40,81,38,30],[41,6,40,4],[41,10,40,8,"isNaN"],[41,15,40,13],[41,16,40,14],[41,17,40,15,"date_"],[41,22,40,20],[41,23,40,21],[41,25,40,23],[42,8,41,6,"result"],[42,14,41,12],[42,17,41,15,"NaN"],[42,20,41,18],[43,8,42,6,"minDistance"],[43,19,42,17],[43,22,42,20,"NaN"],[43,25,42,23],[44,8,43,6],[45,6,44,4],[46,6,46,4],[46,10,46,10,"distance"],[46,18,46,18],[46,21,46,21,"Math"],[46,25,46,25],[46,26,46,26,"abs"],[46,29,46,29],[46,30,46,30,"timeToCompare"],[46,43,46,43],[46,46,46,46],[46,47,46,47,"date_"],[46,52,46,52],[46,53,46,53],[47,6,47,4],[47,10,47,8,"result"],[47,16,47,14],[47,20,47,18],[47,24,47,22],[47,28,47,26,"distance"],[47,36,47,34],[47,39,47,37,"minDistance"],[47,50,47,48],[47,52,47,50],[48,8,48,6,"result"],[48,14,48,12],[48,17,48,15,"index"],[48,22,48,20],[49,8,49,6,"minDistance"],[49,19,49,17],[49,22,49,20,"distance"],[49,30,49,28],[50,6,50,4],[51,4,51,2],[51,5,51,3],[51,6,51,4],[52,4,53,2],[52,11,53,9,"result"],[52,17,53,15],[53,2,54,0],[55,2,56,0],[56,2,56,0],[56,6,56,0,"_default"],[56,14,56,0],[56,17,56,0,"exports"],[56,24,56,0],[56,25,56,0,"default"],[56,32,56,0],[56,35,57,15,"closestIndexTo"],[56,49,57,29],[57,0,57,29],[57,3]],"functionMap":{"names":["<global>","closestIndexTo","dates.forEach$argument_0"],"mappings":"AAA;OC0B;gBCU;GDc;CDG"}},"type":"js/module"}]}