{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":624,"column":0,"index":20738}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":624,"column":0,"index":20738}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":624,"column":0,"index":20738}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"../networking","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":35,"index":35}}],"key":"TThWMCwEKt2fXvLpd+BsKGCNEyM="}},{"name":"./authError","data":{"asyncType":null,"locs":[{"start":{"line":4,"column":0,"index":122},"end":{"line":4,"column":36,"index":158}}],"key":"+it1LrtGqpAMV0nzOo2QBN9Cl0s="}},{"name":"./auth0Error","data":{"asyncType":null,"locs":[{"start":{"line":5,"column":0,"index":159},"end":{"line":5,"column":38,"index":197}}],"key":"eKi8uvikRAFiDiBrdATvrKxYVjc="}},{"name":"../utils/camel","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":78},"end":{"line":3,"column":43,"index":121}},{"start":{"line":3,"column":0,"index":78},"end":{"line":3,"column":43,"index":121}}],"key":"innFuXCF4DNDtAnSVEjYpy65ujs="}},{"name":"../utils/whitelist","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}},{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}},{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}},{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}},{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}},{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}},{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}},{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}},{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}},{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}},{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}},{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}},{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}},{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}},{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}},{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}},{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}},{"start":{"line":2,"column":0,"index":36},"end":{"line":2,"column":41,"index":77}}],"key":"0PIvqhTUH0Wi3/8IamjTSLx1gyI="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var _networking = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[3], \"../networking\"));\n  var _authError = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[4], \"./authError\"));\n  var _auth0Error = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[5], \"./auth0Error\"));\n  function responseHandler(response) {\n    var exceptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (response.ok && response.json) {\n      return (0, _$$_REQUIRE(_dependencyMap[6], \"../utils/camel\").toCamelCase)(response.json, exceptions);\n    }\n    throw new _authError.default(response);\n  }\n\n  /**\n   * Auth0 Auth API\n   *\n   * @see https://auth0.com/docs/api/authentication\n   */\n  var Auth = /*#__PURE__*/function () {\n    function Auth() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      (0, _classCallCheck2.default)(this, Auth);\n      this.client = new _networking.default(options);\n      var clientId = options.clientId;\n      if (!clientId) {\n        throw new Error('Missing clientId in parameters');\n      }\n      this.domain = this.client.domain;\n      this.clientId = clientId;\n    }\n\n    /**\n     * Builds the full authorize endpoint url in the Authorization Server (AS) with given parameters.\n     *\n     * @param {Object} parameters parameters to send to `/authorize`\n     * @param {String} parameters.responseType type of the response to get from `/authorize`.\n     * @param {String} parameters.redirectUri where the AS will redirect back after success or failure.\n     * @param {String} parameters.state random string to prevent CSRF attacks.\n     * @returns {String} authorize url with specified parameters to redirect to for AuthZ/AuthN.\n     * @see https://auth0.com/docs/api/authentication#authorize-client\n     */\n    return (0, _createClass2.default)(Auth, [{\n      key: \"authorizeUrl\",\n      value: function authorizeUrl() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var query = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            redirectUri: {\n              required: true,\n              toName: 'redirect_uri'\n            },\n            responseType: {\n              required: true,\n              toName: 'response_type'\n            },\n            state: {\n              required: true\n            }\n          },\n          whitelist: false\n        }, parameters);\n        return this.client.url('/authorize', Object.assign({}, query, {\n          client_id: this.clientId\n        }), true);\n      }\n\n      /**\n       * Builds the full logout endpoint url in the Authorization Server (AS) with given parameters.\n       *\n       * @param {Object} parameters parameters to send to `/v2/logout`\n       * @param {Boolean} [parameters.federated] if the logout should include removing session for federated IdP.\n       * @param {String} [parameters.clientId] client identifier of the one requesting the logout\n       * @param {String} [parameters.returnTo] url where the user is redirected to after logout. It must be declared in you Auth0 Dashboard\n       * @returns {String} logout url with specified parameters\n       * @see https://auth0.com/docs/api/authentication#logout\n       */\n    }, {\n      key: \"logoutUrl\",\n      value: function logoutUrl() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var query = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            federated: {\n              required: false\n            },\n            clientId: {\n              required: false,\n              toName: 'client_id'\n            },\n            returnTo: {\n              required: false\n            }\n          }\n        }, parameters);\n        return this.client.url('/v2/logout', Object.assign({}, query), true);\n      }\n\n      /**\n       * Exchanges a code obtained via `/authorize` (w/PKCE) for the user's tokens\n       *\n       * @param {Object} parameters parameters used to obtain tokens from a code\n       * @param {String} parameters.code code returned by `/authorize`.\n       * @param {String} parameters.redirectUri original redirectUri used when calling `/authorize`.\n       * @param {String} parameters.verifier value used to generate the code challenge sent to `/authorize`.\n       * @returns {Promise}\n       * @see https://auth0.com/docs/api-auth/grant/authorization-code-pkce\n       */\n    }, {\n      key: \"exchange\",\n      value: function exchange() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var payload = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            code: {\n              required: true\n            },\n            verifier: {\n              required: true,\n              toName: 'code_verifier'\n            },\n            redirectUri: {\n              required: true,\n              toName: 'redirect_uri'\n            }\n          }\n        }, parameters);\n        return this.client.post('/oauth/token', Object.assign({}, payload, {\n          client_id: this.clientId,\n          grant_type: 'authorization_code'\n        })).then(responseHandler);\n      }\n\n      /**\n       * Exchanges an external token obtained via a native social authentication solution for the user's tokens\n       *\n       * @param {Object} parameters parameters used to obtain user tokens from an external provider's token\n       * @param {String} parameters.subjectToken token returned by the native social authentication solution\n       * @param {String} parameters.subjectTokenType identifier that indicates the native social authentication solution\n       * @param {Object} [parameters.userProfile] additional profile attributes to set or override, only on select native social authentication solutions\n       * @param {String} [parameters.audience] API audience to request\n       * @param {String} [parameters.scope] scopes requested for the issued tokens. e.g. `openid profile`\n       * @returns {Promise}\n       *\n       * @see https://auth0.com/docs/api/authentication#token-exchange-for-native-social\n       */\n    }, {\n      key: \"exchangeNativeSocial\",\n      value: function exchangeNativeSocial() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var payload = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            subjectToken: {\n              required: true,\n              toName: 'subject_token'\n            },\n            subjectTokenType: {\n              required: true,\n              toName: 'subject_token_type'\n            },\n            userProfile: {\n              required: false,\n              toName: 'user_profile'\n            },\n            audience: {\n              required: false\n            },\n            scope: {\n              required: false\n            }\n          }\n        }, parameters);\n        return this.client.post('/oauth/token', Object.assign({}, payload, {\n          client_id: this.clientId,\n          grant_type: 'urn:ietf:params:oauth:grant-type:token-exchange'\n        })).then(responseHandler);\n      }\n\n      /**\n       * Performs Auth with user credentials using the Password Realm Grant\n       *\n       * @param {Object} parameters password realm parameters\n       * @param {String} parameters.username user's username or email\n       * @param {String} parameters.password user's password\n       * @param {String} parameters.realm name of the Realm where to Auth (or connection name)\n       * @param {String} [parameters.audience] identifier of Resource Server (RS) to be included as audience (aud claim) of the issued access token\n       * @param {String} [parameters.scope] scopes requested for the issued tokens. e.g. `openid profile`\n       * @returns {Promise}\n       * @see https://auth0.com/docs/api-auth/grant/password#realm-support\n       */\n    }, {\n      key: \"passwordRealm\",\n      value: function passwordRealm() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var payload = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            username: {\n              required: true\n            },\n            password: {\n              required: true\n            },\n            realm: {\n              required: true\n            },\n            audience: {\n              required: false\n            },\n            scope: {\n              required: false\n            }\n          },\n          whitelist: false\n        }, parameters);\n        return this.client.post('/oauth/token', Object.assign({}, payload, {\n          client_id: this.clientId,\n          grant_type: 'http://auth0.com/oauth/grant-type/password-realm'\n        })).then(responseHandler);\n      }\n\n      /**\n       * Obtain new tokens using the Refresh Token obtained during Auth (requesting `offline_access` scope)\n       *\n       * @param {Object} parameters refresh token parameters\n       * @param {String} parameters.refreshToken user's issued refresh token\n       * @param {String} [parameters.scope] scopes requested for the issued tokens. e.g. `openid profile`\n       * @returns {Promise}\n       * @see https://auth0.com/docs/tokens/refresh-token/current#use-a-refresh-token\n       */\n    }, {\n      key: \"refreshToken\",\n      value: function refreshToken() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var payload = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            refreshToken: {\n              required: true,\n              toName: 'refresh_token'\n            },\n            scope: {\n              required: false\n            }\n          },\n          whitelist: false\n        }, parameters);\n        return this.client.post('/oauth/token', Object.assign({}, payload, {\n          client_id: this.clientId,\n          grant_type: 'refresh_token'\n        })).then(responseHandler);\n      }\n\n      /**\n       * Starts the Passworldess flow with an email connection\n       *\n       * @param {Object} parameters passwordless parameters\n       * @param {String} parameters.email the email to send the link/code to\n       * @param {String} parameters.send the passwordless strategy, either 'link' or 'code'\n       * @param {String} parameters.authParams optional parameters, used when strategy is 'linḱ'\n       * @returns {Promise}\n       */\n    }, {\n      key: \"passwordlessWithEmail\",\n      value: function passwordlessWithEmail() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var payload = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            email: {\n              required: true\n            },\n            send: {\n              required: false\n            },\n            authParams: {\n              required: false\n            }\n          },\n          whitelist: false\n        }, parameters);\n        return this.client.post('/passwordless/start', Object.assign({}, payload, {\n          connection: 'email',\n          client_id: this.clientId\n        })).then(responseHandler);\n      }\n\n      /**\n       * Starts the Passworldess flow with an SMS connection\n       *\n       * @param {Object} parameters passwordless parameters\n       * @param {String} parameters.phoneNumber the phone number to send the link/code to\n       * @returns {Promise}\n       */\n    }, {\n      key: \"passwordlessWithSMS\",\n      value: function passwordlessWithSMS() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var payload = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            phoneNumber: {\n              required: true,\n              toName: 'phone_number'\n            },\n            send: {\n              required: false\n            },\n            authParams: {\n              required: false\n            }\n          },\n          whitelist: false\n        }, parameters);\n        return this.client.post('/passwordless/start', Object.assign({}, payload, {\n          connection: 'sms',\n          client_id: this.clientId\n        })).then(responseHandler);\n      }\n\n      /**\n       * Finishes the Passworldess authentication with an email connection\n       *\n       * @param {Object} parameters passwordless parameters\n       * @param {String} parameters.email the email where the link/code was received\n       * @param {String} parameters.code the code numeric value (OTP)\n       * @param {String} parameters.audience optional API audience to request\n       * @param {String} parameters.scope optional scopes to request\n       * @returns {Promise}\n       */\n    }, {\n      key: \"loginWithEmail\",\n      value: function loginWithEmail() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var payload = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            email: {\n              required: true,\n              toName: 'username'\n            },\n            code: {\n              required: true,\n              toName: 'otp'\n            },\n            audience: {\n              required: false\n            },\n            scope: {\n              required: false\n            }\n          },\n          whitelist: false\n        }, parameters);\n        return this.client.post('/oauth/token', Object.assign({}, payload, {\n          client_id: this.clientId,\n          realm: 'email',\n          grant_type: 'http://auth0.com/oauth/grant-type/passwordless/otp'\n        })).then(responseHandler);\n      }\n\n      /**\n       * Finishes the Passworldess authentication with an SMS connection\n       *\n       * @param {Object} parameters passwordless parameters\n       * @param {String} parameters.phoneNumber the phone number where the code was received\n       * @param {String} parameters.code the code numeric value (OTP)\n       * @param {String} parameters.audience optional API audience to request\n       * @param {String} parameters.scope optional scopes to request\n       * @returns {Promise}\n       */\n    }, {\n      key: \"loginWithSMS\",\n      value: function loginWithSMS() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var payload = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            phoneNumber: {\n              required: true,\n              toName: 'username'\n            },\n            code: {\n              required: true,\n              toName: 'otp'\n            },\n            audience: {\n              required: false\n            },\n            scope: {\n              required: false\n            }\n          },\n          whitelist: false\n        }, parameters);\n        return this.client.post('/oauth/token', Object.assign({}, payload, {\n          client_id: this.clientId,\n          realm: 'sms',\n          grant_type: 'http://auth0.com/oauth/grant-type/passwordless/otp'\n        })).then(responseHandler);\n      }\n\n      /**\n       * Log in a user using the One Time Password code after they have received the 'mfa_required' error.\n       * The MFA token tells the server the username or email, password, and realm values sent on the first request.\n       *\n       * Requires your client to have the **MFA OTP** Grant Type enabled.\n       * See [Client Grant Types](https://auth0.com/docs/clients/client-grant-types) to learn how to enable it.\n       *\n       * @param {Object} parameters login with OTP parameters\n       * @param {String} parameters.mfaToken the token received in the previous login response\n       * @param {String} parameters.otp the one time password code provided by the resource owner, typically obtained from an MFA application such as Google Authenticator or Guardian.\n       * @returns {Promise}\n       */\n    }, {\n      key: \"loginWithOTP\",\n      value: function loginWithOTP() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var payload = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            mfaToken: {\n              required: true,\n              toName: 'mfa_token'\n            },\n            otp: {\n              required: true,\n              toName: 'otp'\n            }\n          },\n          whitelist: false\n        }, parameters);\n        return this.client.post('/oauth/token', Object.assign({}, payload, {\n          client_id: this.clientId,\n          grant_type: 'http://auth0.com/oauth/grant-type/mfa-otp'\n        })).then(responseHandler);\n      }\n\n      /**\n       * Log in a user using an Out Of Band authentication code after they have received the 'mfa_required' error.\n       * The MFA token tells the server the username or email, password, and realm values sent on the first request.\n       *\n       * Requires your client to have the **MFA OOB** Grant Type enabled. See [Client Grant Types](https://auth0.com/docs/clients/client-grant-types) to learn how to enable it.\n       *\n       * @param {Object} parameters login with Recovery Code parameters\n       * @param {String} parameters.mfaToken the token received in the previous login response\n       * @param {String} parameters.oobCode the out of band code received in the challenge response.\n       * @param {String} parameters.bindingCode [Optional] the code used to bind the side channel (used to deliver the challenge) with the main channel you are using to authenticate. This is usually an OTP-like code delivered as part of the challenge message.\n       *\n       * @returns {Promise}\n       */\n    }, {\n      key: \"loginWithOOB\",\n      value: function loginWithOOB() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var payload = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            mfaToken: {\n              required: true,\n              toName: 'mfa_token'\n            },\n            oobCode: {\n              required: true,\n              toName: 'oob_code'\n            },\n            bindingCode: {\n              required: false,\n              toName: 'binding_code'\n            }\n          },\n          whitelist: false\n        }, parameters);\n        return this.client.post('/oauth/token', Object.assign({}, payload, {\n          client_id: this.clientId,\n          grant_type: 'http://auth0.com/oauth/grant-type/mfa-oob'\n        })).then(responseHandler);\n      }\n\n      /**\n       * Log in a user using a multi-factor authentication Recovery Code after they have received the 'mfa_required' error.\n       * The MFA token tells the server the username or email, password, and realm values sent on the first request.\n       *\n       * Requires your client to have the **MFA** Grant Type enabled. See [Client Grant Types](https://auth0.com/docs/clients/client-grant-types) to learn how to enable it.\n       *\n       * @param {Object} parameters login with Recovery Code parameters\n       * @param {String} parameters.mfaToken the token received in the previous login response\n       * @param {String} parameters.recoveryCode the recovery code provided by the end-user.\n       * @returns {Promise}\n       */\n    }, {\n      key: \"loginWithRecoveryCode\",\n      value: function loginWithRecoveryCode() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var payload = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            mfaToken: {\n              required: true,\n              toName: 'mfa_token'\n            },\n            recoveryCode: {\n              required: true,\n              toName: 'recovery_code'\n            }\n          },\n          whitelist: false\n        }, parameters);\n        return this.client.post('/oauth/token', Object.assign({}, payload, {\n          client_id: this.clientId,\n          grant_type: 'http://auth0.com/oauth/grant-type/mfa-recovery-code'\n        })).then(responseHandler);\n      }\n\n      /**\n       * Request a challenge for multi-factor authentication (MFA) based on the challenge types supported by the application and user.\n       * The challenge type is how the user will get the challenge and prove possession. Supported challenge types include: \"otp\" and \"oob\".\n       *\n       * @param {Object} parameters challenge request parameters\n       * @param {String} parameters.mfaToken the token received in the previous login response\n       * @param {String} parameters.challengeType A whitespace-separated list of the challenges types accepted by your application.\n       * Accepted challenge types are oob or otp. Excluding this parameter means that your client application\n       * accepts all supported challenge types.\n       * @param {String} parameters.authenticatorId The ID of the authenticator to challenge.\n       * @returns {Promise}\n       */\n    }, {\n      key: \"multifactorChallenge\",\n      value: function multifactorChallenge() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var payload = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            mfaToken: {\n              required: true,\n              toName: 'mfa_token'\n            },\n            challengeType: {\n              required: false,\n              toName: 'challenge_type'\n            },\n            authenticatorId: {\n              required: false,\n              toName: 'authenticator_id'\n            }\n          }\n        }, parameters);\n        return this.client.post('/mfa/challenge', Object.assign({}, payload, {\n          client_id: this.clientId\n        })).then(responseHandler);\n      }\n\n      /**\n       * Revoke an issued refresh token\n       *\n       * @param {Object} parameters revoke token parameters\n       * @param {String} parameters.refreshToken user's issued refresh token\n       * @returns {Promise}\n       */\n    }, {\n      key: \"revoke\",\n      value: function revoke() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var payload = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            refreshToken: {\n              required: true,\n              toName: 'token'\n            }\n          }\n        }, parameters);\n        return this.client.post('/oauth/revoke', Object.assign({}, payload, {\n          client_id: this.clientId\n        })).then(function (response) {\n          if (response.ok) {\n            return {};\n          }\n          throw new _authError.default(response);\n        });\n      }\n\n      /**\n       * Return user information using an access token\n       *\n       * @param {Object} parameters user info parameters\n       * @param {String} parameters.token user's access token\n       * @returns {Promise}\n       */\n    }, {\n      key: \"userInfo\",\n      value: function userInfo() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var payload = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            token: {\n              required: true\n            }\n          }\n        }, parameters);\n        var _this$client = this.client,\n          baseUrl = _this$client.baseUrl,\n          telemetry = _this$client.telemetry;\n        var client = new _networking.default({\n          baseUrl: baseUrl,\n          telemetry: telemetry,\n          token: payload.token\n        });\n        var claims = ['sub', 'name', 'given_name', 'family_name', 'middle_name', 'nickname', 'preferred_username', 'profile', 'picture', 'website', 'email', 'email_verified', 'gender', 'birthdate', 'zoneinfo', 'locale', 'phone_number', 'phone_number_verified', 'address', 'updated_at'];\n        return client.get('/userinfo').then(function (response) {\n          return responseHandler(response, {\n            attributes: claims,\n            whitelist: true\n          });\n        });\n      }\n\n      /**\n       * Request an email with instructions to change password of a user\n       *\n       * @param {Object} parameters reset password parameters\n       * @param {String} parameters.email user's email\n       * @param {String} parameters.connection name of the connection of the user\n       * @returns {Promise}\n       */\n    }, {\n      key: \"resetPassword\",\n      value: function resetPassword() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var payload = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            email: {\n              required: true\n            },\n            connection: {\n              required: true\n            }\n          }\n        }, parameters);\n        return this.client.post('/dbconnections/change_password', Object.assign({}, payload, {\n          client_id: this.clientId\n        })).then(function (response) {\n          if (response.ok) {\n            return {};\n          }\n          throw new _authError.default(response);\n        });\n      }\n\n      /**\n       *\n       *\n       * @param {Object} parameters create user parameters\n       * @param {String} parameters.email user's email\n       * @param {String} parameters.password user's password\n       * @param {String} parameters.connection name of the database connection where to create the user\n       * @param {String} [parameters.username] user's username\n       * @param {String} [parameters.give_name] The user's given name(s)\n       * @param {String} [parameters.family_name] The user's family name(s)\n       * @param {String} [parameters.name] The user's full name\n       * @param {String} [parameters.nickname] The user's nickname\n       * @param {String} [parameters.picture] A URI pointing to the user's picture\n       * @param {String} [parameters.metadata] additional user information that will be stored in `user_metadata`\n       * @returns {Promise}\n       */\n    }, {\n      key: \"createUser\",\n      value: function createUser() {\n        var parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var payload = (0, _$$_REQUIRE(_dependencyMap[7], \"../utils/whitelist\").apply)({\n          parameters: {\n            email: {\n              required: true\n            },\n            password: {\n              required: true\n            },\n            connection: {\n              required: true\n            },\n            username: {\n              required: false\n            },\n            given_name: {\n              required: false\n            },\n            family_name: {\n              required: false\n            },\n            name: {\n              required: false\n            },\n            nickname: {\n              required: false\n            },\n            picture: {\n              required: false\n            },\n            metadata: {\n              required: false,\n              toName: 'user_metadata'\n            }\n          }\n        }, parameters);\n        return this.client.post('/dbconnections/signup', Object.assign({}, payload, {\n          client_id: this.clientId\n        })).then(function (response) {\n          if (response.ok && response.json) {\n            return (0, _$$_REQUIRE(_dependencyMap[6], \"../utils/camel\").toCamelCase)(response.json);\n          }\n          throw new _auth0Error.default(response);\n        });\n      }\n    }]);\n  }();\n  var _default = exports.default = Auth;\n});","lineCount":711,"map":[[9,2,1,0],[9,6,1,0,"_networking"],[9,17,1,0],[9,20,1,0,"_interopRequireDefault"],[9,42,1,0],[9,43,1,0,"_$$_REQUIRE"],[9,54,1,0],[9,55,1,0,"_dependencyMap"],[9,69,1,0],[10,2,4,0],[10,6,4,0,"_authError"],[10,16,4,0],[10,19,4,0,"_interopRequireDefault"],[10,41,4,0],[10,42,4,0,"_$$_REQUIRE"],[10,53,4,0],[10,54,4,0,"_dependencyMap"],[10,68,4,0],[11,2,5,0],[11,6,5,0,"_auth0Error"],[11,17,5,0],[11,20,5,0,"_interopRequireDefault"],[11,42,5,0],[11,43,5,0,"_$$_REQUIRE"],[11,54,5,0],[11,55,5,0,"_dependencyMap"],[11,69,5,0],[12,2,7,0],[12,11,7,9,"responseHandler"],[12,26,7,24,"responseHandler"],[12,27,7,25,"response"],[12,35,7,33],[12,37,7,52],[13,4,7,52],[13,8,7,35,"exceptions"],[13,18,7,45],[13,21,7,45,"arguments"],[13,30,7,45],[13,31,7,45,"length"],[13,37,7,45],[13,45,7,45,"arguments"],[13,54,7,45],[13,62,7,45,"undefined"],[13,71,7,45],[13,74,7,45,"arguments"],[13,83,7,45],[13,89,7,48],[13,90,7,49],[13,91,7,50],[14,4,8,2],[14,8,8,6,"response"],[14,16,8,14],[14,17,8,15,"ok"],[14,19,8,17],[14,23,8,21,"response"],[14,31,8,29],[14,32,8,30,"json"],[14,36,8,34],[14,38,8,36],[15,6,9,4],[15,13,9,11],[15,17,9,11,"toCamelCase"],[15,47,9,11],[15,48,9,11,"toCamelCase"],[15,77,9,22],[15,79,9,23,"response"],[15,87,9,31],[15,88,9,32,"json"],[15,92,9,36],[15,94,9,38,"exceptions"],[15,104,9,48],[15,105,9,49],[16,4,10,2],[17,4,11,2],[17,10,11,8],[17,14,11,12,"AuthError"],[17,32,11,21],[17,33,11,22,"response"],[17,41,11,30],[17,42,11,31],[18,2,12,0],[20,2,14,0],[21,0,15,0],[22,0,16,0],[23,0,17,0],[24,0,18,0],[25,2,14,0],[25,6,19,6,"Auth"],[25,10,19,10],[26,4,20,2],[26,13,20,2,"Auth"],[26,18,20,2],[26,20,20,28],[27,6,20,28],[27,10,20,14,"options"],[27,17,20,21],[27,20,20,21,"arguments"],[27,29,20,21],[27,30,20,21,"length"],[27,36,20,21],[27,44,20,21,"arguments"],[27,53,20,21],[27,61,20,21,"undefined"],[27,70,20,21],[27,73,20,21,"arguments"],[27,82,20,21],[27,88,20,24],[27,89,20,25],[27,90,20,26],[28,6,20,26],[28,10,20,26,"_classCallCheck2"],[28,26,20,26],[28,27,20,26,"default"],[28,34,20,26],[28,42,20,26,"Auth"],[28,46,20,26],[29,6,21,4],[29,10,21,8],[29,11,21,9,"client"],[29,17,21,15],[29,20,21,18],[29,24,21,22,"Client"],[29,43,21,28],[29,44,21,29,"options"],[29,51,21,36],[29,52,21,37],[30,6,22,4],[30,10,22,11,"clientId"],[30,18,22,19],[30,21,22,23,"options"],[30,28,22,30],[30,29,22,11,"clientId"],[30,37,22,19],[31,6,23,4],[31,10,23,8],[31,11,23,9,"clientId"],[31,19,23,17],[31,21,23,19],[32,8,24,6],[32,14,24,12],[32,18,24,16,"Error"],[32,23,24,21],[32,24,24,22],[32,56,24,54],[32,57,24,55],[33,6,25,4],[34,6,26,4],[34,10,26,8],[34,11,26,9,"domain"],[34,17,26,15],[34,20,26,18],[34,24,26,22],[34,25,26,23,"client"],[34,31,26,29],[34,32,26,30,"domain"],[34,38,26,36],[35,6,27,4],[35,10,27,8],[35,11,27,9,"clientId"],[35,19,27,17],[35,22,27,20,"clientId"],[35,30,27,28],[36,4,28,2],[38,4,30,2],[39,0,31,0],[40,0,32,0],[41,0,33,0],[42,0,34,0],[43,0,35,0],[44,0,36,0],[45,0,37,0],[46,0,38,0],[47,0,39,0],[48,4,30,2],[48,15,30,2,"_createClass2"],[48,28,30,2],[48,29,30,2,"default"],[48,36,30,2],[48,38,30,2,"Auth"],[48,42,30,2],[49,6,30,2,"key"],[49,9,30,2],[50,6,30,2,"value"],[50,11,30,2],[50,13,40,2],[50,22,40,2,"authorizeUrl"],[50,34,40,14,"authorizeUrl"],[50,35,40,14],[50,37,40,32],[51,8,40,32],[51,12,40,15,"parameters"],[51,22,40,25],[51,25,40,25,"arguments"],[51,34,40,25],[51,35,40,25,"length"],[51,41,40,25],[51,49,40,25,"arguments"],[51,58,40,25],[51,66,40,25,"undefined"],[51,75,40,25],[51,78,40,25,"arguments"],[51,87,40,25],[51,93,40,28],[51,94,40,29],[51,95,40,30],[52,8,41,4],[52,12,41,10,"query"],[52,17,41,15],[52,20,41,18],[52,24,41,18,"apply"],[52,54,41,18],[52,55,41,18,"apply"],[52,82,41,23],[52,84,42,6],[53,10,43,8,"parameters"],[53,20,43,18],[53,22,43,20],[54,12,44,10,"redirectUri"],[54,23,44,21],[54,25,44,23],[55,14,44,24,"required"],[55,22,44,32],[55,24,44,34],[55,28,44,38],[56,14,44,40,"toName"],[56,20,44,46],[56,22,44,48],[57,12,44,62],[57,13,44,63],[58,12,45,10,"responseType"],[58,24,45,22],[58,26,45,24],[59,14,45,25,"required"],[59,22,45,33],[59,24,45,35],[59,28,45,39],[60,14,45,41,"toName"],[60,20,45,47],[60,22,45,49],[61,12,45,64],[61,13,45,65],[62,12,46,10,"state"],[62,17,46,15],[62,19,46,17],[63,14,46,18,"required"],[63,22,46,26],[63,24,46,28],[64,12,46,32],[65,10,47,8],[65,11,47,9],[66,10,48,8,"whitelist"],[66,19,48,17],[66,21,48,19],[67,8,49,6],[67,9,49,7],[67,11,50,6,"parameters"],[67,21,51,4],[67,22,51,5],[68,8,52,4],[68,15,52,11],[68,19,52,15],[68,20,52,16,"client"],[68,26,52,22],[68,27,52,23,"url"],[68,30,52,26],[68,31,53,6],[68,43,53,18],[68,45,53,18,"Object"],[68,51,53,18],[68,52,53,18,"assign"],[68,58,53,18],[68,63,54,10,"query"],[68,68,54,15],[69,10,54,17,"client_id"],[69,19,54,26],[69,21,54,28],[69,25,54,32],[69,26,54,33,"clientId"],[70,8,54,41],[70,12,55,6],[70,16,56,4],[70,17,56,5],[71,6,57,2],[73,6,59,2],[74,0,60,0],[75,0,61,0],[76,0,62,0],[77,0,63,0],[78,0,64,0],[79,0,65,0],[80,0,66,0],[81,0,67,0],[82,0,68,0],[83,4,59,2],[84,6,59,2,"key"],[84,9,59,2],[85,6,59,2,"value"],[85,11,59,2],[85,13,69,2],[85,22,69,2,"logoutUrl"],[85,31,69,11,"logoutUrl"],[85,32,69,11],[85,34,69,29],[86,8,69,29],[86,12,69,12,"parameters"],[86,22,69,22],[86,25,69,22,"arguments"],[86,34,69,22],[86,35,69,22,"length"],[86,41,69,22],[86,49,69,22,"arguments"],[86,58,69,22],[86,66,69,22,"undefined"],[86,75,69,22],[86,78,69,22,"arguments"],[86,87,69,22],[86,93,69,25],[86,94,69,26],[86,95,69,27],[87,8,70,4],[87,12,70,10,"query"],[87,17,70,15],[87,20,70,18],[87,24,70,18,"apply"],[87,54,70,18],[87,55,70,18,"apply"],[87,82,70,23],[87,84,71,6],[88,10,72,8,"parameters"],[88,20,72,18],[88,22,72,20],[89,12,73,10,"federated"],[89,21,73,19],[89,23,73,21],[90,14,73,22,"required"],[90,22,73,30],[90,24,73,32],[91,12,73,37],[91,13,73,38],[92,12,74,10,"clientId"],[92,20,74,18],[92,22,74,20],[93,14,74,21,"required"],[93,22,74,29],[93,24,74,31],[93,29,74,36],[94,14,74,38,"toName"],[94,20,74,44],[94,22,74,46],[95,12,74,57],[95,13,74,58],[96,12,75,10,"returnTo"],[96,20,75,18],[96,22,75,20],[97,14,75,21,"required"],[97,22,75,29],[97,24,75,31],[98,12,75,36],[99,10,76,8],[100,8,77,6],[100,9,77,7],[100,11,78,6,"parameters"],[100,21,79,4],[100,22,79,5],[101,8,80,4],[101,15,80,11],[101,19,80,15],[101,20,80,16,"client"],[101,26,80,22],[101,27,80,23,"url"],[101,30,80,26],[101,31,80,27],[101,43,80,39],[101,45,80,39,"Object"],[101,51,80,39],[101,52,80,39,"assign"],[101,58,80,39],[101,63,80,45,"query"],[101,68,80,50],[101,71,80,53],[101,75,80,57],[101,76,80,58],[102,6,81,2],[104,6,83,2],[105,0,84,0],[106,0,85,0],[107,0,86,0],[108,0,87,0],[109,0,88,0],[110,0,89,0],[111,0,90,0],[112,0,91,0],[113,0,92,0],[114,4,83,2],[115,6,83,2,"key"],[115,9,83,2],[116,6,83,2,"value"],[116,11,83,2],[116,13,93,2],[116,22,93,2,"exchange"],[116,30,93,10,"exchange"],[116,31,93,10],[116,33,93,28],[117,8,93,28],[117,12,93,11,"parameters"],[117,22,93,21],[117,25,93,21,"arguments"],[117,34,93,21],[117,35,93,21,"length"],[117,41,93,21],[117,49,93,21,"arguments"],[117,58,93,21],[117,66,93,21,"undefined"],[117,75,93,21],[117,78,93,21,"arguments"],[117,87,93,21],[117,93,93,24],[117,94,93,25],[117,95,93,26],[118,8,94,4],[118,12,94,10,"payload"],[118,19,94,17],[118,22,94,20],[118,26,94,20,"apply"],[118,56,94,20],[118,57,94,20,"apply"],[118,84,94,25],[118,86,95,6],[119,10,96,8,"parameters"],[119,20,96,18],[119,22,96,20],[120,12,97,10,"code"],[120,16,97,14],[120,18,97,16],[121,14,97,17,"required"],[121,22,97,25],[121,24,97,27],[122,12,97,31],[122,13,97,32],[123,12,98,10,"verifier"],[123,20,98,18],[123,22,98,20],[124,14,98,21,"required"],[124,22,98,29],[124,24,98,31],[124,28,98,35],[125,14,98,37,"toName"],[125,20,98,43],[125,22,98,45],[126,12,98,60],[126,13,98,61],[127,12,99,10,"redirectUri"],[127,23,99,21],[127,25,99,23],[128,14,99,24,"required"],[128,22,99,32],[128,24,99,34],[128,28,99,38],[129,14,99,40,"toName"],[129,20,99,46],[129,22,99,48],[130,12,99,62],[131,10,100,8],[132,8,101,6],[132,9,101,7],[132,11,102,6,"parameters"],[132,21,103,4],[132,22,103,5],[133,8,104,4],[133,15,104,11],[133,19,104,15],[133,20,104,16,"client"],[133,26,104,22],[133,27,105,7,"post"],[133,31,105,11],[133,32,105,12],[133,46,105,26],[133,48,105,26,"Object"],[133,54,105,26],[133,55,105,26,"assign"],[133,61,105,26],[133,66,106,11,"payload"],[133,73,106,18],[134,10,107,8,"client_id"],[134,19,107,17],[134,21,107,19],[134,25,107,23],[134,26,107,24,"clientId"],[134,34,107,32],[135,10,108,8,"grant_type"],[135,20,108,18],[135,22,108,20],[136,8,108,40],[136,10,109,7],[136,11,109,8],[136,12,110,7,"then"],[136,16,110,11],[136,17,110,12,"responseHandler"],[136,32,110,27],[136,33,110,28],[137,6,111,2],[139,6,113,2],[140,0,114,0],[141,0,115,0],[142,0,116,0],[143,0,117,0],[144,0,118,0],[145,0,119,0],[146,0,120,0],[147,0,121,0],[148,0,122,0],[149,0,123,0],[150,0,124,0],[151,0,125,0],[152,4,113,2],[153,6,113,2,"key"],[153,9,113,2],[154,6,113,2,"value"],[154,11,113,2],[154,13,126,2],[154,22,126,2,"exchangeNativeSocial"],[154,42,126,22,"exchangeNativeSocial"],[154,43,126,22],[154,45,126,40],[155,8,126,40],[155,12,126,23,"parameters"],[155,22,126,33],[155,25,126,33,"arguments"],[155,34,126,33],[155,35,126,33,"length"],[155,41,126,33],[155,49,126,33,"arguments"],[155,58,126,33],[155,66,126,33,"undefined"],[155,75,126,33],[155,78,126,33,"arguments"],[155,87,126,33],[155,93,126,36],[155,94,126,37],[155,95,126,38],[156,8,127,4],[156,12,127,10,"payload"],[156,19,127,17],[156,22,127,20],[156,26,127,20,"apply"],[156,56,127,20],[156,57,127,20,"apply"],[156,84,127,25],[156,86,128,6],[157,10,129,8,"parameters"],[157,20,129,18],[157,22,129,20],[158,12,130,10,"subjectToken"],[158,24,130,22],[158,26,130,24],[159,14,130,25,"required"],[159,22,130,33],[159,24,130,35],[159,28,130,39],[160,14,130,41,"toName"],[160,20,130,47],[160,22,130,49],[161,12,130,64],[161,13,130,65],[162,12,131,10,"subjectTokenType"],[162,28,131,26],[162,30,131,28],[163,14,131,29,"required"],[163,22,131,37],[163,24,131,39],[163,28,131,43],[164,14,131,45,"toName"],[164,20,131,51],[164,22,131,53],[165,12,131,73],[165,13,131,74],[166,12,132,10,"userProfile"],[166,23,132,21],[166,25,132,23],[167,14,132,24,"required"],[167,22,132,32],[167,24,132,34],[167,29,132,39],[168,14,132,41,"toName"],[168,20,132,47],[168,22,132,49],[169,12,132,63],[169,13,132,64],[170,12,133,10,"audience"],[170,20,133,18],[170,22,133,20],[171,14,133,21,"required"],[171,22,133,29],[171,24,133,31],[172,12,133,36],[172,13,133,37],[173,12,134,10,"scope"],[173,17,134,15],[173,19,134,17],[174,14,134,18,"required"],[174,22,134,26],[174,24,134,28],[175,12,134,33],[176,10,135,8],[177,8,136,6],[177,9,136,7],[177,11,137,6,"parameters"],[177,21,138,4],[177,22,138,5],[178,8,139,4],[178,15,139,11],[178,19,139,15],[178,20,139,16,"client"],[178,26,139,22],[178,27,140,7,"post"],[178,31,140,11],[178,32,140,12],[178,46,140,26],[178,48,140,26,"Object"],[178,54,140,26],[178,55,140,26,"assign"],[178,61,140,26],[178,66,141,11,"payload"],[178,73,141,18],[179,10,142,8,"client_id"],[179,19,142,17],[179,21,142,19],[179,25,142,23],[179,26,142,24,"clientId"],[179,34,142,32],[180,10,143,8,"grant_type"],[180,20,143,18],[180,22,143,20],[181,8,143,69],[181,10,144,7],[181,11,144,8],[181,12,145,7,"then"],[181,16,145,11],[181,17,145,12,"responseHandler"],[181,32,145,27],[181,33,145,28],[182,6,146,2],[184,6,148,2],[185,0,149,0],[186,0,150,0],[187,0,151,0],[188,0,152,0],[189,0,153,0],[190,0,154,0],[191,0,155,0],[192,0,156,0],[193,0,157,0],[194,0,158,0],[195,0,159,0],[196,4,148,2],[197,6,148,2,"key"],[197,9,148,2],[198,6,148,2,"value"],[198,11,148,2],[198,13,160,2],[198,22,160,2,"passwordRealm"],[198,35,160,15,"passwordRealm"],[198,36,160,15],[198,38,160,33],[199,8,160,33],[199,12,160,16,"parameters"],[199,22,160,26],[199,25,160,26,"arguments"],[199,34,160,26],[199,35,160,26,"length"],[199,41,160,26],[199,49,160,26,"arguments"],[199,58,160,26],[199,66,160,26,"undefined"],[199,75,160,26],[199,78,160,26,"arguments"],[199,87,160,26],[199,93,160,29],[199,94,160,30],[199,95,160,31],[200,8,161,4],[200,12,161,10,"payload"],[200,19,161,17],[200,22,161,20],[200,26,161,20,"apply"],[200,56,161,20],[200,57,161,20,"apply"],[200,84,161,25],[200,86,162,6],[201,10,163,8,"parameters"],[201,20,163,18],[201,22,163,20],[202,12,164,10,"username"],[202,20,164,18],[202,22,164,20],[203,14,164,21,"required"],[203,22,164,29],[203,24,164,31],[204,12,164,35],[204,13,164,36],[205,12,165,10,"password"],[205,20,165,18],[205,22,165,20],[206,14,165,21,"required"],[206,22,165,29],[206,24,165,31],[207,12,165,35],[207,13,165,36],[208,12,166,10,"realm"],[208,17,166,15],[208,19,166,17],[209,14,166,18,"required"],[209,22,166,26],[209,24,166,28],[210,12,166,32],[210,13,166,33],[211,12,167,10,"audience"],[211,20,167,18],[211,22,167,20],[212,14,167,21,"required"],[212,22,167,29],[212,24,167,31],[213,12,167,36],[213,13,167,37],[214,12,168,10,"scope"],[214,17,168,15],[214,19,168,17],[215,14,168,18,"required"],[215,22,168,26],[215,24,168,28],[216,12,168,33],[217,10,169,8],[217,11,169,9],[218,10,170,8,"whitelist"],[218,19,170,17],[218,21,170,19],[219,8,171,6],[219,9,171,7],[219,11,172,6,"parameters"],[219,21,173,4],[219,22,173,5],[220,8,174,4],[220,15,174,11],[220,19,174,15],[220,20,174,16,"client"],[220,26,174,22],[220,27,175,7,"post"],[220,31,175,11],[220,32,175,12],[220,46,175,26],[220,48,175,26,"Object"],[220,54,175,26],[220,55,175,26,"assign"],[220,61,175,26],[220,66,176,11,"payload"],[220,73,176,18],[221,10,177,8,"client_id"],[221,19,177,17],[221,21,177,19],[221,25,177,23],[221,26,177,24,"clientId"],[221,34,177,32],[222,10,178,8,"grant_type"],[222,20,178,18],[222,22,178,20],[223,8,178,70],[223,10,179,7],[223,11,179,8],[223,12,180,7,"then"],[223,16,180,11],[223,17,180,12,"responseHandler"],[223,32,180,27],[223,33,180,28],[224,6,181,2],[226,6,183,2],[227,0,184,0],[228,0,185,0],[229,0,186,0],[230,0,187,0],[231,0,188,0],[232,0,189,0],[233,0,190,0],[234,0,191,0],[235,4,183,2],[236,6,183,2,"key"],[236,9,183,2],[237,6,183,2,"value"],[237,11,183,2],[237,13,192,2],[237,22,192,2,"refreshToken"],[237,34,192,14,"refreshToken"],[237,35,192,14],[237,37,192,32],[238,8,192,32],[238,12,192,15,"parameters"],[238,22,192,25],[238,25,192,25,"arguments"],[238,34,192,25],[238,35,192,25,"length"],[238,41,192,25],[238,49,192,25,"arguments"],[238,58,192,25],[238,66,192,25,"undefined"],[238,75,192,25],[238,78,192,25,"arguments"],[238,87,192,25],[238,93,192,28],[238,94,192,29],[238,95,192,30],[239,8,193,4],[239,12,193,10,"payload"],[239,19,193,17],[239,22,193,20],[239,26,193,20,"apply"],[239,56,193,20],[239,57,193,20,"apply"],[239,84,193,25],[239,86,194,6],[240,10,195,8,"parameters"],[240,20,195,18],[240,22,195,20],[241,12,196,10,"refreshToken"],[241,24,196,22],[241,26,196,24],[242,14,196,25,"required"],[242,22,196,33],[242,24,196,35],[242,28,196,39],[243,14,196,41,"toName"],[243,20,196,47],[243,22,196,49],[244,12,196,64],[244,13,196,65],[245,12,197,10,"scope"],[245,17,197,15],[245,19,197,17],[246,14,197,18,"required"],[246,22,197,26],[246,24,197,28],[247,12,197,33],[248,10,198,8],[248,11,198,9],[249,10,199,8,"whitelist"],[249,19,199,17],[249,21,199,19],[250,8,200,6],[250,9,200,7],[250,11,201,6,"parameters"],[250,21,202,4],[250,22,202,5],[251,8,203,4],[251,15,203,11],[251,19,203,15],[251,20,203,16,"client"],[251,26,203,22],[251,27,204,7,"post"],[251,31,204,11],[251,32,204,12],[251,46,204,26],[251,48,204,26,"Object"],[251,54,204,26],[251,55,204,26,"assign"],[251,61,204,26],[251,66,205,11,"payload"],[251,73,205,18],[252,10,206,8,"client_id"],[252,19,206,17],[252,21,206,19],[252,25,206,23],[252,26,206,24,"clientId"],[252,34,206,32],[253,10,207,8,"grant_type"],[253,20,207,18],[253,22,207,20],[254,8,207,35],[254,10,208,7],[254,11,208,8],[254,12,209,7,"then"],[254,16,209,11],[254,17,209,12,"responseHandler"],[254,32,209,27],[254,33,209,28],[255,6,210,2],[257,6,212,2],[258,0,213,0],[259,0,214,0],[260,0,215,0],[261,0,216,0],[262,0,217,0],[263,0,218,0],[264,0,219,0],[265,0,220,0],[266,4,212,2],[267,6,212,2,"key"],[267,9,212,2],[268,6,212,2,"value"],[268,11,212,2],[268,13,221,2],[268,22,221,2,"passwordlessWithEmail"],[268,43,221,23,"passwordlessWithEmail"],[268,44,221,23],[268,46,221,41],[269,8,221,41],[269,12,221,24,"parameters"],[269,22,221,34],[269,25,221,34,"arguments"],[269,34,221,34],[269,35,221,34,"length"],[269,41,221,34],[269,49,221,34,"arguments"],[269,58,221,34],[269,66,221,34,"undefined"],[269,75,221,34],[269,78,221,34,"arguments"],[269,87,221,34],[269,93,221,37],[269,94,221,38],[269,95,221,39],[270,8,222,4],[270,12,222,10,"payload"],[270,19,222,17],[270,22,222,20],[270,26,222,20,"apply"],[270,56,222,20],[270,57,222,20,"apply"],[270,84,222,25],[270,86,223,6],[271,10,224,8,"parameters"],[271,20,224,18],[271,22,224,20],[272,12,225,10,"email"],[272,17,225,15],[272,19,225,17],[273,14,225,18,"required"],[273,22,225,26],[273,24,225,28],[274,12,225,32],[274,13,225,33],[275,12,226,10,"send"],[275,16,226,14],[275,18,226,16],[276,14,226,17,"required"],[276,22,226,25],[276,24,226,27],[277,12,226,32],[277,13,226,33],[278,12,227,10,"authParams"],[278,22,227,20],[278,24,227,22],[279,14,227,23,"required"],[279,22,227,31],[279,24,227,33],[280,12,227,38],[281,10,228,8],[281,11,228,9],[282,10,229,8,"whitelist"],[282,19,229,17],[282,21,229,19],[283,8,230,6],[283,9,230,7],[283,11,231,6,"parameters"],[283,21,232,4],[283,22,232,5],[284,8,233,4],[284,15,233,11],[284,19,233,15],[284,20,233,16,"client"],[284,26,233,22],[284,27,234,7,"post"],[284,31,234,11],[284,32,234,12],[284,53,234,33],[284,55,234,33,"Object"],[284,61,234,33],[284,62,234,33,"assign"],[284,68,234,33],[284,73,235,11,"payload"],[284,80,235,18],[285,10,236,8,"connection"],[285,20,236,18],[285,22,236,20],[285,29,236,27],[286,10,237,8,"client_id"],[286,19,237,17],[286,21,237,19],[286,25,237,23],[286,26,237,24,"clientId"],[287,8,237,32],[287,10,238,7],[287,11,238,8],[287,12,239,7,"then"],[287,16,239,11],[287,17,239,12,"responseHandler"],[287,32,239,27],[287,33,239,28],[288,6,240,2],[290,6,242,2],[291,0,243,0],[292,0,244,0],[293,0,245,0],[294,0,246,0],[295,0,247,0],[296,0,248,0],[297,4,242,2],[298,6,242,2,"key"],[298,9,242,2],[299,6,242,2,"value"],[299,11,242,2],[299,13,249,2],[299,22,249,2,"passwordlessWithSMS"],[299,41,249,21,"passwordlessWithSMS"],[299,42,249,21],[299,44,249,39],[300,8,249,39],[300,12,249,22,"parameters"],[300,22,249,32],[300,25,249,32,"arguments"],[300,34,249,32],[300,35,249,32,"length"],[300,41,249,32],[300,49,249,32,"arguments"],[300,58,249,32],[300,66,249,32,"undefined"],[300,75,249,32],[300,78,249,32,"arguments"],[300,87,249,32],[300,93,249,35],[300,94,249,36],[300,95,249,37],[301,8,250,4],[301,12,250,10,"payload"],[301,19,250,17],[301,22,250,20],[301,26,250,20,"apply"],[301,56,250,20],[301,57,250,20,"apply"],[301,84,250,25],[301,86,251,6],[302,10,252,8,"parameters"],[302,20,252,18],[302,22,252,20],[303,12,253,10,"phoneNumber"],[303,23,253,21],[303,25,253,23],[304,14,253,24,"required"],[304,22,253,32],[304,24,253,34],[304,28,253,38],[305,14,253,40,"toName"],[305,20,253,46],[305,22,253,48],[306,12,253,62],[306,13,253,63],[307,12,254,10,"send"],[307,16,254,14],[307,18,254,16],[308,14,254,17,"required"],[308,22,254,25],[308,24,254,27],[309,12,254,32],[309,13,254,33],[310,12,255,10,"authParams"],[310,22,255,20],[310,24,255,22],[311,14,255,23,"required"],[311,22,255,31],[311,24,255,33],[312,12,255,38],[313,10,256,8],[313,11,256,9],[314,10,257,8,"whitelist"],[314,19,257,17],[314,21,257,19],[315,8,258,6],[315,9,258,7],[315,11,259,6,"parameters"],[315,21,260,4],[315,22,260,5],[316,8,261,4],[316,15,261,11],[316,19,261,15],[316,20,261,16,"client"],[316,26,261,22],[316,27,262,7,"post"],[316,31,262,11],[316,32,262,12],[316,53,262,33],[316,55,262,33,"Object"],[316,61,262,33],[316,62,262,33,"assign"],[316,68,262,33],[316,73,263,11,"payload"],[316,80,263,18],[317,10,264,8,"connection"],[317,20,264,18],[317,22,264,20],[317,27,264,25],[318,10,265,8,"client_id"],[318,19,265,17],[318,21,265,19],[318,25,265,23],[318,26,265,24,"clientId"],[319,8,265,32],[319,10,266,7],[319,11,266,8],[319,12,267,7,"then"],[319,16,267,11],[319,17,267,12,"responseHandler"],[319,32,267,27],[319,33,267,28],[320,6,268,2],[322,6,270,2],[323,0,271,0],[324,0,272,0],[325,0,273,0],[326,0,274,0],[327,0,275,0],[328,0,276,0],[329,0,277,0],[330,0,278,0],[331,0,279,0],[332,4,270,2],[333,6,270,2,"key"],[333,9,270,2],[334,6,270,2,"value"],[334,11,270,2],[334,13,280,2],[334,22,280,2,"loginWithEmail"],[334,36,280,16,"loginWithEmail"],[334,37,280,16],[334,39,280,34],[335,8,280,34],[335,12,280,17,"parameters"],[335,22,280,27],[335,25,280,27,"arguments"],[335,34,280,27],[335,35,280,27,"length"],[335,41,280,27],[335,49,280,27,"arguments"],[335,58,280,27],[335,66,280,27,"undefined"],[335,75,280,27],[335,78,280,27,"arguments"],[335,87,280,27],[335,93,280,30],[335,94,280,31],[335,95,280,32],[336,8,281,4],[336,12,281,10,"payload"],[336,19,281,17],[336,22,281,20],[336,26,281,20,"apply"],[336,56,281,20],[336,57,281,20,"apply"],[336,84,281,25],[336,86,282,6],[337,10,283,8,"parameters"],[337,20,283,18],[337,22,283,20],[338,12,284,10,"email"],[338,17,284,15],[338,19,284,17],[339,14,284,18,"required"],[339,22,284,26],[339,24,284,28],[339,28,284,32],[340,14,284,34,"toName"],[340,20,284,40],[340,22,284,42],[341,12,284,52],[341,13,284,53],[342,12,285,10,"code"],[342,16,285,14],[342,18,285,16],[343,14,285,17,"required"],[343,22,285,25],[343,24,285,27],[343,28,285,31],[344,14,285,33,"toName"],[344,20,285,39],[344,22,285,41],[345,12,285,46],[345,13,285,47],[346,12,286,10,"audience"],[346,20,286,18],[346,22,286,20],[347,14,286,21,"required"],[347,22,286,29],[347,24,286,31],[348,12,286,36],[348,13,286,37],[349,12,287,10,"scope"],[349,17,287,15],[349,19,287,17],[350,14,287,18,"required"],[350,22,287,26],[350,24,287,28],[351,12,287,33],[352,10,288,8],[352,11,288,9],[353,10,289,8,"whitelist"],[353,19,289,17],[353,21,289,19],[354,8,290,6],[354,9,290,7],[354,11,291,6,"parameters"],[354,21,292,4],[354,22,292,5],[355,8,293,4],[355,15,293,11],[355,19,293,15],[355,20,293,16,"client"],[355,26,293,22],[355,27,294,7,"post"],[355,31,294,11],[355,32,294,12],[355,46,294,26],[355,48,294,26,"Object"],[355,54,294,26],[355,55,294,26,"assign"],[355,61,294,26],[355,66,295,11,"payload"],[355,73,295,18],[356,10,296,8,"client_id"],[356,19,296,17],[356,21,296,19],[356,25,296,23],[356,26,296,24,"clientId"],[356,34,296,32],[357,10,297,8,"realm"],[357,15,297,13],[357,17,297,15],[357,24,297,22],[358,10,298,8,"grant_type"],[358,20,298,18],[358,22,298,20],[359,8,298,72],[359,10,299,7],[359,11,299,8],[359,12,300,7,"then"],[359,16,300,11],[359,17,300,12,"responseHandler"],[359,32,300,27],[359,33,300,28],[360,6,301,2],[362,6,303,2],[363,0,304,0],[364,0,305,0],[365,0,306,0],[366,0,307,0],[367,0,308,0],[368,0,309,0],[369,0,310,0],[370,0,311,0],[371,0,312,0],[372,4,303,2],[373,6,303,2,"key"],[373,9,303,2],[374,6,303,2,"value"],[374,11,303,2],[374,13,313,2],[374,22,313,2,"loginWithSMS"],[374,34,313,14,"loginWithSMS"],[374,35,313,14],[374,37,313,32],[375,8,313,32],[375,12,313,15,"parameters"],[375,22,313,25],[375,25,313,25,"arguments"],[375,34,313,25],[375,35,313,25,"length"],[375,41,313,25],[375,49,313,25,"arguments"],[375,58,313,25],[375,66,313,25,"undefined"],[375,75,313,25],[375,78,313,25,"arguments"],[375,87,313,25],[375,93,313,28],[375,94,313,29],[375,95,313,30],[376,8,314,4],[376,12,314,10,"payload"],[376,19,314,17],[376,22,314,20],[376,26,314,20,"apply"],[376,56,314,20],[376,57,314,20,"apply"],[376,84,314,25],[376,86,315,6],[377,10,316,8,"parameters"],[377,20,316,18],[377,22,316,20],[378,12,317,10,"phoneNumber"],[378,23,317,21],[378,25,317,23],[379,14,317,24,"required"],[379,22,317,32],[379,24,317,34],[379,28,317,38],[380,14,317,40,"toName"],[380,20,317,46],[380,22,317,48],[381,12,317,58],[381,13,317,59],[382,12,318,10,"code"],[382,16,318,14],[382,18,318,16],[383,14,318,17,"required"],[383,22,318,25],[383,24,318,27],[383,28,318,31],[384,14,318,33,"toName"],[384,20,318,39],[384,22,318,41],[385,12,318,46],[385,13,318,47],[386,12,319,10,"audience"],[386,20,319,18],[386,22,319,20],[387,14,319,21,"required"],[387,22,319,29],[387,24,319,31],[388,12,319,36],[388,13,319,37],[389,12,320,10,"scope"],[389,17,320,15],[389,19,320,17],[390,14,320,18,"required"],[390,22,320,26],[390,24,320,28],[391,12,320,33],[392,10,321,8],[392,11,321,9],[393,10,322,8,"whitelist"],[393,19,322,17],[393,21,322,19],[394,8,323,6],[394,9,323,7],[394,11,324,6,"parameters"],[394,21,325,4],[394,22,325,5],[395,8,326,4],[395,15,326,11],[395,19,326,15],[395,20,326,16,"client"],[395,26,326,22],[395,27,327,7,"post"],[395,31,327,11],[395,32,327,12],[395,46,327,26],[395,48,327,26,"Object"],[395,54,327,26],[395,55,327,26,"assign"],[395,61,327,26],[395,66,328,11,"payload"],[395,73,328,18],[396,10,329,8,"client_id"],[396,19,329,17],[396,21,329,19],[396,25,329,23],[396,26,329,24,"clientId"],[396,34,329,32],[397,10,330,8,"realm"],[397,15,330,13],[397,17,330,15],[397,22,330,20],[398,10,331,8,"grant_type"],[398,20,331,18],[398,22,331,20],[399,8,331,72],[399,10,332,7],[399,11,332,8],[399,12,333,7,"then"],[399,16,333,11],[399,17,333,12,"responseHandler"],[399,32,333,27],[399,33,333,28],[400,6,334,2],[402,6,336,2],[403,0,337,0],[404,0,338,0],[405,0,339,0],[406,0,340,0],[407,0,341,0],[408,0,342,0],[409,0,343,0],[410,0,344,0],[411,0,345,0],[412,0,346,0],[413,0,347,0],[414,4,336,2],[415,6,336,2,"key"],[415,9,336,2],[416,6,336,2,"value"],[416,11,336,2],[416,13,348,2],[416,22,348,2,"loginWithOTP"],[416,34,348,14,"loginWithOTP"],[416,35,348,14],[416,37,348,32],[417,8,348,32],[417,12,348,15,"parameters"],[417,22,348,25],[417,25,348,25,"arguments"],[417,34,348,25],[417,35,348,25,"length"],[417,41,348,25],[417,49,348,25,"arguments"],[417,58,348,25],[417,66,348,25,"undefined"],[417,75,348,25],[417,78,348,25,"arguments"],[417,87,348,25],[417,93,348,28],[417,94,348,29],[417,95,348,30],[418,8,349,4],[418,12,349,10,"payload"],[418,19,349,17],[418,22,349,20],[418,26,349,20,"apply"],[418,56,349,20],[418,57,349,20,"apply"],[418,84,349,25],[418,86,350,6],[419,10,351,8,"parameters"],[419,20,351,18],[419,22,351,20],[420,12,352,10,"mfaToken"],[420,20,352,18],[420,22,352,20],[421,14,352,21,"required"],[421,22,352,29],[421,24,352,31],[421,28,352,35],[422,14,352,37,"toName"],[422,20,352,43],[422,22,352,45],[423,12,352,56],[423,13,352,57],[424,12,353,10,"otp"],[424,15,353,13],[424,17,353,15],[425,14,353,16,"required"],[425,22,353,24],[425,24,353,26],[425,28,353,30],[426,14,353,32,"toName"],[426,20,353,38],[426,22,353,40],[427,12,353,45],[428,10,354,8],[428,11,354,9],[429,10,355,8,"whitelist"],[429,19,355,17],[429,21,355,19],[430,8,356,6],[430,9,356,7],[430,11,357,6,"parameters"],[430,21,358,4],[430,22,358,5],[431,8,359,4],[431,15,359,11],[431,19,359,15],[431,20,359,16,"client"],[431,26,359,22],[431,27,360,7,"post"],[431,31,360,11],[431,32,360,12],[431,46,360,26],[431,48,360,26,"Object"],[431,54,360,26],[431,55,360,26,"assign"],[431,61,360,26],[431,66,361,11,"payload"],[431,73,361,18],[432,10,362,8,"client_id"],[432,19,362,17],[432,21,362,19],[432,25,362,23],[432,26,362,24,"clientId"],[432,34,362,32],[433,10,363,8,"grant_type"],[433,20,363,18],[433,22,363,20],[434,8,363,63],[434,10,364,7],[434,11,364,8],[434,12,365,7,"then"],[434,16,365,11],[434,17,365,12,"responseHandler"],[434,32,365,27],[434,33,365,28],[435,6,366,2],[437,6,368,2],[438,0,369,0],[439,0,370,0],[440,0,371,0],[441,0,372,0],[442,0,373,0],[443,0,374,0],[444,0,375,0],[445,0,376,0],[446,0,377,0],[447,0,378,0],[448,0,379,0],[449,0,380,0],[450,4,368,2],[451,6,368,2,"key"],[451,9,368,2],[452,6,368,2,"value"],[452,11,368,2],[452,13,382,2],[452,22,382,2,"loginWithOOB"],[452,34,382,14,"loginWithOOB"],[452,35,382,14],[452,37,382,32],[453,8,382,32],[453,12,382,15,"parameters"],[453,22,382,25],[453,25,382,25,"arguments"],[453,34,382,25],[453,35,382,25,"length"],[453,41,382,25],[453,49,382,25,"arguments"],[453,58,382,25],[453,66,382,25,"undefined"],[453,75,382,25],[453,78,382,25,"arguments"],[453,87,382,25],[453,93,382,28],[453,94,382,29],[453,95,382,30],[454,8,383,4],[454,12,383,10,"payload"],[454,19,383,17],[454,22,383,20],[454,26,383,20,"apply"],[454,56,383,20],[454,57,383,20,"apply"],[454,84,383,25],[454,86,384,6],[455,10,385,8,"parameters"],[455,20,385,18],[455,22,385,20],[456,12,386,10,"mfaToken"],[456,20,386,18],[456,22,386,20],[457,14,386,21,"required"],[457,22,386,29],[457,24,386,31],[457,28,386,35],[458,14,386,37,"toName"],[458,20,386,43],[458,22,386,45],[459,12,386,56],[459,13,386,57],[460,12,387,10,"oobCode"],[460,19,387,17],[460,21,387,19],[461,14,387,20,"required"],[461,22,387,28],[461,24,387,30],[461,28,387,34],[462,14,387,36,"toName"],[462,20,387,42],[462,22,387,44],[463,12,387,54],[463,13,387,55],[464,12,388,10,"bindingCode"],[464,23,388,21],[464,25,388,23],[465,14,388,24,"required"],[465,22,388,32],[465,24,388,34],[465,29,388,39],[466,14,388,41,"toName"],[466,20,388,47],[466,22,388,49],[467,12,388,63],[468,10,389,8],[468,11,389,9],[469,10,390,8,"whitelist"],[469,19,390,17],[469,21,390,19],[470,8,391,6],[470,9,391,7],[470,11,392,6,"parameters"],[470,21,393,4],[470,22,393,5],[471,8,395,4],[471,15,395,11],[471,19,395,15],[471,20,395,16,"client"],[471,26,395,22],[471,27,396,7,"post"],[471,31,396,11],[471,32,396,12],[471,46,396,26],[471,48,396,26,"Object"],[471,54,396,26],[471,55,396,26,"assign"],[471,61,396,26],[471,66,397,11,"payload"],[471,73,397,18],[472,10,398,8,"client_id"],[472,19,398,17],[472,21,398,19],[472,25,398,23],[472,26,398,24,"clientId"],[472,34,398,32],[473,10,399,8,"grant_type"],[473,20,399,18],[473,22,399,20],[474,8,399,63],[474,10,400,7],[474,11,400,8],[474,12,401,7,"then"],[474,16,401,11],[474,17,401,12,"responseHandler"],[474,32,401,27],[474,33,401,28],[475,6,402,2],[477,6,404,2],[478,0,405,0],[479,0,406,0],[480,0,407,0],[481,0,408,0],[482,0,409,0],[483,0,410,0],[484,0,411,0],[485,0,412,0],[486,0,413,0],[487,0,414,0],[488,4,404,2],[489,6,404,2,"key"],[489,9,404,2],[490,6,404,2,"value"],[490,11,404,2],[490,13,415,2],[490,22,415,2,"loginWithRecoveryCode"],[490,43,415,23,"loginWithRecoveryCode"],[490,44,415,23],[490,46,415,41],[491,8,415,41],[491,12,415,24,"parameters"],[491,22,415,34],[491,25,415,34,"arguments"],[491,34,415,34],[491,35,415,34,"length"],[491,41,415,34],[491,49,415,34,"arguments"],[491,58,415,34],[491,66,415,34,"undefined"],[491,75,415,34],[491,78,415,34,"arguments"],[491,87,415,34],[491,93,415,37],[491,94,415,38],[491,95,415,39],[492,8,416,4],[492,12,416,10,"payload"],[492,19,416,17],[492,22,416,20],[492,26,416,20,"apply"],[492,56,416,20],[492,57,416,20,"apply"],[492,84,416,25],[492,86,417,6],[493,10,418,8,"parameters"],[493,20,418,18],[493,22,418,20],[494,12,419,10,"mfaToken"],[494,20,419,18],[494,22,419,20],[495,14,419,21,"required"],[495,22,419,29],[495,24,419,31],[495,28,419,35],[496,14,419,37,"toName"],[496,20,419,43],[496,22,419,45],[497,12,419,56],[497,13,419,57],[498,12,420,10,"recoveryCode"],[498,24,420,22],[498,26,420,24],[499,14,420,25,"required"],[499,22,420,33],[499,24,420,35],[499,28,420,39],[500,14,420,41,"toName"],[500,20,420,47],[500,22,420,49],[501,12,420,64],[502,10,421,8],[502,11,421,9],[503,10,422,8,"whitelist"],[503,19,422,17],[503,21,422,19],[504,8,423,6],[504,9,423,7],[504,11,424,6,"parameters"],[504,21,425,4],[504,22,425,5],[505,8,427,4],[505,15,427,11],[505,19,427,15],[505,20,427,16,"client"],[505,26,427,22],[505,27,428,7,"post"],[505,31,428,11],[505,32,428,12],[505,46,428,26],[505,48,428,26,"Object"],[505,54,428,26],[505,55,428,26,"assign"],[505,61,428,26],[505,66,429,11,"payload"],[505,73,429,18],[506,10,430,8,"client_id"],[506,19,430,17],[506,21,430,19],[506,25,430,23],[506,26,430,24,"clientId"],[506,34,430,32],[507,10,431,8,"grant_type"],[507,20,431,18],[507,22,431,20],[508,8,431,73],[508,10,432,7],[508,11,432,8],[508,12,433,7,"then"],[508,16,433,11],[508,17,433,12,"responseHandler"],[508,32,433,27],[508,33,433,28],[509,6,434,2],[511,6,436,2],[512,0,437,0],[513,0,438,0],[514,0,439,0],[515,0,440,0],[516,0,441,0],[517,0,442,0],[518,0,443,0],[519,0,444,0],[520,0,445,0],[521,0,446,0],[522,0,447,0],[523,4,436,2],[524,6,436,2,"key"],[524,9,436,2],[525,6,436,2,"value"],[525,11,436,2],[525,13,448,2],[525,22,448,2,"multifactorChallenge"],[525,42,448,22,"multifactorChallenge"],[525,43,448,22],[525,45,448,40],[526,8,448,40],[526,12,448,23,"parameters"],[526,22,448,33],[526,25,448,33,"arguments"],[526,34,448,33],[526,35,448,33,"length"],[526,41,448,33],[526,49,448,33,"arguments"],[526,58,448,33],[526,66,448,33,"undefined"],[526,75,448,33],[526,78,448,33,"arguments"],[526,87,448,33],[526,93,448,36],[526,94,448,37],[526,95,448,38],[527,8,449,4],[527,12,449,10,"payload"],[527,19,449,17],[527,22,449,20],[527,26,449,20,"apply"],[527,56,449,20],[527,57,449,20,"apply"],[527,84,449,25],[527,86,450,6],[528,10,451,8,"parameters"],[528,20,451,18],[528,22,451,20],[529,12,452,10,"mfaToken"],[529,20,452,18],[529,22,452,20],[530,14,452,21,"required"],[530,22,452,29],[530,24,452,31],[530,28,452,35],[531,14,452,37,"toName"],[531,20,452,43],[531,22,452,45],[532,12,452,56],[532,13,452,57],[533,12,453,10,"challengeType"],[533,25,453,23],[533,27,453,25],[534,14,453,26,"required"],[534,22,453,34],[534,24,453,36],[534,29,453,41],[535,14,453,43,"toName"],[535,20,453,49],[535,22,453,51],[536,12,453,67],[536,13,453,68],[537,12,454,10,"authenticatorId"],[537,27,454,25],[537,29,454,27],[538,14,454,28,"required"],[538,22,454,36],[538,24,454,38],[538,29,454,43],[539,14,454,45,"toName"],[539,20,454,51],[539,22,454,53],[540,12,454,71],[541,10,455,8],[542,8,456,6],[542,9,456,7],[542,11,457,6,"parameters"],[542,21,458,4],[542,22,458,5],[543,8,459,4],[543,15,459,11],[543,19,459,15],[543,20,459,16,"client"],[543,26,459,22],[543,27,460,7,"post"],[543,31,460,11],[543,32,460,12],[543,48,460,28],[543,50,460,28,"Object"],[543,56,460,28],[543,57,460,28,"assign"],[543,63,460,28],[543,68,461,11,"payload"],[543,75,461,18],[544,10,462,8,"client_id"],[544,19,462,17],[544,21,462,19],[544,25,462,23],[544,26,462,24,"clientId"],[545,8,462,32],[545,10,463,7],[545,11,463,8],[545,12,464,7,"then"],[545,16,464,11],[545,17,464,12,"responseHandler"],[545,32,464,27],[545,33,464,28],[546,6,465,2],[548,6,467,2],[549,0,468,0],[550,0,469,0],[551,0,470,0],[552,0,471,0],[553,0,472,0],[554,0,473,0],[555,4,467,2],[556,6,467,2,"key"],[556,9,467,2],[557,6,467,2,"value"],[557,11,467,2],[557,13,474,2],[557,22,474,2,"revoke"],[557,28,474,8,"revoke"],[557,29,474,8],[557,31,474,26],[558,8,474,26],[558,12,474,9,"parameters"],[558,22,474,19],[558,25,474,19,"arguments"],[558,34,474,19],[558,35,474,19,"length"],[558,41,474,19],[558,49,474,19,"arguments"],[558,58,474,19],[558,66,474,19,"undefined"],[558,75,474,19],[558,78,474,19,"arguments"],[558,87,474,19],[558,93,474,22],[558,94,474,23],[558,95,474,24],[559,8,475,4],[559,12,475,10,"payload"],[559,19,475,17],[559,22,475,20],[559,26,475,20,"apply"],[559,56,475,20],[559,57,475,20,"apply"],[559,84,475,25],[559,86,476,6],[560,10,477,8,"parameters"],[560,20,477,18],[560,22,477,20],[561,12,478,10,"refreshToken"],[561,24,478,22],[561,26,478,24],[562,14,478,25,"required"],[562,22,478,33],[562,24,478,35],[562,28,478,39],[563,14,478,41,"toName"],[563,20,478,47],[563,22,478,49],[564,12,478,56],[565,10,479,8],[566,8,480,6],[566,9,480,7],[566,11,481,6,"parameters"],[566,21,482,4],[566,22,482,5],[567,8,483,4],[567,15,483,11],[567,19,483,15],[567,20,483,16,"client"],[567,26,483,22],[567,27,484,7,"post"],[567,31,484,11],[567,32,484,12],[567,47,484,27],[567,49,484,27,"Object"],[567,55,484,27],[567,56,484,27,"assign"],[567,62,484,27],[567,67,485,11,"payload"],[567,74,485,18],[568,10,486,8,"client_id"],[568,19,486,17],[568,21,486,19],[568,25,486,23],[568,26,486,24,"clientId"],[569,8,486,32],[569,10,487,7],[569,11,487,8],[569,12,488,7,"then"],[569,16,488,11],[569,17,488,12],[569,27,488,12,"response"],[569,35,488,20],[569,37,488,24],[570,10,489,8],[570,14,489,12,"response"],[570,22,489,20],[570,23,489,21,"ok"],[570,25,489,23],[570,27,489,25],[571,12,490,10],[571,19,490,17],[571,20,490,18],[571,21,490,19],[572,10,491,8],[573,10,492,8],[573,16,492,14],[573,20,492,18,"AuthError"],[573,38,492,27],[573,39,492,28,"response"],[573,47,492,36],[573,48,492,37],[574,8,493,6],[574,9,493,7],[574,10,493,8],[575,6,494,2],[577,6,496,2],[578,0,497,0],[579,0,498,0],[580,0,499,0],[581,0,500,0],[582,0,501,0],[583,0,502,0],[584,4,496,2],[585,6,496,2,"key"],[585,9,496,2],[586,6,496,2,"value"],[586,11,496,2],[586,13,503,2],[586,22,503,2,"userInfo"],[586,30,503,10,"userInfo"],[586,31,503,10],[586,33,503,28],[587,8,503,28],[587,12,503,11,"parameters"],[587,22,503,21],[587,25,503,21,"arguments"],[587,34,503,21],[587,35,503,21,"length"],[587,41,503,21],[587,49,503,21,"arguments"],[587,58,503,21],[587,66,503,21,"undefined"],[587,75,503,21],[587,78,503,21,"arguments"],[587,87,503,21],[587,93,503,24],[587,94,503,25],[587,95,503,26],[588,8,504,4],[588,12,504,10,"payload"],[588,19,504,17],[588,22,504,20],[588,26,504,20,"apply"],[588,56,504,20],[588,57,504,20,"apply"],[588,84,504,25],[588,86,505,6],[589,10,506,8,"parameters"],[589,20,506,18],[589,22,506,20],[590,12,507,10,"token"],[590,17,507,15],[590,19,507,17],[591,14,507,18,"required"],[591,22,507,26],[591,24,507,28],[592,12,507,32],[593,10,508,8],[594,8,509,6],[594,9,509,7],[594,11,510,6,"parameters"],[594,21,511,4],[594,22,511,5],[595,8,512,4],[595,12,512,4,"_this$client"],[595,24,512,4],[595,27,512,33],[595,31,512,37],[595,32,512,38,"client"],[595,38,512,44],[596,10,512,11,"baseUrl"],[596,17,512,18],[596,20,512,18,"_this$client"],[596,32,512,18],[596,33,512,11,"baseUrl"],[596,40,512,18],[597,10,512,20,"telemetry"],[597,19,512,29],[597,22,512,29,"_this$client"],[597,34,512,29],[597,35,512,20,"telemetry"],[597,44,512,29],[598,8,513,4],[598,12,513,10,"client"],[598,18,513,16],[598,21,513,19],[598,25,513,23,"Client"],[598,44,513,29],[598,45,513,30],[599,10,513,31,"baseUrl"],[599,17,513,38],[599,19,513,31,"baseUrl"],[599,26,513,38],[600,10,513,40,"telemetry"],[600,19,513,49],[600,21,513,40,"telemetry"],[600,30,513,49],[601,10,513,51,"token"],[601,15,513,56],[601,17,513,58,"payload"],[601,24,513,65],[601,25,513,66,"token"],[602,8,513,71],[602,9,513,72],[602,10,513,73],[603,8,514,4],[603,12,514,10,"claims"],[603,18,514,16],[603,21,514,19],[603,22,515,6],[603,27,515,11],[603,29,516,6],[603,35,516,12],[603,37,517,6],[603,49,517,18],[603,51,518,6],[603,64,518,19],[603,66,519,6],[603,79,519,19],[603,81,520,6],[603,91,520,16],[603,93,521,6],[603,113,521,26],[603,115,522,6],[603,124,522,15],[603,126,523,6],[603,135,523,15],[603,137,524,6],[603,146,524,15],[603,148,525,6],[603,155,525,13],[603,157,526,6],[603,173,526,22],[603,175,527,6],[603,183,527,14],[603,185,528,6],[603,196,528,17],[603,198,529,6],[603,208,529,16],[603,210,530,6],[603,218,530,14],[603,220,531,6],[603,234,531,20],[603,236,532,6],[603,259,532,29],[603,261,533,6],[603,270,533,15],[603,272,534,6],[603,284,534,18],[603,285,535,5],[604,8,536,4],[604,15,536,11,"client"],[604,21,536,17],[604,22,537,7,"get"],[604,25,537,10],[604,26,537,11],[604,37,537,22],[604,38,537,23],[604,39,538,7,"then"],[604,43,538,11],[604,44,538,12],[604,54,538,12,"response"],[604,62,538,20],[605,10,538,20],[605,17,539,8,"responseHandler"],[605,32,539,23],[605,33,539,24,"response"],[605,41,539,32],[605,43,539,34],[606,12,539,35,"attributes"],[606,22,539,45],[606,24,539,47,"claims"],[606,30,539,53],[607,12,539,55,"whitelist"],[607,21,539,64],[607,23,539,66],[608,10,539,70],[608,11,539,71],[608,12,539,72],[609,8,539,72],[609,9,540,6],[609,10,540,7],[610,6,541,2],[612,6,543,2],[613,0,544,0],[614,0,545,0],[615,0,546,0],[616,0,547,0],[617,0,548,0],[618,0,549,0],[619,0,550,0],[620,4,543,2],[621,6,543,2,"key"],[621,9,543,2],[622,6,543,2,"value"],[622,11,543,2],[622,13,551,2],[622,22,551,2,"resetPassword"],[622,35,551,15,"resetPassword"],[622,36,551,15],[622,38,551,33],[623,8,551,33],[623,12,551,16,"parameters"],[623,22,551,26],[623,25,551,26,"arguments"],[623,34,551,26],[623,35,551,26,"length"],[623,41,551,26],[623,49,551,26,"arguments"],[623,58,551,26],[623,66,551,26,"undefined"],[623,75,551,26],[623,78,551,26,"arguments"],[623,87,551,26],[623,93,551,29],[623,94,551,30],[623,95,551,31],[624,8,552,4],[624,12,552,10,"payload"],[624,19,552,17],[624,22,552,20],[624,26,552,20,"apply"],[624,56,552,20],[624,57,552,20,"apply"],[624,84,552,25],[624,86,553,6],[625,10,554,8,"parameters"],[625,20,554,18],[625,22,554,20],[626,12,555,10,"email"],[626,17,555,15],[626,19,555,17],[627,14,555,18,"required"],[627,22,555,26],[627,24,555,28],[628,12,555,32],[628,13,555,33],[629,12,556,10,"connection"],[629,22,556,20],[629,24,556,22],[630,14,556,23,"required"],[630,22,556,31],[630,24,556,33],[631,12,556,37],[632,10,557,8],[633,8,558,6],[633,9,558,7],[633,11,559,6,"parameters"],[633,21,560,4],[633,22,560,5],[634,8,561,4],[634,15,561,11],[634,19,561,15],[634,20,561,16,"client"],[634,26,561,22],[634,27,562,7,"post"],[634,31,562,11],[634,32,562,12],[634,64,562,44],[634,66,562,44,"Object"],[634,72,562,44],[634,73,562,44,"assign"],[634,79,562,44],[634,84,563,11,"payload"],[634,91,563,18],[635,10,564,8,"client_id"],[635,19,564,17],[635,21,564,19],[635,25,564,23],[635,26,564,24,"clientId"],[636,8,564,32],[636,10,565,7],[636,11,565,8],[636,12,566,7,"then"],[636,16,566,11],[636,17,566,12],[636,27,566,12,"response"],[636,35,566,20],[636,37,566,24],[637,10,567,8],[637,14,567,12,"response"],[637,22,567,20],[637,23,567,21,"ok"],[637,25,567,23],[637,27,567,25],[638,12,568,10],[638,19,568,17],[638,20,568,18],[638,21,568,19],[639,10,569,8],[640,10,570,8],[640,16,570,14],[640,20,570,18,"AuthError"],[640,38,570,27],[640,39,570,28,"response"],[640,47,570,36],[640,48,570,37],[641,8,571,6],[641,9,571,7],[641,10,571,8],[642,6,572,2],[644,6,574,2],[645,0,575,0],[646,0,576,0],[647,0,577,0],[648,0,578,0],[649,0,579,0],[650,0,580,0],[651,0,581,0],[652,0,582,0],[653,0,583,0],[654,0,584,0],[655,0,585,0],[656,0,586,0],[657,0,587,0],[658,0,588,0],[659,0,589,0],[660,4,574,2],[661,6,574,2,"key"],[661,9,574,2],[662,6,574,2,"value"],[662,11,574,2],[662,13,590,2],[662,22,590,2,"createUser"],[662,32,590,12,"createUser"],[662,33,590,12],[662,35,590,30],[663,8,590,30],[663,12,590,13,"parameters"],[663,22,590,23],[663,25,590,23,"arguments"],[663,34,590,23],[663,35,590,23,"length"],[663,41,590,23],[663,49,590,23,"arguments"],[663,58,590,23],[663,66,590,23,"undefined"],[663,75,590,23],[663,78,590,23,"arguments"],[663,87,590,23],[663,93,590,26],[663,94,590,27],[663,95,590,28],[664,8,591,4],[664,12,591,10,"payload"],[664,19,591,17],[664,22,591,20],[664,26,591,20,"apply"],[664,56,591,20],[664,57,591,20,"apply"],[664,84,591,25],[664,86,592,6],[665,10,593,8,"parameters"],[665,20,593,18],[665,22,593,20],[666,12,594,10,"email"],[666,17,594,15],[666,19,594,17],[667,14,594,18,"required"],[667,22,594,26],[667,24,594,28],[668,12,594,32],[668,13,594,33],[669,12,595,10,"password"],[669,20,595,18],[669,22,595,20],[670,14,595,21,"required"],[670,22,595,29],[670,24,595,31],[671,12,595,35],[671,13,595,36],[672,12,596,10,"connection"],[672,22,596,20],[672,24,596,22],[673,14,596,23,"required"],[673,22,596,31],[673,24,596,33],[674,12,596,37],[674,13,596,38],[675,12,597,10,"username"],[675,20,597,18],[675,22,597,20],[676,14,597,21,"required"],[676,22,597,29],[676,24,597,31],[677,12,597,36],[677,13,597,37],[678,12,598,10,"given_name"],[678,22,598,20],[678,24,598,22],[679,14,598,23,"required"],[679,22,598,31],[679,24,598,33],[680,12,598,38],[680,13,598,39],[681,12,599,10,"family_name"],[681,23,599,21],[681,25,599,23],[682,14,599,24,"required"],[682,22,599,32],[682,24,599,34],[683,12,599,39],[683,13,599,40],[684,12,600,10,"name"],[684,16,600,14],[684,18,600,16],[685,14,600,17,"required"],[685,22,600,25],[685,24,600,27],[686,12,600,32],[686,13,600,33],[687,12,601,10,"nickname"],[687,20,601,18],[687,22,601,20],[688,14,601,21,"required"],[688,22,601,29],[688,24,601,31],[689,12,601,36],[689,13,601,37],[690,12,602,10,"picture"],[690,19,602,17],[690,21,602,19],[691,14,602,20,"required"],[691,22,602,28],[691,24,602,30],[692,12,602,35],[692,13,602,36],[693,12,603,10,"metadata"],[693,20,603,18],[693,22,603,20],[694,14,603,21,"required"],[694,22,603,29],[694,24,603,31],[694,29,603,36],[695,14,603,38,"toName"],[695,20,603,44],[695,22,603,46],[696,12,603,61],[697,10,604,8],[698,8,605,6],[698,9,605,7],[698,11,606,6,"parameters"],[698,21,607,4],[698,22,607,5],[699,8,609,4],[699,15,609,11],[699,19,609,15],[699,20,609,16,"client"],[699,26,609,22],[699,27,610,7,"post"],[699,31,610,11],[699,32,610,12],[699,55,610,35],[699,57,610,35,"Object"],[699,63,610,35],[699,64,610,35,"assign"],[699,70,610,35],[699,75,611,11,"payload"],[699,82,611,18],[700,10,612,8,"client_id"],[700,19,612,17],[700,21,612,19],[700,25,612,23],[700,26,612,24,"clientId"],[701,8,612,32],[701,10,613,7],[701,11,613,8],[701,12,614,7,"then"],[701,16,614,11],[701,17,614,12],[701,27,614,12,"response"],[701,35,614,20],[701,37,614,24],[702,10,615,8],[702,14,615,12,"response"],[702,22,615,20],[702,23,615,21,"ok"],[702,25,615,23],[702,29,615,27,"response"],[702,37,615,35],[702,38,615,36,"json"],[702,42,615,40],[702,44,615,42],[703,12,616,10],[703,19,616,17],[703,23,616,17,"toCamelCase"],[703,53,616,17],[703,54,616,17,"toCamelCase"],[703,83,616,28],[703,85,616,29,"response"],[703,93,616,37],[703,94,616,38,"json"],[703,98,616,42],[703,99,616,43],[704,10,617,8],[705,10,618,8],[705,16,618,14],[705,20,618,18,"Auth0Error"],[705,39,618,28],[705,40,618,29,"response"],[705,48,618,37],[705,49,618,38],[706,8,619,6],[706,9,619,7],[706,10,619,8],[707,6,620,2],[708,4,620,3],[709,2,620,3],[710,2,620,3],[710,6,620,3,"_default"],[710,14,620,3],[710,17,620,3,"exports"],[710,24,620,3],[710,25,620,3,"default"],[710,32,620,3],[710,35,623,15,"Auth"],[710,39,623,19],[711,0,623,19],[711,3]],"functionMap":{"names":["<global>","responseHandler","Auth","Auth#constructor","Auth#authorizeUrl","Auth#logoutUrl","Auth#exchange","Auth#exchangeNativeSocial","Auth#passwordRealm","Auth#refreshToken","Auth#passwordlessWithEmail","Auth#passwordlessWithSMS","Auth#loginWithEmail","Auth#loginWithSMS","Auth#loginWithOTP","Auth#loginWithOOB","Auth#loginWithRecoveryCode","Auth#multifactorChallenge","Auth#revoke","client.post.then$argument_0","Auth#userInfo","client.get.then$argument_0","Auth#resetPassword","Auth#createUser"],"mappings":"AAA;ACM;CDK;AEO;ECC;GDQ;EEY;GFiB;EGY;GHY;EIY;GJkB;EKe;GLoB;EMc;GNqB;EOW;GPkB;EQW;GRmB;ESS;GTmB;EUY;GVqB;EWY;GXqB;EYc;GZkB;EagB;GboB;Eca;GdmB;Eec;GfiB;EgBS;YCc;ODK;GhBC;EkBS;YCmC;wEDC;GlBE;EoBU;YHe;OGK;GpBC;EqBkB;YJwB;OIK;GrBC;CFC"}},"type":"js/module"}]}