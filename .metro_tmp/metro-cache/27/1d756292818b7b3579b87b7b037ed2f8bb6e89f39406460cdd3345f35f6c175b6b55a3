{"dependencies":[{"name":"./startOfSecond.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}},{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"P+TlRUCsIb0w8bnNeOLk/4TdKwM="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.isSameSecond = isSameSecond;\n  /**\n   * @name isSameSecond\n   * @category Second Helpers\n   * @summary Are the given dates in the same second (and hour and day)?\n   *\n   * @description\n   * Are the given dates in the same second (and hour and day)?\n   *\n   * @param laterDate - The first date to check\n   * @param earlierDate - The second date to check\n   *\n   * @returns The dates are in the same second (and hour and day)\n   *\n   * @example\n   * // Are 4 September 2014 06:30:15.000 and 4 September 2014 06:30.15.500 in the same second?\n   * const result = isSameSecond(\n   *   new Date(2014, 8, 4, 6, 30, 15),\n   *   new Date(2014, 8, 4, 6, 30, 15, 500)\n   * )\n   * //=> true\n   *\n   * @example\n   * // Are 4 September 2014 06:00:15.000 and 4 September 2014 06:01.15.000 in the same second?\n   * const result = isSameSecond(\n   *   new Date(2014, 8, 4, 6, 0, 15),\n   *   new Date(2014, 8, 4, 6, 1, 15)\n   * )\n   * //=> false\n   *\n   * @example\n   * // Are 4 September 2014 06:00:15.000 and 5 September 2014 06:00.15.000 in the same second?\n   * const result = isSameSecond(\n   *   new Date(2014, 8, 4, 6, 0, 15),\n   *   new Date(2014, 8, 5, 6, 0, 15)\n   * )\n   * //=> false\n   */\n  function isSameSecond(laterDate, earlierDate) {\n    return +(0, _$$_REQUIRE(_dependencyMap[0], \"./startOfSecond.js\").startOfSecond)(laterDate) === +(0, _$$_REQUIRE(_dependencyMap[0], \"./startOfSecond.js\").startOfSecond)(earlierDate);\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = isSameSecond;\n});","lineCount":50,"map":[[7,2,3,0],[8,0,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,0,29,0],[34,0,30,0],[35,0,31,0],[36,0,32,0],[37,0,33,0],[38,0,34,0],[39,0,35,0],[40,0,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,2,40,7],[44,11,40,16,"isSameSecond"],[44,23,40,28,"isSameSecond"],[44,24,40,29,"laterDate"],[44,33,40,38],[44,35,40,40,"earlierDate"],[44,46,40,51],[44,48,40,53],[45,4,41,2],[45,11,41,9],[45,12,41,10],[45,16,41,10,"startOfSecond"],[45,46,41,10],[45,47,41,10,"startOfSecond"],[45,82,41,23],[45,84,41,24,"laterDate"],[45,93,41,33],[45,94,41,34],[45,99,41,39],[45,100,41,40],[45,104,41,40,"startOfSecond"],[45,134,41,40],[45,135,41,40,"startOfSecond"],[45,170,41,53],[45,172,41,54,"earlierDate"],[45,183,41,65],[45,184,41,66],[46,2,42,0],[48,2,44,0],[49,2,44,0],[49,6,44,0,"_default"],[49,14,44,0],[49,17,44,0,"exports"],[49,24,44,0],[49,25,44,0,"default"],[49,32,44,0],[49,35,45,15,"isSameSecond"],[49,47,45,27],[50,0,45,27],[50,3]],"functionMap":{"names":["<global>","isSameSecond"],"mappings":"AAA;OCuC;CDE"}},"type":"js/module"}]}