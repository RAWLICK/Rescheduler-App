{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":190,"column":0,"index":6209}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/toConsumableArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":190,"column":0,"index":6209}}],"key":"XnmB3YjhLQUu4Gtg+kalDAx6bCo="}},{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":190,"column":0,"index":6209}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}},{"name":"./_lib/defaultOptions.js","data":{"asyncType":null,"locs":[{"start":{"line":2,"column":0,"index":57},"end":{"line":2,"column":61,"index":118}}],"key":"B7PUaW+0rVjhIETVhdHvNZcTIi8="}},{"name":"./_lib/defaultLocale.js","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":56,"index":56}}],"key":"d83zFHygMR3gekZehKFbYM8GUrM="}},{"name":"./compareAsc.js","data":{"asyncType":null,"locs":[{"start":{"line":6,"column":0,"index":336},"end":{"line":6,"column":45,"index":381}}],"key":"zPu8MGf7drY7bCMT2VQ8RwP0PA4="}},{"name":"./_lib/normalizeDates.js","data":{"asyncType":null,"locs":[{"start":{"line":5,"column":0,"index":277},"end":{"line":5,"column":58,"index":335}}],"key":"qsrciYLlsSqtgV9rGEsSwSoAnCw="}},{"name":"./_lib/getRoundingMethod.js","data":{"asyncType":null,"locs":[{"start":{"line":3,"column":0,"index":119},"end":{"line":3,"column":64,"index":183}}],"key":"ndTrphm//UZzzqhNblex5zIu2d0="}},{"name":"./constants.js","data":{"asyncType":null,"locs":[{"start":{"line":7,"column":0,"index":382},"end":{"line":12,"column":24,"index":490}},{"start":{"line":7,"column":0,"index":382},"end":{"line":12,"column":24,"index":490}},{"start":{"line":7,"column":0,"index":382},"end":{"line":12,"column":24,"index":490}},{"start":{"line":7,"column":0,"index":382},"end":{"line":12,"column":24,"index":490}},{"start":{"line":7,"column":0,"index":382},"end":{"line":12,"column":24,"index":490}},{"start":{"line":7,"column":0,"index":382},"end":{"line":12,"column":24,"index":490}},{"start":{"line":7,"column":0,"index":382},"end":{"line":12,"column":24,"index":490}},{"start":{"line":7,"column":0,"index":382},"end":{"line":12,"column":24,"index":490}}],"key":"0CDp4OIxpxzHKYXO2c/E0Fm3H6U="}},{"name":"./_lib/getTimezoneOffsetInMilliseconds.js","data":{"asyncType":null,"locs":[{"start":{"line":4,"column":0,"index":184},"end":{"line":4,"column":92,"index":276}},{"start":{"line":4,"column":0,"index":184},"end":{"line":4,"column":92,"index":276}}],"key":"DaTWSp7W8IZ8bPvM94IzOSvNQSs="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  exports.formatDistanceStrict = formatDistanceStrict;\n  var _toConsumableArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/toConsumableArray\"));\n  var _slicedToArray2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/slicedToArray\"));\n  /**\n   * The {@link formatDistanceStrict} function options.\n   */\n\n  /**\n   * The unit used to format the distance in {@link formatDistanceStrict}.\n   */\n\n  /**\n   * @name formatDistanceStrict\n   * @category Common Helpers\n   * @summary Return the distance between the given dates in words.\n   *\n   * @description\n   * Return the distance between the given dates in words, using strict units.\n   * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n   * 'less than' and the like.\n   *\n   * | Distance between dates | Result              |\n   * |------------------------|---------------------|\n   * | 0 ... 59 secs          | [0..59] seconds     |\n   * | 1 ... 59 mins          | [1..59] minutes     |\n   * | 1 ... 23 hrs           | [1..23] hours       |\n   * | 1 ... 29 days          | [1..29] days        |\n   * | 1 ... 11 months        | [1..11] months      |\n   * | 1 ... N years          | [1..N]  years       |\n   *\n   * @param laterDate - The date\n   * @param earlierDate - The date to compare with\n   * @param options - An object with options\n   *\n   * @returns The distance in words\n   *\n   * @throws `date` must not be Invalid Date\n   * @throws `baseDate` must not be Invalid Date\n   * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n   * @throws `options.locale` must contain `formatDistance` property\n   *\n   * @example\n   * // What is the distance between 2 July 2014 and 1 January 2015?\n   * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n   * //=> '6 months'\n   *\n   * @example\n   * // What is the distance between 1 January 2015 00:00:15\n   * // and 1 January 2015 00:00:00?\n   * const result = formatDistanceStrict(\n   *   new Date(2015, 0, 1, 0, 0, 15),\n   *   new Date(2015, 0, 1, 0, 0, 0)\n   * )\n   * //=> '15 seconds'\n   *\n   * @example\n   * // What is the distance from 1 January 2016\n   * // to 1 January 2015, with a suffix?\n   * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n   *   addSuffix: true\n   * })\n   * //=> '1 year ago'\n   *\n   * @example\n   * // What is the distance from 1 January 2016\n   * // to 1 January 2015, in minutes?\n   * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n   *   unit: 'minute'\n   * })\n   * //=> '525600 minutes'\n   *\n   * @example\n   * // What is the distance from 1 January 2015\n   * // to 28 January 2015, in months, rounded up?\n   * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n   *   unit: 'month',\n   *   roundingMethod: 'ceil'\n   * })\n   * //=> '1 month'\n   *\n   * @example\n   * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n   * import { eoLocale } from 'date-fns/locale/eo'\n   * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n   *   locale: eoLocale\n   * })\n   * //=> '1 jaro'\n   */\n\n  function formatDistanceStrict(laterDate, earlierDate, options) {\n    var _ref, _options$locale, _options$roundingMeth;\n    var defaultOptions = (0, _$$_REQUIRE(_dependencyMap[3], \"./_lib/defaultOptions.js\").getDefaultOptions)();\n    var locale = (_ref = (_options$locale = options == null ? void 0 : options.locale) != null ? _options$locale : defaultOptions.locale) != null ? _ref : _$$_REQUIRE(_dependencyMap[4], \"./_lib/defaultLocale.js\").defaultLocale;\n    var comparison = (0, _$$_REQUIRE(_dependencyMap[5], \"./compareAsc.js\").compareAsc)(laterDate, earlierDate);\n    if (isNaN(comparison)) {\n      throw new RangeError(\"Invalid time value\");\n    }\n    var localizeOptions = Object.assign({}, options, {\n      addSuffix: options == null ? void 0 : options.addSuffix,\n      comparison: comparison\n    });\n    var _normalizeDates = _$$_REQUIRE(_dependencyMap[6], \"./_lib/normalizeDates.js\").normalizeDates.apply(void 0, [options == null ? void 0 : options.in].concat((0, _toConsumableArray2.default)(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]))),\n      _normalizeDates2 = (0, _slicedToArray2.default)(_normalizeDates, 2),\n      laterDate_ = _normalizeDates2[0],\n      earlierDate_ = _normalizeDates2[1];\n    var roundingMethod = (0, _$$_REQUIRE(_dependencyMap[7], \"./_lib/getRoundingMethod.js\").getRoundingMethod)((_options$roundingMeth = options == null ? void 0 : options.roundingMethod) != null ? _options$roundingMeth : \"round\");\n    var milliseconds = earlierDate_.getTime() - laterDate_.getTime();\n    var minutes = milliseconds / _$$_REQUIRE(_dependencyMap[8], \"./constants.js\").millisecondsInMinute;\n    var timezoneOffset = (0, _$$_REQUIRE(_dependencyMap[9], \"./_lib/getTimezoneOffsetInMilliseconds.js\").getTimezoneOffsetInMilliseconds)(earlierDate_) - (0, _$$_REQUIRE(_dependencyMap[9], \"./_lib/getTimezoneOffsetInMilliseconds.js\").getTimezoneOffsetInMilliseconds)(laterDate_);\n\n    // Use DST-normalized difference in minutes for years, months and days;\n    // use regular difference in minutes for hours, minutes and seconds.\n    var dstNormalizedMinutes = (milliseconds - timezoneOffset) / _$$_REQUIRE(_dependencyMap[8], \"./constants.js\").millisecondsInMinute;\n    var defaultUnit = options == null ? void 0 : options.unit;\n    var unit;\n    if (!defaultUnit) {\n      if (minutes < 1) {\n        unit = \"second\";\n      } else if (minutes < 60) {\n        unit = \"minute\";\n      } else if (minutes < _$$_REQUIRE(_dependencyMap[8], \"./constants.js\").minutesInDay) {\n        unit = \"hour\";\n      } else if (dstNormalizedMinutes < _$$_REQUIRE(_dependencyMap[8], \"./constants.js\").minutesInMonth) {\n        unit = \"day\";\n      } else if (dstNormalizedMinutes < _$$_REQUIRE(_dependencyMap[8], \"./constants.js\").minutesInYear) {\n        unit = \"month\";\n      } else {\n        unit = \"year\";\n      }\n    } else {\n      unit = defaultUnit;\n    }\n\n    // 0 up to 60 seconds\n    if (unit === \"second\") {\n      var seconds = roundingMethod(milliseconds / 1000);\n      return locale.formatDistance(\"xSeconds\", seconds, localizeOptions);\n\n      // 1 up to 60 mins\n    } else if (unit === \"minute\") {\n      var roundedMinutes = roundingMethod(minutes);\n      return locale.formatDistance(\"xMinutes\", roundedMinutes, localizeOptions);\n\n      // 1 up to 24 hours\n    } else if (unit === \"hour\") {\n      var hours = roundingMethod(minutes / 60);\n      return locale.formatDistance(\"xHours\", hours, localizeOptions);\n\n      // 1 up to 30 days\n    } else if (unit === \"day\") {\n      var days = roundingMethod(dstNormalizedMinutes / _$$_REQUIRE(_dependencyMap[8], \"./constants.js\").minutesInDay);\n      return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n      // 1 up to 12 months\n    } else if (unit === \"month\") {\n      var months = roundingMethod(dstNormalizedMinutes / _$$_REQUIRE(_dependencyMap[8], \"./constants.js\").minutesInMonth);\n      return months === 12 && defaultUnit !== \"month\" ? locale.formatDistance(\"xYears\", 1, localizeOptions) : locale.formatDistance(\"xMonths\", months, localizeOptions);\n\n      // 1 year up to max Date\n    } else {\n      var years = roundingMethod(dstNormalizedMinutes / _$$_REQUIRE(_dependencyMap[8], \"./constants.js\").minutesInYear);\n      return locale.formatDistance(\"xYears\", years, localizeOptions);\n    }\n  }\n\n  // Fallback for modularized imports:\n  var _default = exports.default = formatDistanceStrict;\n});","lineCount":174,"map":[[10,2,14,0],[11,0,15,0],[12,0,16,0],[14,2,18,0],[15,0,19,0],[16,0,20,0],[18,2,22,0],[19,0,23,0],[20,0,24,0],[21,0,25,0],[22,0,26,0],[23,0,27,0],[24,0,28,0],[25,0,29,0],[26,0,30,0],[27,0,31,0],[28,0,32,0],[29,0,33,0],[30,0,34,0],[31,0,35,0],[32,0,36,0],[33,0,37,0],[34,0,38,0],[35,0,39,0],[36,0,40,0],[37,0,41,0],[38,0,42,0],[39,0,43,0],[40,0,44,0],[41,0,45,0],[42,0,46,0],[43,0,47,0],[44,0,48,0],[45,0,49,0],[46,0,50,0],[47,0,51,0],[48,0,52,0],[49,0,53,0],[50,0,54,0],[51,0,55,0],[52,0,56,0],[53,0,57,0],[54,0,58,0],[55,0,59,0],[56,0,60,0],[57,0,61,0],[58,0,62,0],[59,0,63,0],[60,0,64,0],[61,0,65,0],[62,0,66,0],[63,0,67,0],[64,0,68,0],[65,0,69,0],[66,0,70,0],[67,0,71,0],[68,0,72,0],[69,0,73,0],[70,0,74,0],[71,0,75,0],[72,0,76,0],[73,0,77,0],[74,0,78,0],[75,0,79,0],[76,0,80,0],[77,0,81,0],[78,0,82,0],[79,0,83,0],[80,0,84,0],[81,0,85,0],[82,0,86,0],[83,0,87,0],[84,0,88,0],[85,0,89,0],[86,0,90,0],[87,0,91,0],[88,0,92,0],[89,0,93,0],[90,0,94,0],[91,0,95,0],[92,0,96,0],[93,0,97,0],[94,0,98,0],[96,2,100,7],[96,11,100,16,"formatDistanceStrict"],[96,31,100,36,"formatDistanceStrict"],[96,32,100,37,"laterDate"],[96,41,100,46],[96,43,100,48,"earlierDate"],[96,54,100,59],[96,56,100,61,"options"],[96,63,100,68],[96,65,100,70],[97,4,100,70],[97,8,100,70,"_ref"],[97,12,100,70],[97,14,100,70,"_options$locale"],[97,29,100,70],[97,31,100,70,"_options$roundingMeth"],[97,52,100,70],[98,4,101,2],[98,8,101,8,"defaultOptions"],[98,22,101,22],[98,25,101,25],[98,29,101,25,"getDefaultOptions"],[98,59,101,25],[98,60,101,25,"getDefaultOptions"],[98,105,101,42],[98,107,101,43],[98,108,101,44],[99,4,102,2],[99,8,102,8,"locale"],[99,14,102,14],[99,18,102,14,"_ref"],[99,22,102,14],[99,26,102,14,"_options$locale"],[99,41,102,14],[99,44,102,17,"options"],[99,51,102,24],[99,71,102,17,"options"],[99,78,102,24],[99,79,102,26,"locale"],[99,85,102,32],[99,97,102,32,"_options$locale"],[99,112,102,32],[99,115,102,36,"defaultOptions"],[99,129,102,50],[99,130,102,51,"locale"],[99,136,102,57],[99,148,102,57,"_ref"],[99,152,102,57],[99,155,102,61,"defaultLocale"],[99,185,102,61],[99,186,102,61,"defaultLocale"],[99,226,102,74],[100,4,104,2],[100,8,104,8,"comparison"],[100,18,104,18],[100,21,104,21],[100,25,104,21,"compareAsc"],[100,55,104,21],[100,56,104,21,"compareAsc"],[100,85,104,31],[100,87,104,32,"laterDate"],[100,96,104,41],[100,98,104,43,"earlierDate"],[100,109,104,54],[100,110,104,55],[101,4,106,2],[101,8,106,6,"isNaN"],[101,13,106,11],[101,14,106,12,"comparison"],[101,24,106,22],[101,25,106,23],[101,27,106,25],[102,6,107,4],[102,12,107,10],[102,16,107,14,"RangeError"],[102,26,107,24],[102,27,107,25],[102,47,107,45],[102,48,107,46],[103,4,108,2],[104,4,110,2],[104,8,110,8,"localizeOptions"],[104,23,110,23],[104,26,110,26,"Object"],[104,32,110,32],[104,33,110,33,"assign"],[104,39,110,39],[104,40,110,40],[104,41,110,41],[104,42,110,42],[104,44,110,44,"options"],[104,51,110,51],[104,53,110,53],[105,6,111,4,"addSuffix"],[105,15,111,13],[105,17,111,15,"options"],[105,24,111,22],[105,44,111,15,"options"],[105,51,111,22],[105,52,111,24,"addSuffix"],[105,61,111,33],[106,6,112,4,"comparison"],[106,16,112,14],[106,18,112,16,"comparison"],[107,4,113,2],[107,5,113,3],[107,6,113,4],[108,4,115,2],[108,8,115,2,"_normalizeDates"],[108,23,115,2],[108,26,115,37,"normalizeDates"],[108,56,115,37],[108,57,115,37,"normalizeDates"],[108,99,115,51],[108,100,115,51,"apply"],[108,105,115,51],[108,115,116,4,"options"],[108,122,116,11],[108,142,116,4,"options"],[108,149,116,11],[108,150,116,13,"in"],[108,152,116,15],[108,154,116,15,"concat"],[108,160,116,15],[108,165,116,15,"_toConsumableArray2"],[108,184,116,15],[108,185,116,15,"default"],[108,192,116,15],[108,194,117,8,"comparison"],[108,204,117,18],[108,207,117,21],[108,208,117,22],[108,211,117,25],[108,212,117,26,"earlierDate"],[108,223,117,37],[108,225,117,39,"laterDate"],[108,234,117,48],[108,235,117,49],[108,238,117,52],[108,239,117,53,"laterDate"],[108,248,117,62],[108,250,117,64,"earlierDate"],[108,261,117,75],[108,262,117,76],[108,264,118,2],[108,265,118,3],[109,6,118,3,"_normalizeDates2"],[109,22,118,3],[109,29,118,3,"_slicedToArray2"],[109,44,118,3],[109,45,118,3,"default"],[109,52,118,3],[109,54,118,3,"_normalizeDates"],[109,69,118,3],[110,6,115,9,"laterDate_"],[110,16,115,19],[110,19,115,19,"_normalizeDates2"],[110,35,115,19],[111,6,115,21,"earlierDate_"],[111,18,115,33],[111,21,115,33,"_normalizeDates2"],[111,37,115,33],[112,4,120,2],[112,8,120,8,"roundingMethod"],[112,22,120,22],[112,25,120,25],[112,29,120,25,"getRoundingMethod"],[112,59,120,25],[112,60,120,25,"getRoundingMethod"],[112,108,120,42],[112,111,120,42,"_options$roundingMeth"],[112,132,120,42],[112,135,120,43,"options"],[112,142,120,50],[112,162,120,43,"options"],[112,169,120,50],[112,170,120,52,"roundingMethod"],[112,184,120,66],[112,196,120,66,"_options$roundingMeth"],[112,217,120,66],[112,220,120,70],[112,227,120,77],[112,228,120,78],[113,4,122,2],[113,8,122,8,"milliseconds"],[113,20,122,20],[113,23,122,23,"earlierDate_"],[113,35,122,35],[113,36,122,36,"getTime"],[113,43,122,43],[113,44,122,44],[113,45,122,45],[113,48,122,48,"laterDate_"],[113,58,122,58],[113,59,122,59,"getTime"],[113,66,122,66],[113,67,122,67],[113,68,122,68],[114,4,123,2],[114,8,123,8,"minutes"],[114,15,123,15],[114,18,123,18,"milliseconds"],[114,30,123,30],[114,33,123,33,"millisecondsInMinute"],[114,63,123,33],[114,64,123,33,"millisecondsInMinute"],[114,102,123,53],[115,4,125,2],[115,8,125,8,"timezoneOffset"],[115,22,125,22],[115,25,126,4],[115,29,126,4,"getTimezoneOffsetInMilliseconds"],[115,59,126,4],[115,60,126,4,"getTimezoneOffsetInMilliseconds"],[115,136,126,35],[115,138,126,36,"earlierDate_"],[115,150,126,48],[115,151,126,49],[115,154,127,4],[115,158,127,4,"getTimezoneOffsetInMilliseconds"],[115,188,127,4],[115,189,127,4,"getTimezoneOffsetInMilliseconds"],[115,265,127,35],[115,267,127,36,"laterDate_"],[115,277,127,46],[115,278,127,47],[117,4,129,2],[118,4,130,2],[119,4,131,2],[119,8,131,8,"dstNormalizedMinutes"],[119,28,131,28],[119,31,132,4],[119,32,132,5,"milliseconds"],[119,44,132,17],[119,47,132,20,"timezoneOffset"],[119,61,132,34],[119,65,132,38,"millisecondsInMinute"],[119,95,132,38],[119,96,132,38,"millisecondsInMinute"],[119,134,132,58],[120,4,134,2],[120,8,134,8,"defaultUnit"],[120,19,134,19],[120,22,134,22,"options"],[120,29,134,29],[120,49,134,22,"options"],[120,56,134,29],[120,57,134,31,"unit"],[120,61,134,35],[121,4,135,2],[121,8,135,6,"unit"],[121,12,135,10],[122,4,136,2],[122,8,136,6],[122,9,136,7,"defaultUnit"],[122,20,136,18],[122,22,136,20],[123,6,137,4],[123,10,137,8,"minutes"],[123,17,137,15],[123,20,137,18],[123,21,137,19],[123,23,137,21],[124,8,138,6,"unit"],[124,12,138,10],[124,15,138,13],[124,23,138,21],[125,6,139,4],[125,7,139,5],[125,13,139,11],[125,17,139,15,"minutes"],[125,24,139,22],[125,27,139,25],[125,29,139,27],[125,31,139,29],[126,8,140,6,"unit"],[126,12,140,10],[126,15,140,13],[126,23,140,21],[127,6,141,4],[127,7,141,5],[127,13,141,11],[127,17,141,15,"minutes"],[127,24,141,22],[127,27,141,25,"minutesInDay"],[127,57,141,25],[127,58,141,25,"minutesInDay"],[127,88,141,37],[127,90,141,39],[128,8,142,6,"unit"],[128,12,142,10],[128,15,142,13],[128,21,142,19],[129,6,143,4],[129,7,143,5],[129,13,143,11],[129,17,143,15,"dstNormalizedMinutes"],[129,37,143,35],[129,40,143,38,"minutesInMonth"],[129,70,143,38],[129,71,143,38,"minutesInMonth"],[129,103,143,52],[129,105,143,54],[130,8,144,6,"unit"],[130,12,144,10],[130,15,144,13],[130,20,144,18],[131,6,145,4],[131,7,145,5],[131,13,145,11],[131,17,145,15,"dstNormalizedMinutes"],[131,37,145,35],[131,40,145,38,"minutesInYear"],[131,70,145,38],[131,71,145,38,"minutesInYear"],[131,102,145,51],[131,104,145,53],[132,8,146,6,"unit"],[132,12,146,10],[132,15,146,13],[132,22,146,20],[133,6,147,4],[133,7,147,5],[133,13,147,11],[134,8,148,6,"unit"],[134,12,148,10],[134,15,148,13],[134,21,148,19],[135,6,149,4],[136,4,150,2],[136,5,150,3],[136,11,150,9],[137,6,151,4,"unit"],[137,10,151,8],[137,13,151,11,"defaultUnit"],[137,24,151,22],[138,4,152,2],[140,4,154,2],[141,4,155,2],[141,8,155,6,"unit"],[141,12,155,10],[141,17,155,15],[141,25,155,23],[141,27,155,25],[142,6,156,4],[142,10,156,10,"seconds"],[142,17,156,17],[142,20,156,20,"roundingMethod"],[142,34,156,34],[142,35,156,35,"milliseconds"],[142,47,156,47],[142,50,156,50],[142,54,156,54],[142,55,156,55],[143,6,157,4],[143,13,157,11,"locale"],[143,19,157,17],[143,20,157,18,"formatDistance"],[143,34,157,32],[143,35,157,33],[143,45,157,43],[143,47,157,45,"seconds"],[143,54,157,52],[143,56,157,54,"localizeOptions"],[143,71,157,69],[143,72,157,70],[145,6,159,4],[146,4,160,2],[146,5,160,3],[146,11,160,9],[146,15,160,13,"unit"],[146,19,160,17],[146,24,160,22],[146,32,160,30],[146,34,160,32],[147,6,161,4],[147,10,161,10,"roundedMinutes"],[147,24,161,24],[147,27,161,27,"roundingMethod"],[147,41,161,41],[147,42,161,42,"minutes"],[147,49,161,49],[147,50,161,50],[148,6,162,4],[148,13,162,11,"locale"],[148,19,162,17],[148,20,162,18,"formatDistance"],[148,34,162,32],[148,35,162,33],[148,45,162,43],[148,47,162,45,"roundedMinutes"],[148,61,162,59],[148,63,162,61,"localizeOptions"],[148,78,162,76],[148,79,162,77],[150,6,164,4],[151,4,165,2],[151,5,165,3],[151,11,165,9],[151,15,165,13,"unit"],[151,19,165,17],[151,24,165,22],[151,30,165,28],[151,32,165,30],[152,6,166,4],[152,10,166,10,"hours"],[152,15,166,15],[152,18,166,18,"roundingMethod"],[152,32,166,32],[152,33,166,33,"minutes"],[152,40,166,40],[152,43,166,43],[152,45,166,45],[152,46,166,46],[153,6,167,4],[153,13,167,11,"locale"],[153,19,167,17],[153,20,167,18,"formatDistance"],[153,34,167,32],[153,35,167,33],[153,43,167,41],[153,45,167,43,"hours"],[153,50,167,48],[153,52,167,50,"localizeOptions"],[153,67,167,65],[153,68,167,66],[155,6,169,4],[156,4,170,2],[156,5,170,3],[156,11,170,9],[156,15,170,13,"unit"],[156,19,170,17],[156,24,170,22],[156,29,170,27],[156,31,170,29],[157,6,171,4],[157,10,171,10,"days"],[157,14,171,14],[157,17,171,17,"roundingMethod"],[157,31,171,31],[157,32,171,32,"dstNormalizedMinutes"],[157,52,171,52],[157,55,171,55,"minutesInDay"],[157,85,171,55],[157,86,171,55,"minutesInDay"],[157,116,171,67],[157,117,171,68],[158,6,172,4],[158,13,172,11,"locale"],[158,19,172,17],[158,20,172,18,"formatDistance"],[158,34,172,32],[158,35,172,33],[158,42,172,40],[158,44,172,42,"days"],[158,48,172,46],[158,50,172,48,"localizeOptions"],[158,65,172,63],[158,66,172,64],[160,6,174,4],[161,4,175,2],[161,5,175,3],[161,11,175,9],[161,15,175,13,"unit"],[161,19,175,17],[161,24,175,22],[161,31,175,29],[161,33,175,31],[162,6,176,4],[162,10,176,10,"months"],[162,16,176,16],[162,19,176,19,"roundingMethod"],[162,33,176,33],[162,34,176,34,"dstNormalizedMinutes"],[162,54,176,54],[162,57,176,57,"minutesInMonth"],[162,87,176,57],[162,88,176,57,"minutesInMonth"],[162,120,176,71],[162,121,176,72],[163,6,177,4],[163,13,177,11,"months"],[163,19,177,17],[163,24,177,22],[163,26,177,24],[163,30,177,28,"defaultUnit"],[163,41,177,39],[163,46,177,44],[163,53,177,51],[163,56,178,8,"locale"],[163,62,178,14],[163,63,178,15,"formatDistance"],[163,77,178,29],[163,78,178,30],[163,86,178,38],[163,88,178,40],[163,89,178,41],[163,91,178,43,"localizeOptions"],[163,106,178,58],[163,107,178,59],[163,110,179,8,"locale"],[163,116,179,14],[163,117,179,15,"formatDistance"],[163,131,179,29],[163,132,179,30],[163,141,179,39],[163,143,179,41,"months"],[163,149,179,47],[163,151,179,49,"localizeOptions"],[163,166,179,64],[163,167,179,65],[165,6,181,4],[166,4,182,2],[166,5,182,3],[166,11,182,9],[167,6,183,4],[167,10,183,10,"years"],[167,15,183,15],[167,18,183,18,"roundingMethod"],[167,32,183,32],[167,33,183,33,"dstNormalizedMinutes"],[167,53,183,53],[167,56,183,56,"minutesInYear"],[167,86,183,56],[167,87,183,56,"minutesInYear"],[167,118,183,69],[167,119,183,70],[168,6,184,4],[168,13,184,11,"locale"],[168,19,184,17],[168,20,184,18,"formatDistance"],[168,34,184,32],[168,35,184,33],[168,43,184,41],[168,45,184,43,"years"],[168,50,184,48],[168,52,184,50,"localizeOptions"],[168,67,184,65],[168,68,184,66],[169,4,185,2],[170,2,186,0],[172,2,188,0],[173,2,188,0],[173,6,188,0,"_default"],[173,14,188,0],[173,17,188,0,"exports"],[173,24,188,0],[173,25,188,0,"default"],[173,32,188,0],[173,35,189,15,"formatDistanceStrict"],[173,55,189,35],[174,0,189,35],[174,3]],"functionMap":{"names":["<global>","formatDistanceStrict"],"mappings":"AAA;OCmG;CDsF"}},"type":"js/module"}]}