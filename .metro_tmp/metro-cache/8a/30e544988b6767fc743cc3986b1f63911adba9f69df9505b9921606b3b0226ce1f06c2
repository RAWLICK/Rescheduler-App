{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":183,"column":0,"index":5846}}],"key":"7kvm5yrOpz4NYiDi6sn4qxa8DVQ="}},{"name":"@babel/runtime/helpers/classCallCheck","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":183,"column":0,"index":5846}}],"key":"ohGilxjVqjyE1GooDVDt9OYg9x0="}},{"name":"@babel/runtime/helpers/createClass","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":183,"column":0,"index":5846}}],"key":"V6GYoXnblvuuGHJNMy7MHyaunsU="}},{"name":"../Utilities/infoLog","data":{"asyncType":null,"locs":[{"start":{"line":13,"column":16,"index":253},"end":{"line":13,"column":47,"index":284}},{"start":{"line":13,"column":16,"index":253},"end":{"line":13,"column":47,"index":284}},{"start":{"line":13,"column":16,"index":253},"end":{"line":13,"column":47,"index":284}},{"start":{"line":13,"column":16,"index":253},"end":{"line":13,"column":47,"index":284}},{"start":{"line":13,"column":16,"index":253},"end":{"line":13,"column":47,"index":284}},{"start":{"line":13,"column":16,"index":253},"end":{"line":13,"column":47,"index":284}},{"start":{"line":13,"column":16,"index":253},"end":{"line":13,"column":47,"index":284}}],"key":"te7FMDljSHoh4Ptoq0ebhkaWbSA="}},{"name":"invariant","data":{"asyncType":null,"locs":[{"start":{"line":14,"column":18,"index":304},"end":{"line":14,"column":38,"index":324}}],"key":"Fzi/BpZws2YooIGJ9b6u0HJtuks="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Copyright (c) Meta Platforms, Inc. and affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * @format\n   * \n   */\n\n  'use strict';\n\n  var _interopRequireDefault = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  var _classCallCheck2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[1], \"@babel/runtime/helpers/classCallCheck\"));\n  var _createClass2 = _interopRequireDefault(_$$_REQUIRE(_dependencyMap[2], \"@babel/runtime/helpers/createClass\"));\n  var DEBUG = false;\n\n  /**\n   * TaskQueue - A system for queueing and executing a mix of simple callbacks and\n   * trees of dependent tasks based on Promises. No tasks are executed unless\n   * `processNext` is called.\n   *\n   * `enqueue` takes a Task object with either a simple `run` callback, or a\n   * `gen` function that returns a `Promise` and puts it in the queue.  If a gen\n   * function is supplied, then the promise it returns will block execution of\n   * tasks already in the queue until it resolves. This can be used to make sure\n   * the first task is fully resolved (including asynchronous dependencies that\n   * also schedule more tasks via `enqueue`) before starting on the next task.\n   * The `onMoreTasks` constructor argument is used to inform the owner that an\n   * async task has resolved and that the queue should be processed again.\n   *\n   * Note: Tasks are only actually executed with explicit calls to `processNext`.\n   */\n  var TaskQueue = /*#__PURE__*/function () {\n    /**\n     * TaskQueue instances are self contained and independent, so multiple tasks\n     * of varying semantics and priority can operate together.\n     *\n     * `onMoreTasks` is invoked when `PromiseTask`s resolve if there are more\n     * tasks to process.\n     */\n    function TaskQueue(_ref) {\n      var onMoreTasks = _ref.onMoreTasks;\n      (0, _classCallCheck2.default)(this, TaskQueue);\n      this._onMoreTasks = onMoreTasks;\n      this._queueStack = [{\n        tasks: [],\n        popable: false\n      }];\n    }\n\n    /**\n     * Add a task to the queue.  It is recommended to name your tasks for easier\n     * async debugging. Tasks will not be executed until `processNext` is called\n     * explicitly.\n     */\n    return (0, _createClass2.default)(TaskQueue, [{\n      key: \"enqueue\",\n      value: function enqueue(task) {\n        this._getCurrentQueue().push(task);\n      }\n    }, {\n      key: \"enqueueTasks\",\n      value: function enqueueTasks(tasks) {\n        var _this = this;\n        tasks.forEach(function (task) {\n          return _this.enqueue(task);\n        });\n      }\n    }, {\n      key: \"cancelTasks\",\n      value: function cancelTasks(tasksToCancel) {\n        // search through all tasks and remove them.\n        this._queueStack = this._queueStack.map(function (queue) {\n          return Object.assign({}, queue, {\n            tasks: queue.tasks.filter(function (task) {\n              return tasksToCancel.indexOf(task) === -1;\n            })\n          });\n        }).filter(function (queue, idx) {\n          return queue.tasks.length > 0 || idx === 0;\n        });\n      }\n\n      /**\n       * Check to see if `processNext` should be called.\n       *\n       * @returns {boolean} Returns true if there are tasks that are ready to be\n       * processed with `processNext`, or returns false if there are no more tasks\n       * to be processed right now, although there may be tasks in the queue that\n       * are blocked by earlier `PromiseTask`s that haven't resolved yet.\n       * `onMoreTasks` will be called after each `PromiseTask` resolves if there are\n       * tasks ready to run at that point.\n       */\n    }, {\n      key: \"hasTasksToProcess\",\n      value: function hasTasksToProcess() {\n        return this._getCurrentQueue().length > 0;\n      }\n\n      /**\n       * Executes the next task in the queue.\n       */\n    }, {\n      key: \"processNext\",\n      value: function processNext() {\n        var queue = this._getCurrentQueue();\n        if (queue.length) {\n          var task = queue.shift();\n          try {\n            if (typeof task === 'object' && task.gen) {\n              DEBUG && _$$_REQUIRE(_dependencyMap[3], \"../Utilities/infoLog\")('TaskQueue: genPromise for task ' + task.name);\n              this._genPromise(task);\n            } else if (typeof task === 'object' && task.run) {\n              DEBUG && _$$_REQUIRE(_dependencyMap[3], \"../Utilities/infoLog\")('TaskQueue: run task ' + task.name);\n              task.run();\n            } else {\n              _$$_REQUIRE(_dependencyMap[4], \"invariant\")(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\\n' + JSON.stringify(task, null, 2));\n              DEBUG && _$$_REQUIRE(_dependencyMap[3], \"../Utilities/infoLog\")('TaskQueue: run anonymous task');\n              task();\n            }\n          } catch (e) {\n            e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n            throw e;\n          }\n        }\n      }\n    }, {\n      key: \"_getCurrentQueue\",\n      value: function _getCurrentQueue() {\n        var stackIdx = this._queueStack.length - 1;\n        var queue = this._queueStack[stackIdx];\n        if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {\n          this._queueStack.pop();\n          DEBUG && _$$_REQUIRE(_dependencyMap[3], \"../Utilities/infoLog\")('TaskQueue: popped queue: ', {\n            stackIdx: stackIdx,\n            queueStackSize: this._queueStack.length\n          });\n          return this._getCurrentQueue();\n        } else {\n          return queue.tasks;\n        }\n      }\n    }, {\n      key: \"_genPromise\",\n      value: function _genPromise(task) {\n        var _this2 = this;\n        // Each async task pushes it's own queue onto the queue stack. This\n        // effectively defers execution of previously queued tasks until the promise\n        // resolves, at which point we allow the new queue to be popped, which\n        // happens once it is fully processed.\n        this._queueStack.push({\n          tasks: [],\n          popable: false\n        });\n        var stackIdx = this._queueStack.length - 1;\n        var stackItem = this._queueStack[stackIdx];\n        DEBUG && _$$_REQUIRE(_dependencyMap[3], \"../Utilities/infoLog\")('TaskQueue: push new queue: ', {\n          stackIdx: stackIdx\n        });\n        DEBUG && _$$_REQUIRE(_dependencyMap[3], \"../Utilities/infoLog\")('TaskQueue: exec gen task ' + task.name);\n        task.gen().then(function () {\n          DEBUG && _$$_REQUIRE(_dependencyMap[3], \"../Utilities/infoLog\")('TaskQueue: onThen for gen task ' + task.name, {\n            stackIdx: stackIdx,\n            queueStackSize: _this2._queueStack.length\n          });\n          stackItem.popable = true;\n          _this2.hasTasksToProcess() && _this2._onMoreTasks();\n        }).catch(function (ex) {\n          setTimeout(function () {\n            ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;\n            throw ex;\n          }, 0);\n        });\n      }\n    }]);\n  }();\n  module.exports = TaskQueue;\n});","lineCount":180,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[12,2,11,0],[12,14,11,12],[14,2,11,13],[14,6,11,13,"_interopRequireDefault"],[14,28,11,13],[14,31,11,13,"_$$_REQUIRE"],[14,42,11,13],[14,43,11,13,"_dependencyMap"],[14,57,11,13],[15,2,11,13],[15,6,11,13,"_classCallCheck2"],[15,22,11,13],[15,25,11,13,"_interopRequireDefault"],[15,47,11,13],[15,48,11,13,"_$$_REQUIRE"],[15,59,11,13],[15,60,11,13,"_dependencyMap"],[15,74,11,13],[16,2,11,13],[16,6,11,13,"_createClass2"],[16,19,11,13],[16,22,11,13,"_interopRequireDefault"],[16,44,11,13],[16,45,11,13,"_$$_REQUIRE"],[16,56,11,13],[16,57,11,13,"_dependencyMap"],[16,71,11,13],[17,2,26,0],[17,6,26,6,"DEBUG"],[17,11,26,18],[17,14,26,21],[17,19,26,26],[19,2,28,0],[20,0,29,0],[21,0,30,0],[22,0,31,0],[23,0,32,0],[24,0,33,0],[25,0,34,0],[26,0,35,0],[27,0,36,0],[28,0,37,0],[29,0,38,0],[30,0,39,0],[31,0,40,0],[32,0,41,0],[33,0,42,0],[34,0,43,0],[35,2,28,0],[35,6,44,6,"TaskQueue"],[35,15,44,15],[36,4,45,2],[37,0,46,0],[38,0,47,0],[39,0,48,0],[40,0,49,0],[41,0,50,0],[42,0,51,0],[43,4,52,2],[43,13,52,2,"TaskQueue"],[43,23,52,2,"_ref"],[43,27,52,2],[43,29,52,61],[44,6,52,61],[44,10,52,15,"onMoreTasks"],[44,21,52,26],[44,24,52,26,"_ref"],[44,28,52,26],[44,29,52,15,"onMoreTasks"],[44,40,52,26],[45,6,52,26],[45,10,52,26,"_classCallCheck2"],[45,26,52,26],[45,27,52,26,"default"],[45,34,52,26],[45,42,52,26,"TaskQueue"],[45,51,52,26],[46,6,53,4],[46,10,53,8],[46,11,53,9,"_onMoreTasks"],[46,23,53,21],[46,26,53,24,"onMoreTasks"],[46,37,53,35],[47,6,54,4],[47,10,54,8],[47,11,54,9,"_queueStack"],[47,22,54,20],[47,25,54,23],[47,26,54,24],[48,8,54,25,"tasks"],[48,13,54,30],[48,15,54,32],[48,17,54,34],[49,8,54,36,"popable"],[49,15,54,43],[49,17,54,45],[50,6,54,50],[50,7,54,51],[50,8,54,52],[51,4,55,2],[53,4,57,2],[54,0,58,0],[55,0,59,0],[56,0,60,0],[57,0,61,0],[58,4,57,2],[58,15,57,2,"_createClass2"],[58,28,57,2],[58,29,57,2,"default"],[58,36,57,2],[58,38,57,2,"TaskQueue"],[58,47,57,2],[59,6,57,2,"key"],[59,9,57,2],[60,6,57,2,"value"],[60,11,57,2],[60,13,62,2],[60,22,62,2,"enqueue"],[60,29,62,9,"enqueue"],[60,30,62,10,"task"],[60,34,62,20],[60,36,62,28],[61,8,63,4],[61,12,63,8],[61,13,63,9,"_getCurrentQueue"],[61,29,63,25],[61,30,63,26],[61,31,63,27],[61,32,63,28,"push"],[61,36,63,32],[61,37,63,33,"task"],[61,41,63,37],[61,42,63,38],[62,6,64,2],[63,4,64,3],[64,6,64,3,"key"],[64,9,64,3],[65,6,64,3,"value"],[65,11,64,3],[65,13,66,2],[65,22,66,2,"enqueueTasks"],[65,34,66,14,"enqueueTasks"],[65,35,66,15,"tasks"],[65,40,66,33],[65,42,66,41],[66,8,66,41],[66,12,66,41,"_this"],[66,17,66,41],[67,8,67,4,"tasks"],[67,13,67,9],[67,14,67,10,"forEach"],[67,21,67,17],[67,22,67,18],[67,32,67,18,"task"],[67,36,67,22],[68,10,67,22],[68,17,67,26,"_this"],[68,22,67,30],[68,23,67,31,"enqueue"],[68,30,67,38],[68,31,67,39,"task"],[68,35,67,43],[68,36,67,44],[69,8,67,44],[69,10,67,45],[70,6,68,2],[71,4,68,3],[72,6,68,3,"key"],[72,9,68,3],[73,6,68,3,"value"],[73,11,68,3],[73,13,70,2],[73,22,70,2,"cancelTasks"],[73,33,70,13,"cancelTasks"],[73,34,70,14,"tasksToCancel"],[73,47,70,40],[73,49,70,48],[74,8,71,4],[75,8,72,4],[75,12,72,8],[75,13,72,9,"_queueStack"],[75,24,72,20],[75,27,72,23],[75,31,72,27],[75,32,72,28,"_queueStack"],[75,43,72,39],[75,44,73,7,"map"],[75,47,73,10],[75,48,73,11],[75,58,73,11,"queue"],[75,63,73,16],[76,10,73,16],[76,17,73,16,"Object"],[76,23,73,16],[76,24,73,16,"assign"],[76,30,73,16],[76,35,74,11,"queue"],[76,40,74,16],[77,12,75,8,"tasks"],[77,17,75,13],[77,19,75,15,"queue"],[77,24,75,20],[77,25,75,21,"tasks"],[77,30,75,26],[77,31,75,27,"filter"],[77,37,75,33],[77,38,75,34],[77,48,75,34,"task"],[77,52,75,38],[78,14,75,38],[78,21,75,42,"tasksToCancel"],[78,34,75,55],[78,35,75,56,"indexOf"],[78,42,75,63],[78,43,75,64,"task"],[78,47,75,68],[78,48,75,69],[78,53,75,74],[78,54,75,75],[78,55,75,76],[79,12,75,76],[80,10,75,77],[81,8,75,77],[81,9,76,8],[81,10,76,9],[81,11,77,7,"filter"],[81,17,77,13],[81,18,77,14],[81,28,77,15,"queue"],[81,33,77,20],[81,35,77,22,"idx"],[81,38,77,25],[82,10,77,25],[82,17,77,30,"queue"],[82,22,77,35],[82,23,77,36,"tasks"],[82,28,77,41],[82,29,77,42,"length"],[82,35,77,48],[82,38,77,51],[82,39,77,52],[82,43,77,56,"idx"],[82,46,77,59],[82,51,77,64],[82,52,77,65],[83,8,77,65],[83,10,77,66],[84,6,78,2],[86,6,80,2],[87,0,81,0],[88,0,82,0],[89,0,83,0],[90,0,84,0],[91,0,85,0],[92,0,86,0],[93,0,87,0],[94,0,88,0],[95,0,89,0],[96,4,80,2],[97,6,80,2,"key"],[97,9,80,2],[98,6,80,2,"value"],[98,11,80,2],[98,13,90,2],[98,22,90,2,"hasTasksToProcess"],[98,39,90,19,"hasTasksToProcess"],[98,40,90,19],[98,42,90,31],[99,8,91,4],[99,15,91,11],[99,19,91,15],[99,20,91,16,"_getCurrentQueue"],[99,36,91,32],[99,37,91,33],[99,38,91,34],[99,39,91,35,"length"],[99,45,91,41],[99,48,91,44],[99,49,91,45],[100,6,92,2],[102,6,94,2],[103,0,95,0],[104,0,96,0],[105,4,94,2],[106,6,94,2,"key"],[106,9,94,2],[107,6,94,2,"value"],[107,11,94,2],[107,13,97,2],[107,22,97,2,"processNext"],[107,33,97,13,"processNext"],[107,34,97,13],[107,36,97,22],[108,8,98,4],[108,12,98,10,"queue"],[108,17,98,15],[108,20,98,18],[108,24,98,22],[108,25,98,23,"_getCurrentQueue"],[108,41,98,39],[108,42,98,40],[108,43,98,41],[109,8,99,4],[109,12,99,8,"queue"],[109,17,99,13],[109,18,99,14,"length"],[109,24,99,20],[109,26,99,22],[110,10,100,6],[110,14,100,12,"task"],[110,18,100,16],[110,21,100,19,"queue"],[110,26,100,24],[110,27,100,25,"shift"],[110,32,100,30],[110,33,100,31],[110,34,100,32],[111,10,101,6],[111,14,101,10],[112,12,102,8],[112,16,102,12],[112,23,102,19,"task"],[112,27,102,23],[112,32,102,28],[112,40,102,36],[112,44,102,40,"task"],[112,48,102,44],[112,49,102,45,"gen"],[112,52,102,48],[112,54,102,50],[113,14,103,10,"DEBUG"],[113,19,103,15],[113,23,103,19,"_$$_REQUIRE"],[113,34,103,19],[113,35,103,19,"_dependencyMap"],[113,49,103,19],[113,78,103,27],[113,111,103,60],[113,114,103,63,"task"],[113,118,103,67],[113,119,103,68,"name"],[113,123,103,72],[113,124,103,73],[114,14,104,10],[114,18,104,14],[114,19,104,15,"_genPromise"],[114,30,104,26],[114,31,104,27,"task"],[114,35,104,31],[114,36,104,32],[115,12,105,8],[115,13,105,9],[115,19,105,15],[115,23,105,19],[115,30,105,26,"task"],[115,34,105,30],[115,39,105,35],[115,47,105,43],[115,51,105,47,"task"],[115,55,105,51],[115,56,105,52,"run"],[115,59,105,55],[115,61,105,57],[116,14,106,10,"DEBUG"],[116,19,106,15],[116,23,106,19,"_$$_REQUIRE"],[116,34,106,19],[116,35,106,19,"_dependencyMap"],[116,49,106,19],[116,78,106,27],[116,100,106,49],[116,103,106,52,"task"],[116,107,106,56],[116,108,106,57,"name"],[116,112,106,61],[116,113,106,62],[117,14,107,10,"task"],[117,18,107,14],[117,19,107,15,"run"],[117,22,107,18],[117,23,107,19],[117,24,107,20],[118,12,108,8],[118,13,108,9],[118,19,108,15],[119,14,109,10,"_$$_REQUIRE"],[119,25,109,10],[119,26,109,10,"_dependencyMap"],[119,40,109,10],[119,58,110,12],[119,65,110,19,"task"],[119,69,110,23],[119,74,110,28],[119,84,110,38],[119,86,111,12],[119,145,111,71],[119,148,112,14,"JSON"],[119,152,112,18],[119,153,112,19,"stringify"],[119,162,112,28],[119,163,112,29,"task"],[119,167,112,33],[119,169,112,35],[119,173,112,39],[119,175,112,41],[119,176,112,42],[119,177,113,10],[119,178,113,11],[120,14,114,10,"DEBUG"],[120,19,114,15],[120,23,114,19,"_$$_REQUIRE"],[120,34,114,19],[120,35,114,19,"_dependencyMap"],[120,49,114,19],[120,78,114,27],[120,109,114,58],[120,110,114,59],[121,14,115,10,"task"],[121,18,115,14],[121,19,115,15],[121,20,115,16],[122,12,116,8],[123,10,117,6],[123,11,117,7],[123,12,117,8],[123,19,117,15,"e"],[123,20,117,16],[123,22,117,18],[124,12,118,8,"e"],[124,13,118,9],[124,14,118,10,"message"],[124,21,118,17],[124,24,119,10],[124,53,119,39],[124,57,119,43,"task"],[124,61,119,47],[124,62,119,48,"name"],[124,66,119,52],[124,70,119,56],[124,72,119,58],[124,73,119,59],[124,76,119,62],[124,80,119,66],[124,83,119,69,"e"],[124,84,119,70],[124,85,119,71,"message"],[124,92,119,78],[125,12,120,8],[125,18,120,14,"e"],[125,19,120,15],[126,10,121,6],[127,8,122,4],[128,6,123,2],[129,4,123,3],[130,6,123,3,"key"],[130,9,123,3],[131,6,123,3,"value"],[131,11,123,3],[131,13,132,2],[131,22,132,2,"_getCurrentQueue"],[131,38,132,18,"_getCurrentQueue"],[131,39,132,18],[131,41,132,34],[132,8,133,4],[132,12,133,10,"stackIdx"],[132,20,133,18],[132,23,133,21],[132,27,133,25],[132,28,133,26,"_queueStack"],[132,39,133,37],[132,40,133,38,"length"],[132,46,133,44],[132,49,133,47],[132,50,133,48],[133,8,134,4],[133,12,134,10,"queue"],[133,17,134,15],[133,20,134,18],[133,24,134,22],[133,25,134,23,"_queueStack"],[133,36,134,34],[133,37,134,35,"stackIdx"],[133,45,134,43],[133,46,134,44],[134,8,135,4],[134,12,136,6,"queue"],[134,17,136,11],[134,18,136,12,"popable"],[134,25,136,19],[134,29,137,6,"queue"],[134,34,137,11],[134,35,137,12,"tasks"],[134,40,137,17],[134,41,137,18,"length"],[134,47,137,24],[134,52,137,29],[134,53,137,30],[134,57,138,6],[134,61,138,10],[134,62,138,11,"_queueStack"],[134,73,138,22],[134,74,138,23,"length"],[134,80,138,29],[134,83,138,32],[134,84,138,33],[134,86,139,6],[135,10,140,6],[135,14,140,10],[135,15,140,11,"_queueStack"],[135,26,140,22],[135,27,140,23,"pop"],[135,30,140,26],[135,31,140,27],[135,32,140,28],[136,10,141,6,"DEBUG"],[136,15,141,11],[136,19,142,8,"_$$_REQUIRE"],[136,30,142,8],[136,31,142,8,"_dependencyMap"],[136,45,142,8],[136,74,142,16],[136,101,142,43],[136,103,142,45],[137,12,143,10,"stackIdx"],[137,20,143,18],[137,22,143,10,"stackIdx"],[137,30,143,18],[138,12,144,10,"queueStackSize"],[138,26,144,24],[138,28,144,26],[138,32,144,30],[138,33,144,31,"_queueStack"],[138,44,144,42],[138,45,144,43,"length"],[139,10,145,8],[139,11,145,9],[139,12,145,10],[140,10,146,6],[140,17,146,13],[140,21,146,17],[140,22,146,18,"_getCurrentQueue"],[140,38,146,34],[140,39,146,35],[140,40,146,36],[141,8,147,4],[141,9,147,5],[141,15,147,11],[142,10,148,6],[142,17,148,13,"queue"],[142,22,148,18],[142,23,148,19,"tasks"],[142,28,148,24],[143,8,149,4],[144,6,150,2],[145,4,150,3],[146,6,150,3,"key"],[146,9,150,3],[147,6,150,3,"value"],[147,11,150,3],[147,13,152,2],[147,22,152,2,"_genPromise"],[147,33,152,13,"_genPromise"],[147,34,152,14,"task"],[147,38,152,31],[147,40,152,33],[148,8,152,33],[148,12,152,33,"_this2"],[148,18,152,33],[149,8,153,4],[150,8,154,4],[151,8,155,4],[152,8,156,4],[153,8,157,4],[153,12,157,8],[153,13,157,9,"_queueStack"],[153,24,157,20],[153,25,157,21,"push"],[153,29,157,25],[153,30,157,26],[154,10,157,27,"tasks"],[154,15,157,32],[154,17,157,34],[154,19,157,36],[155,10,157,38,"popable"],[155,17,157,45],[155,19,157,47],[156,8,157,52],[156,9,157,53],[156,10,157,54],[157,8,158,4],[157,12,158,10,"stackIdx"],[157,20,158,18],[157,23,158,21],[157,27,158,25],[157,28,158,26,"_queueStack"],[157,39,158,37],[157,40,158,38,"length"],[157,46,158,44],[157,49,158,47],[157,50,158,48],[158,8,159,4],[158,12,159,10,"stackItem"],[158,21,159,19],[158,24,159,22],[158,28,159,26],[158,29,159,27,"_queueStack"],[158,40,159,38],[158,41,159,39,"stackIdx"],[158,49,159,47],[158,50,159,48],[159,8,160,4,"DEBUG"],[159,13,160,9],[159,17,160,13,"_$$_REQUIRE"],[159,28,160,13],[159,29,160,13,"_dependencyMap"],[159,43,160,13],[159,72,160,21],[159,101,160,50],[159,103,160,52],[160,10,160,53,"stackIdx"],[160,18,160,61],[160,20,160,53,"stackIdx"],[161,8,160,61],[161,9,160,62],[161,10,160,63],[162,8,161,4,"DEBUG"],[162,13,161,9],[162,17,161,13,"_$$_REQUIRE"],[162,28,161,13],[162,29,161,13,"_dependencyMap"],[162,43,161,13],[162,72,161,21],[162,99,161,48],[162,102,161,51,"task"],[162,106,161,55],[162,107,161,56,"name"],[162,111,161,60],[162,112,161,61],[163,8,162,4,"task"],[163,12,162,8],[163,13,163,7,"gen"],[163,16,163,10],[163,17,163,11],[163,18,163,12],[163,19,164,7,"then"],[163,23,164,11],[163,24,164,12],[163,36,164,18],[164,10,165,8,"DEBUG"],[164,15,165,13],[164,19,166,10,"_$$_REQUIRE"],[164,30,166,10],[164,31,166,10,"_dependencyMap"],[164,45,166,10],[164,74,166,18],[164,107,166,51],[164,110,166,54,"task"],[164,114,166,58],[164,115,166,59,"name"],[164,119,166,63],[164,121,166,65],[165,12,167,12,"stackIdx"],[165,20,167,20],[165,22,167,12,"stackIdx"],[165,30,167,20],[166,12,168,12,"queueStackSize"],[166,26,168,26],[166,28,168,28,"_this2"],[166,34,168,32],[166,35,168,33,"_queueStack"],[166,46,168,44],[166,47,168,45,"length"],[167,10,169,10],[167,11,169,11],[167,12,169,12],[168,10,170,8,"stackItem"],[168,19,170,17],[168,20,170,18,"popable"],[168,27,170,25],[168,30,170,28],[168,34,170,32],[169,10,171,8,"_this2"],[169,16,171,12],[169,17,171,13,"hasTasksToProcess"],[169,34,171,30],[169,35,171,31],[169,36,171,32],[169,40,171,36,"_this2"],[169,46,171,40],[169,47,171,41,"_onMoreTasks"],[169,59,171,53],[169,60,171,54],[169,61,171,55],[170,8,172,6],[170,9,172,7],[170,10,172,8],[170,11,173,7,"catch"],[170,16,173,12],[170,17,173,13],[170,27,173,13,"ex"],[170,29,173,15],[170,31,173,19],[171,10,174,8,"setTimeout"],[171,20,174,18],[171,21,174,19],[171,33,174,25],[172,12,175,10,"ex"],[172,14,175,12],[172,15,175,13,"message"],[172,22,175,20],[172,25,175,23],[172,71,175,69,"task"],[172,75,175,73],[172,76,175,74,"name"],[172,80,175,78],[172,85,175,83,"ex"],[172,87,175,85],[172,88,175,86,"message"],[172,95,175,93],[172,97,175,95],[173,12,176,10],[173,18,176,16,"ex"],[173,20,176,18],[174,10,177,8],[174,11,177,9],[174,13,177,11],[174,14,177,12],[174,15,177,13],[175,8,178,6],[175,9,178,7],[175,10,178,8],[176,6,179,2],[177,4,179,3],[178,2,179,3],[179,2,182,0,"module"],[179,8,182,6],[179,9,182,7,"exports"],[179,16,182,14],[179,19,182,17,"TaskQueue"],[179,28,182,26],[180,0,182,27],[180,3]],"functionMap":{"names":["<global>","TaskQueue","constructor","enqueue","enqueueTasks","tasks.forEach$argument_0","cancelTasks","_queueStack.map$argument_0","queue.tasks.filter$argument_0","_queueStack.map.filter$argument_0","hasTasksToProcess","processNext","_getCurrentQueue","_genPromise","task.gen.then$argument_0","task.gen.then._catch$argument_0","setTimeout$argument_0"],"mappings":"AAA;AC2C;ECQ;GDG;EEO;GFE;EGE;kBCC,0BD;GHC;EKE;WCG;kCCE,0CD;QDC;cGC,mDH;GLC;ESY;GTE;EUK;GV0B;EWS;GXkB;EYE;YCY;ODQ;aEC;mBCC;SDG;OFC;GZC;CDC"}},"type":"js/module"}]}