{"dependencies":[{"name":"./isSymbol","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":15,"index":15},"end":{"line":1,"column":36,"index":36}}],"key":"4aENMmPx4A0YyMi79fdUpjQuSFY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * The base implementation of methods like `_.max` and `_.min` which accepts a\n   * `comparator` to determine the extremum value.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} iteratee The iteratee invoked per iteration.\n   * @param {Function} comparator The comparator used to compare values.\n   * @returns {*} Returns the extremum value.\n   */\n  function baseExtremum(array, iteratee, comparator) {\n    var index = -1,\n      length = array.length;\n    while (++index < length) {\n      var value = array[index],\n        current = iteratee(value);\n      if (current != null && (computed === undefined ? current === current && !_$$_REQUIRE(_dependencyMap[0], \"./isSymbol\")(current) : comparator(current, computed))) {\n        var computed = current,\n          result = value;\n      }\n    }\n    return result;\n  }\n  module.exports = baseExtremum;\n});","lineCount":26,"map":[[2,2,3,0],[3,0,4,0],[4,0,5,0],[5,0,6,0],[6,0,7,0],[7,0,8,0],[8,0,9,0],[9,0,10,0],[10,0,11,0],[11,0,12,0],[12,2,13,0],[12,11,13,9,"baseExtremum"],[12,23,13,21,"baseExtremum"],[12,24,13,22,"array"],[12,29,13,27],[12,31,13,29,"iteratee"],[12,39,13,37],[12,41,13,39,"comparator"],[12,51,13,49],[12,53,13,51],[13,4,14,2],[13,8,14,6,"index"],[13,13,14,11],[13,16,14,14],[13,17,14,15],[13,18,14,16],[14,6,15,6,"length"],[14,12,15,12],[14,15,15,15,"array"],[14,20,15,20],[14,21,15,21,"length"],[14,27,15,27],[15,4,17,2],[15,11,17,9],[15,13,17,11,"index"],[15,18,17,16],[15,21,17,19,"length"],[15,27,17,25],[15,29,17,27],[16,6,18,4],[16,10,18,8,"value"],[16,15,18,13],[16,18,18,16,"array"],[16,23,18,21],[16,24,18,22,"index"],[16,29,18,27],[16,30,18,28],[17,8,19,8,"current"],[17,15,19,15],[17,18,19,18,"iteratee"],[17,26,19,26],[17,27,19,27,"value"],[17,32,19,32],[17,33,19,33],[18,6,21,4],[18,10,21,8,"current"],[18,17,21,15],[18,21,21,19],[18,25,21,23],[18,30,21,28,"computed"],[18,38,21,36],[18,43,21,41,"undefined"],[18,52,21,50],[18,55,22,13,"current"],[18,62,22,20],[18,67,22,25,"current"],[18,74,22,32],[18,78,22,36],[18,79,22,37,"_$$_REQUIRE"],[18,90,22,37],[18,91,22,37,"_dependencyMap"],[18,105,22,37],[18,124,22,46,"current"],[18,131,22,53],[18,132,22,54],[18,135,23,12,"comparator"],[18,145,23,22],[18,146,23,23,"current"],[18,153,23,30],[18,155,23,32,"computed"],[18,163,23,40],[18,164,23,41],[18,165,24,9],[18,167,24,11],[19,8,25,6],[19,12,25,10,"computed"],[19,20,25,18],[19,23,25,21,"current"],[19,30,25,28],[20,10,26,10,"result"],[20,16,26,16],[20,19,26,19,"value"],[20,24,26,24],[21,6,27,4],[22,4,28,2],[23,4,29,2],[23,11,29,9,"result"],[23,17,29,15],[24,2,30,0],[25,2,32,0,"module"],[25,8,32,6],[25,9,32,7,"exports"],[25,16,32,14],[25,19,32,17,"baseExtremum"],[25,31,32,29],[26,0,32,30],[26,3]],"functionMap":{"names":["<global>","baseExtremum"],"mappings":"AAA;ACY;CDiB"}},"type":"js/module"}]}