{"dependencies":[{"name":"@babel/runtime/helpers/slicedToArray","data":{"asyncType":null,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":51,"column":39,"index":1648}}],"key":"EU+qeBIKi4KcIzPeK4PbkLqFqVY="}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  var _slicedToArray = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/slicedToArray\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.colorToRgba = void 0;\n  var colorToRgba = function colorToRgba(variables) {\n    // this function is required for expo-linear-gradient on iOS. To fade to transparent, we need\n    // to be able to add opacity to the background color. Supplying 'transparent' does not work\n    // because that is actually a transparent black (rgba(0, 0, 0, 1)), which results in dodgy rendering\n\n    var color = variables.color,\n      _variables$opacity = variables.opacity,\n      opacity = _variables$opacity === void 0 ? 1 : _variables$opacity;\n    // Handle named colors\n    var namedColors = {\n      transparent: \"rgba(0, 0, 0, 0)\",\n      black: \"rgba(0, 0, 0, 1)\",\n      white: \"rgba(255, 255, 255, 1)\",\n      blue: \"rgba(0, 0, 255, 1)\",\n      green: \"rgba(0, 128, 0, 1)\",\n      gray: \"rgba(128, 128, 128, 1)\",\n      red: \"rgba(255, 0, 0, 1)\"\n    };\n    if (color in namedColors) {\n      return namedColors[color];\n    }\n\n    // Handle RGB format\n    if (color.startsWith(\"rgb(\")) {\n      var rgbValues = color.replace(\"rgb(\", \"\").replace(\")\", \"\").split(\",\").map(function (value) {\n        return parseInt(value.trim(), 10);\n      });\n      var _rgbValues = _slicedToArray(rgbValues, 3),\n        r = _rgbValues[0],\n        g = _rgbValues[1],\n        b = _rgbValues[2];\n      return `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    // Handle hex format\n    if (color.startsWith(\"#\")) {\n      var hexColor = color.slice(1);\n      if (hexColor.length === 3) {\n        hexColor = hexColor.split(\"\").map(function (value) {\n          return value + value;\n        }).join(\"\");\n      }\n      var _r = parseInt(hexColor.slice(0, 2), 16);\n      var _g = parseInt(hexColor.slice(2, 4), 16);\n      var _b = parseInt(hexColor.slice(4, 6), 16);\n      return `rgba(${_r}, ${_g}, ${_b}, ${opacity})`;\n    }\n    return color; // Return unchanged if unable to parse\n  };\n  exports.colorToRgba = colorToRgba;\n});","lineCount":59,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13],[4,6,1,13,"_slicedToArray"],[4,20,1,13],[4,23,1,13,"_$$_REQUIRE"],[4,34,1,13],[4,35,1,13,"_dependencyMap"],[4,49,1,13],[5,2,3,0,"Object"],[5,8,3,6],[5,9,3,7,"defineProperty"],[5,23,3,21],[5,24,3,22,"exports"],[5,31,3,29],[5,33,3,31],[5,45,3,43],[5,47,3,45],[6,4,4,2,"value"],[6,9,4,7],[6,11,4,9],[7,2,5,0],[7,3,5,1],[7,4,5,2],[8,2,6,0,"exports"],[8,9,6,7],[8,10,6,8,"colorToRgba"],[8,21,6,19],[8,24,6,22],[8,29,6,27],[8,30,6,28],[9,2,7,0],[9,6,7,6,"colorToRgba"],[9,17,7,17],[9,20,7,20],[9,29,7,6,"colorToRgba"],[9,40,7,17,"colorToRgba"],[9,41,7,20,"variables"],[9,50,7,29],[9,52,7,33],[10,4,8,2],[11,4,9,2],[12,4,10,2],[14,4,12,2],[14,8,13,4,"color"],[14,13,13,9],[14,16,15,6,"variables"],[14,25,15,15],[14,26,13,4,"color"],[14,31,13,9],[15,6,13,9,"_variables$opacity"],[15,24,13,9],[15,27,15,6,"variables"],[15,36,15,15],[15,37,14,4,"opacity"],[15,44,14,11],[16,6,14,4,"opacity"],[16,13,14,11],[16,16,14,11,"_variables$opacity"],[16,34,14,11],[16,48,14,14],[16,49,14,15],[16,52,14,15,"_variables$opacity"],[16,70,14,15],[17,4,16,2],[18,4,17,2],[18,8,17,8,"namedColors"],[18,19,17,19],[18,22,17,22],[19,6,18,4,"transparent"],[19,17,18,15],[19,19,18,17],[19,37,18,35],[20,6,19,4,"black"],[20,11,19,9],[20,13,19,11],[20,31,19,29],[21,6,20,4,"white"],[21,11,20,9],[21,13,20,11],[21,37,20,35],[22,6,21,4,"blue"],[22,10,21,8],[22,12,21,10],[22,32,21,30],[23,6,22,4,"green"],[23,11,22,9],[23,13,22,11],[23,33,22,31],[24,6,23,4,"gray"],[24,10,23,8],[24,12,23,10],[24,36,23,34],[25,6,24,4,"red"],[25,9,24,7],[25,11,24,9],[26,4,25,2],[26,5,25,3],[27,4,26,2],[27,8,26,6,"color"],[27,13,26,11],[27,17,26,15,"namedColors"],[27,28,26,26],[27,30,26,28],[28,6,27,4],[28,13,27,11,"namedColors"],[28,24,27,22],[28,25,27,23,"color"],[28,30,27,28],[28,31,27,29],[29,4,28,2],[31,4,30,2],[32,4,31,2],[32,8,31,6,"color"],[32,13,31,11],[32,14,31,12,"startsWith"],[32,24,31,22],[32,25,31,23],[32,31,31,29],[32,32,31,30],[32,34,31,32],[33,6,32,4],[33,10,32,10,"rgbValues"],[33,19,32,19],[33,22,32,22,"color"],[33,27,32,27],[33,28,32,28,"replace"],[33,35,32,35],[33,36,32,36],[33,42,32,42],[33,44,32,44],[33,46,32,46],[33,47,32,47],[33,48,32,48,"replace"],[33,55,32,55],[33,56,32,56],[33,59,32,59],[33,61,32,61],[33,63,32,63],[33,64,32,64],[33,65,32,65,"split"],[33,70,32,70],[33,71,32,71],[33,74,32,74],[33,75,32,75],[33,76,32,76,"map"],[33,79,32,79],[33,80,32,80],[33,90,32,80,"value"],[33,95,32,85],[34,8,32,85],[34,15,32,89,"parseInt"],[34,23,32,97],[34,24,32,98,"value"],[34,29,32,103],[34,30,32,104,"trim"],[34,34,32,108],[34,35,32,109],[34,36,32,110],[34,38,32,112],[34,40,32,114],[34,41,32,115],[35,6,32,115],[35,8,32,116],[36,6,33,4],[36,10,33,4,"_rgbValues"],[36,20,33,4],[36,23,33,4,"_slicedToArray"],[36,37,33,4],[36,38,33,22,"rgbValues"],[36,47,33,31],[37,8,33,11,"r"],[37,9,33,12],[37,12,33,12,"_rgbValues"],[37,22,33,12],[38,8,33,14,"g"],[38,9,33,15],[38,12,33,15,"_rgbValues"],[38,22,33,15],[39,8,33,17,"b"],[39,9,33,18],[39,12,33,18,"_rgbValues"],[39,22,33,18],[40,6,34,4],[40,13,34,11],[40,21,34,19,"r"],[40,22,34,20],[40,27,34,25,"g"],[40,28,34,26],[40,33,34,31,"b"],[40,34,34,32],[40,39,34,37,"opacity"],[40,46,34,44],[40,49,34,47],[41,4,35,2],[43,4,37,2],[44,4,38,2],[44,8,38,6,"color"],[44,13,38,11],[44,14,38,12,"startsWith"],[44,24,38,22],[44,25,38,23],[44,28,38,26],[44,29,38,27],[44,31,38,29],[45,6,39,4],[45,10,39,8,"hexColor"],[45,18,39,16],[45,21,39,19,"color"],[45,26,39,24],[45,27,39,25,"slice"],[45,32,39,30],[45,33,39,31],[45,34,39,32],[45,35,39,33],[46,6,40,4],[46,10,40,8,"hexColor"],[46,18,40,16],[46,19,40,17,"length"],[46,25,40,23],[46,30,40,28],[46,31,40,29],[46,33,40,31],[47,8,41,6,"hexColor"],[47,16,41,14],[47,19,41,17,"hexColor"],[47,27,41,25],[47,28,41,26,"split"],[47,33,41,31],[47,34,41,32],[47,36,41,34],[47,37,41,35],[47,38,41,36,"map"],[47,41,41,39],[47,42,41,40],[47,52,41,40,"value"],[47,57,41,45],[48,10,41,45],[48,17,41,49,"value"],[48,22,41,54],[48,25,41,57,"value"],[48,30,41,62],[49,8,41,62],[49,10,41,63],[49,11,41,64,"join"],[49,15,41,68],[49,16,41,69],[49,18,41,71],[49,19,41,72],[50,6,42,4],[51,6,43,4],[51,10,43,10,"r"],[51,12,43,11],[51,15,43,14,"parseInt"],[51,23,43,22],[51,24,43,23,"hexColor"],[51,32,43,31],[51,33,43,32,"slice"],[51,38,43,37],[51,39,43,38],[51,40,43,39],[51,42,43,41],[51,43,43,42],[51,44,43,43],[51,46,43,45],[51,48,43,47],[51,49,43,48],[52,6,44,4],[52,10,44,10,"g"],[52,12,44,11],[52,15,44,14,"parseInt"],[52,23,44,22],[52,24,44,23,"hexColor"],[52,32,44,31],[52,33,44,32,"slice"],[52,38,44,37],[52,39,44,38],[52,40,44,39],[52,42,44,41],[52,43,44,42],[52,44,44,43],[52,46,44,45],[52,48,44,47],[52,49,44,48],[53,6,45,4],[53,10,45,10,"b"],[53,12,45,11],[53,15,45,14,"parseInt"],[53,23,45,22],[53,24,45,23,"hexColor"],[53,32,45,31],[53,33,45,32,"slice"],[53,38,45,37],[53,39,45,38],[53,40,45,39],[53,42,45,41],[53,43,45,42],[53,44,45,43],[53,46,45,45],[53,48,45,47],[53,49,45,48],[54,6,46,4],[54,13,46,11],[54,21,46,19,"r"],[54,23,46,20],[54,28,46,25,"g"],[54,30,46,26],[54,35,46,31,"b"],[54,37,46,32],[54,42,46,37,"opacity"],[54,49,46,44],[54,52,46,47],[55,4,47,2],[56,4,48,2],[56,11,48,9,"color"],[56,16,48,14],[56,17,48,15],[56,18,48,16],[57,2,49,0],[57,3,49,1],[58,2,50,0,"exports"],[58,9,50,7],[58,10,50,8,"colorToRgba"],[58,21,50,19],[58,24,50,22,"colorToRgba"],[58,35,50,33],[59,0,50,34],[59,3]],"functionMap":{"names":["<global>","colorToRgba","color.replace.replace.split.map$argument_0","hexColor.split.map$argument_0"],"mappings":"AAA;oBCM;gFCyB,mCD;wCES,sBF;CDQ"}},"type":"js/module"}]}